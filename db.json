{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/logo.jpg","path":"images/logo.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1594905112374},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1594905112377},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1594905112377},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1594905112378},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1594905112378},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1594905112396},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1594905112379},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1594905112379},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1594905112380},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1594905112379},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1594905112380},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1594905112381},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1594905112382},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1594905112381},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1594905112382},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1594905112382},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1594905112383},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1594905112383},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1594905112393},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1594905112394},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1594905112394},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1594905112394},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1594905112395},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1594905112395},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1594905112396},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1594905112397},{"_id":"source/_posts/hello-world.md","hash":"b399c2b5d600eab44dcc723854058c99d85c2662","modified":1594955394514},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1594905112384},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1594905112385},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1594905112385},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1594905112386},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1594905112386},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1594905112387},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1594905112385},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1594905112387},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1594905112387},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1594905112388},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1594905112392},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1594905112391},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1594905112392},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1594905112392},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1594905112393},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1594905112393},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1594905112398},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1594905112403},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1594905112507},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1594905112508},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1594905112509},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1594905112510},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1594905112508},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1594905112510},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1594905112510},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1594905112513},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1594905112514},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1594905112515},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1594905112523},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1594905112388},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1594905112389},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1594905112389},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1594905112390},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1594905112390},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1594905112391},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1594905112398},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1594905112399},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1594905112399},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1594905112400},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1594905112400},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1594905112400},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1594905112401},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1594905112401},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1594905112402},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1594905112402},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1594905112403},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1594905112403},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1594905112405},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1594905112405},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1594905112504},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1594905112511},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1594905112511},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1594905112512},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1594905112512},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1594905112513},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1594905112513},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1594905112503},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1594905112502},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1594905112506},{"_id":"source/_posts/# React-redux.md","hash":"acac8e0399fca2d1fee27f0249b3277a6703918f","modified":1594957843458},{"_id":"source/_posts/## JavaScript设计模式.md","hash":"bf4105810666ffcb3fa550fc67e15be6290cb114","modified":1587885360335},{"_id":"source/_posts/# vue父子传参场景集锦.md","hash":"e1eccfe05ce20cb8f2c2814e22ba2c975e2622e3","modified":1594955132264},{"_id":"source/_posts/001.png","hash":"4bf4fffe62d3a78a29634a1590777312c6e28ce7","modified":1594040840063},{"_id":"source/_posts/002.png","hash":"ca59ba86b5c16567b0e8c2b6dfd6b43c355f41c9","modified":1594041098051},{"_id":"source/_posts/003.png","hash":"9788561e19036cfc2a8c08b659d49cb9ba06ef27","modified":1594041737588},{"_id":"source/_posts/JavaScript深入之继承的多种方式和优缺点.md","hash":"9fb2fd583564bf06a6740f4a8d75ba632345ae20","modified":1594986462049},{"_id":"source/_posts/React.md","hash":"e11334c396a8c1faebfec94e3b5cf932f5600ada","modified":1580883506374},{"_id":"source/_posts/Snipaste_2020-07-11_10-28-22.png","hash":"753e786272c663eca9d722e4275c95b78cec8ba3","modified":1594434507401},{"_id":"source/_posts/event.md","hash":"c9ddda02c48c540d491f0812d4579f24badbbe4b","modified":1594986400603},{"_id":"source/_posts/fs.md","hash":"9365139f4371aabae57b7d312d3295812de1f9f9","modified":1594986434611},{"_id":"source/_posts/ht.md","hash":"e70ab9c291730c06d2784043468e1c88efb50ce8","modified":1594986009975},{"_id":"source/_posts/npm常用命令.md","hash":"71b67d3fc95ed3d286d89fef4cc517d491ba160b","modified":1594987969529},{"_id":"source/_posts/react之Context.md","hash":"2566c89cee620fe0b10047cede23190dafc8a048","modified":1594987794022},{"_id":"source/_posts/前端工程化实践（一）-- 前端组件化.md","hash":"aec0290fd214474e52825ee9494e11a03d0f81b5","modified":1594986305217},{"_id":"source/_posts/react性能实践.md","hash":"661f1b798036807c922455147e626d90cc7250b7","modified":1594988011553},{"_id":"source/_posts/前端应该会的23个linux常用命令.md","hash":"447e1da515e11531b1a9d9f24c7d38fda615f7de","modified":1594987028629},{"_id":"source/_posts/发包.md","hash":"630a6ad5a33dee678270a01e3ee19037ef2b859b","modified":1594986263833},{"_id":"source/_posts/小程序web-view踩坑.md","hash":"fc8a14398404fdef18040b199ba99a7994ef725f","modified":1594985616486},{"_id":"source/_posts/干掉端口号方法：.md","hash":"ac514827b65e7ca28585c8dedfe485fb85ef06b1","modified":1594985394333},{"_id":"source/_posts/脚手架.md","hash":"14e3c0934a494fa5ee4f5399daeccf59a0720e2f","modified":1594986285021},{"_id":"source/_posts/自定义事件对象.md","hash":"039f12ec7e465b785b24a051c550b3f0d4d7aa31","modified":1594988027542},{"_id":"source/_posts/面向对象.md","hash":"f6d155bddb0f05cee16c27bf93c645e8d0981baf","modified":1594987230287},{"_id":"source/_posts/1469407-20190424153506875-1910084310.png","hash":"9b901b06786d5dde27b9020550593662ee614a6c","modified":1576754092174},{"_id":"source/_posts/批注 2019-10-06 234301.png","hash":"7709c1f804c708db5f8d043277bca4f0feb917e4","modified":1570376585508},{"_id":"source/_posts/宝贝家.png","hash":"d824ec6106ead28a1edf25d5f03804f306abdb76","modified":1581058187169},{"_id":"source/_posts/test-1.md","hash":"f3cce5bc27a4d0be8363ebb47e6234183842bbb7","modified":1594907498843},{"_id":"source/_posts/test.md","hash":"e4dae178a2b66ba1da87d8f613797bfc32230d90","modified":1594907552083},{"_id":"themes/ayer/.gitignore","hash":"b253f9829edcd1cf2a1fff279de3091e987dce6e","modified":1594949161601},{"_id":"themes/ayer/.postcssrc","hash":"c171a60205840e3dcd3825d5bbb6b2d19d48ee76","modified":1594949161601},{"_id":"themes/ayer/.travis.yml","hash":"5acc6f203681ce88bc2dbb0f86e0b3dd32a243a0","modified":1594949161602},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1594949161602},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1594949161602},{"_id":"themes/ayer/README.md","hash":"de8e0de68d9bc27d2524c7b90aa1ca3a97c9a062","modified":1594949161603},{"_id":"themes/ayer/_config.yml","hash":"7116bc6d2414c3251f117d4d0cb3d43bbf624abc","modified":1594985744939},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1594949161625},{"_id":"themes/ayer/package.json","hash":"f1803fed71d2b0cde458595b000759132f87aa5c","modified":1594949161625},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"49e772bb69fec01a4a7bf9d440a28069f3df7970","modified":1594949161598},{"_id":"themes/ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1594949161600},{"_id":"themes/ayer/languages/default.yml","hash":"217d6347d560eeb47f09def61c545f27b40f672d","modified":1594949161604},{"_id":"themes/ayer/languages/de.yml","hash":"d12bd7ebee4772e9f982a760eb7512506c7f2bb5","modified":1594949161604},{"_id":"themes/ayer/languages/en.yml","hash":"217d6347d560eeb47f09def61c545f27b40f672d","modified":1594949161605},{"_id":"themes/ayer/languages/es.yml","hash":"c85f8dba8ae7b3a5e57cdfa617f5884b9d0b8a89","modified":1594949161605},{"_id":"themes/ayer/languages/fr.yml","hash":"0626e3949158af713f5b80ea490c8316b89479fc","modified":1594949161605},{"_id":"themes/ayer/languages/ja.yml","hash":"86a9d614d96beb9a6e514b155c024bc8964b1160","modified":1594949161606},{"_id":"themes/ayer/languages/ko.yml","hash":"1eb9f1f456bad2833651b2bc256178aedb806df2","modified":1594949161606},{"_id":"themes/ayer/languages/nl.yml","hash":"f9200f7837f5d91d21cd220d698393247249b2a4","modified":1594949161606},{"_id":"themes/ayer/languages/no.yml","hash":"a9c8d5d981a17c1091b892f5dbbbfcbae65b806e","modified":1594949161607},{"_id":"themes/ayer/languages/pt.yml","hash":"c46d632ac39abe213506f64ebfeea96bc13913a3","modified":1594949161607},{"_id":"themes/ayer/languages/ru.yml","hash":"2586cc5b7a1d6db96ab00ea6d83e663e591270a3","modified":1594949161608},{"_id":"themes/ayer/languages/vi.yml","hash":"2303f9ba6f2424eede332fe06f84256f807ff4f5","modified":1594949161608},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"c49e4abdf60740b891f252ce24e37a272a512d4d","modified":1594949161608},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"00f7146f64bef1a4d0fc974c59975786c4e08f60","modified":1594949161609},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1594949161622},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1594949161622},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1594949161622},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1594949161623},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1594949161624},{"_id":"themes/ayer/layout/layout.ejs","hash":"363fd530b1a455992f93ff7163518d30413caadd","modified":1594949161623},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1594949161624},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1594949161628},{"_id":"themes/ayer/source/404.html","hash":"b1395f87d2b6eaaed6eee6f0673e724e20a439c2","modified":1594949161646},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1594949161649},{"_id":"themes/ayer/source-src/main.js","hash":"e42992bf24b2864e33ea5fdfab122b5d41851066","modified":1594949161646},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"23fa172c797258de232e1a5fd1794ce8a86c984f","modified":1594949161599},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1594949161599},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1594949161600},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"a9865e7262d4a5b5a724685f99db1846a1cbd168","modified":1594949161609},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1594949161599},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1594949161610},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"12e04e14a663fb4d30f4a22e92b0c3c2de36aaab","modified":1594949161610},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"958c70a70b070ca2dc9789c33bf941eee8e70c36","modified":1594949161610},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":1594949161611},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1594949161611},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":1594949161612},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"f60e599d19f4a1c759a00a4c12a349506e65d467","modified":1594949161612},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"95a667f57d5a3db8258b2b83ff511ba9a606cb99","modified":1594978790691},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":1594949161613},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1594949161612},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1594949161613},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1594949161614},{"_id":"themes/ayer/layout/_partial/totop.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1594949161621},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1594949161621},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":1594949161621},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1594949161628},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1594949161629},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1594949161629},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1594949161630},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1594949161631},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1594949161647},{"_id":"themes/ayer/source/css/custom.styl","hash":"3753c4505761a66faccf736816f053e1e3489982","modified":1594949161647},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1594949161650},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1594949161651},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1594949161651},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1594949161652},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1594949161668},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1594949161668},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1594949161669},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"b3efa167f50cad85404c83f21dec2be570ed21dc","modified":1594949161670},{"_id":"themes/ayer/source/dist/main.css","hash":"c7ffa5ffdd1244b937fb2a384011609bcca050ce","modified":1594949161648},{"_id":"themes/ayer/source/dist/main.js","hash":"7de4d695a80c7cc893d36b3ad84e0a2403034d86","modified":1594949161648},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1594949161671},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"daac19b1cf7381f1a36deb6ac5a4892e14774887","modified":1594949161671},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"fd61d8aeb2cfeaa0e548ac83a1ee1631979cbdb9","modified":1594949161672},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1594949161672},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1594949161673},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"3c8f112452c24fad9b8257440963309acfae4dd9","modified":1594949161632},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"974b9483061fe83f585cc496791ba07e87c78689","modified":1594949161632},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1594949161674},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1594949161674},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1594949161632},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1594949161675},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1594949161633},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":1594949161643},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1594949161644},{"_id":"themes/ayer/source-src/css/style.styl","hash":"07cea9104627ae1957bde7658be816cc19346766","modified":1594949161644},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"15171005a5b07c4ac40d9a50afc6780fd659204a","modified":1594949161645},{"_id":"themes/ayer/source-src/js/share.js","hash":"e8fd85622f774be877438421c182cd37eb15196e","modified":1594949161645},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1594949161627},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1594949161651},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1594949161655},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1594949161670},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":1594949161674},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1594949161614},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"4c7a9191658395bcac45dcd07c165af8773cffa9","modified":1594949161614},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":1594949161615},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1594949161615},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1594949161616},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1594949161616},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"38bb3f504a878d163a430ce6253dae3142a8fae5","modified":1594949161616},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1594949161617},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1594949161617},{"_id":"themes/ayer/layout/_partial/post/minivaline.ejs","hash":"b34754288928558e3eaca9124f5b15e2beb63c6d","modified":1594949161617},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1594949161618},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1594949161618},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1594949161619},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1594949161619},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1594949161619},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1594949161619},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"8c8cd4af31635a2eed93314bb907394f1c9b7545","modified":1594949161620},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1594949161620},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1594949161668},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1594949161634},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"c20ad235d8aab4bc77a2372a053d86fe0069f7fe","modified":1594949161634},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1594949161634},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1594949161636},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"c93c96bccfafe568cebbeb14bf577e97cb6e3c64","modified":1594949161635},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"cfcae3839170f2d04ea504a3cd3d62a9cde6647d","modified":1594949161636},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1594949161636},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1594949161637},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1594949161637},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1594949161638},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1594949161637},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1594949161638},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1594949161638},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"11cb01af7fc318f371e4df414a7f3301b80e8cb6","modified":1594949161639},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1594949161639},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1594949161640},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":1594949161640},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1594949161640},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1594949161642},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"a032e43e5842f752fd612ddbbd7943ecece7c35b","modified":1594949161641},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1594949161641},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1594949161642},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1594949161642},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"2135ab02e098ddfaaa60009d8413186a564af840","modified":1594949161643},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1594949161643},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1594949161654},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1594949161657},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1594949161661},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1594949161667},{"_id":"source/categories/index.md","hash":"1ec90260aa5eace1b5d39cc60f86d2b01c1ce682","modified":1594955294153},{"_id":"source/categories/index-1.md","hash":"79cc15969f6ad05af2d8bc29aa9afce5334375b0","modified":1594954089284},{"_id":"source/categories/index-2.md","hash":"afb3b34272e8de138f2787df936d9afbd3d778cc","modified":1594953614894},{"_id":"themes/ayer/source/images/logo.jpg","hash":"ce7d631379d633576511d7c22bc4576f7447f072","modified":1566635269193},{"_id":"source/tags/index.md","hash":"8dc86b7e42cb1a3de5f5a3fd5d8cd6cdba1ad406","modified":1594957284068},{"_id":"source/_posts/JavaScript设计模式.md","hash":"e9424b4131e4c79a6d4bc3556f33883ef1764f2e","modified":1594986154689},{"_id":"source/_posts/React-redux.md","hash":"872d06ea7b6922ae2c67a8491f97a2960280cd5c","modified":1594957919170},{"_id":"source/_posts/vue父子传参场景集锦.md","hash":"071caf19d072a29826adb307f3811b494a47cbc1","modified":1594987996066},{"_id":"source/_posts/Hexo.md","hash":"85ffd2a40a7fd563da874d9945a2cc771477b14d","modified":1594986444718},{"_id":"source/_posts/react-redux.md","hash":"34ab1f934ac424b6b9be5cc0b651ac8bcf832298","modified":1594987843133},{"_id":"source/_posts/react之setState.md","hash":"c09fe0e2c80deb94cb38ab7c01692ad7e873a2cb","modified":1594987778462},{"_id":"source/_posts/hexo.md","hash":"85ffd2a40a7fd563da874d9945a2cc771477b14d","modified":1594986729314},{"_id":"source/_posts/javaScript设计模式.md","hash":"e9424b4131e4c79a6d4bc3556f33883ef1764f2e","modified":1594986740203},{"_id":"source/_posts/javaScript深入之继承的多种方式和优缺点.md","hash":"9fb2fd583564bf06a6740f4a8d75ba632345ae20","modified":1594986746026}],"Category":[{"name":"dddddddddd","_id":"ckcpm55ed000134vo6h2q2a9r"},{"name":"dddddddddd2","_id":"ckcpm5bir000334vo6zbt77t1"},{"name":"web前端","_id":"ckcpmkm300000ncvo93iqaae6"},{"name":"测试","parent":"ckcpmkm300000ncvo93iqaae6","_id":"ckcpmmxh60002ncvogqcq1a0u"},{"name":"gaga","_id":"ckcpn3pne0004ncvo4cmc3war"},{"name":"hehe","_id":"ckcpn3sdp0006ncvofyqfgza2"},{"name":"dd","parent":"ckcpmmxh60002ncvogqcq1a0u","_id":"ckcpn8ggv0008ncvo2i14bbex"},{"name":"web前端 -- 测试","_id":"ckcpn96zc000ancvofzbw6hi0"},{"name":"dd","parent":"ckcpmkm300000ncvo93iqaae6","_id":"ckcpn9eqh000cncvo7hd6fmdx"},{"name":"Vue","_id":"ckcq4dqy5000090vofn2k3p1z"},{"name":"前端","_id":"ckcq4euy5000290vo9a0vhpfr"},{"name":"npm","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4vu1g001d90vo71kjbed6"},{"name":"命令","_id":"ckcq4wki3001l90vo5zmwc96k"},{"name":"node","_id":"ckcq50glv002290vo3hp8hsmi"},{"name":"命令","parent":"ckcq50glv002290vo3hp8hsmi","_id":"ckcq50glw002590vod8evd0bj"},{"name":"Node","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq511p7002890vohonxc5n8"},{"name":"发包","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq51iqa002b90vogkio1p9c"},{"name":"脚手架","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq52fyj002d90voexa7f3xl"},{"name":"自动化","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq52jpa002f90vobi6kgnxy"},{"name":"windos","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq53g0q002k90vo5auq6moa"},{"name":"其他","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq53le5002m90vo14bk4ozd"},{"name":"其他","_id":"ckcq54499002p90vocrued76t"},{"name":"其他","parent":"ckcq54499002p90vocrued76t","_id":"ckcq54499002q90vodlrhau2o"},{"name":"面向对象","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq54xmk002t90vo1bim9kfl"},{"name":"前端工程化","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq55wbm002w90vo4eyj2p7b"},{"name":"前端组件化","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq567go002z90voc7dcbnlk"},{"name":"组件化","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq568n1003190vo9izo99qb"},{"name":"linux","_id":"ckcq57jqd003490vo998q3dgy"},{"name":"常用命令","parent":"ckcq57jqd003490vo998q3dgy","_id":"ckcq57jqd003690vohmhjdtkr"},{"name":"小程序","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq58sdw003c90voexxy42kk"},{"name":"事件对象","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5fcev003k90voc91j8tll"},{"name":"React","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5gqvd003p90vodrzd02rb"},{"name":"HT","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5hgp1003s90vo83524ma5"},{"name":"设计模式","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5hulb003v90vo57uhgpz5"},{"name":"Npm","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5ts60004m90vo06cb3d7x"},{"name":"Vue","parent":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq60ir6000clwvo2yb0c1ah"}],"Data":[],"Page":[{"title":"分类","date":"2020-07-17T02:34:36.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-07-17 10:34:36\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-07-17T03:08:14.153Z","path":"categories/index.html","_id":"ckcpm00dr000034vohwz7cc9y","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-07-17T03:39:02.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-07-17 11:39:02\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-07-17T03:41:24.068Z","path":"tags/index.html","_id":"ckcpoavm5000fncvo325oevy6","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"### 事件对象events\n- **EventEmitter**\n\n```javascript\nconst events = require('events');\n\n// 创建事件对象\nvar eventEmitter = new events.EventEmitter();\n\nsetInterval(() => {\n// 广播\n  eventEmitter.emit('my_event');\n\n}, 3000);\n// 监听\neventEmitter.on('my_event', () => {\n\n  console.log('data received succesfully.');\n\n});\n\n// eventEmitter.emit('my_event');\n```\n\n","source":"_posts/event.md","raw":"---\ncategories: \n- 前端\n- Node\ntags:\n- 事件对象\n---\n### 事件对象events\n- **EventEmitter**\n\n```javascript\nconst events = require('events');\n\n// 创建事件对象\nvar eventEmitter = new events.EventEmitter();\n\nsetInterval(() => {\n// 广播\n  eventEmitter.emit('my_event');\n\n}, 3000);\n// 监听\neventEmitter.on('my_event', () => {\n\n  console.log('data received succesfully.');\n\n});\n\n// eventEmitter.emit('my_event');\n```\n\n","slug":"event","published":1,"date":"2020-07-16T13:28:48.273Z","updated":"2020-07-17T11:46:40.603Z","title":"event","_id":"ckcotxgo40004p8vo5reghu48","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"事件对象events\"><a href=\"#事件对象events\" class=\"headerlink\" title=\"事件对象events\"></a>事件对象events</h3><ul>\n<li><strong>EventEmitter</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建事件对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 广播</span></span><br><span class=\"line\">  eventEmitter.emit(<span class=\"string\">'my_event'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听</span></span><br><span class=\"line\">eventEmitter.on(<span class=\"string\">'my_event'</span>, () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'data received succesfully.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eventEmitter.emit('my_event');</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事件对象events\"><a href=\"#事件对象events\" class=\"headerlink\" title=\"事件对象events\"></a>事件对象events</h3><ul>\n<li><strong>EventEmitter</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建事件对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 广播</span></span><br><span class=\"line\">  eventEmitter.emit(<span class=\"string\">'my_event'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听</span></span><br><span class=\"line\">eventEmitter.on(<span class=\"string\">'my_event'</span>, () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'data received succesfully.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eventEmitter.emit('my_event');</span></span><br></pre></td></tr></table></figure>\n\n"},{"_content":"# 文件模块  fs\n\n### **检测文件是否存在**\n\n- fs.stat/fs.statSync\n```javascript\n// 同步\n// cosnt res = fs.statSync('./test01.js') //同步\n// res.isDirectory(); //false\n// res.isFile(); //true\n// const res = fs.statSync('./test999.js') //找不到的文件直接报错\n\n// 异步\n  fs.stat('./test01.js',(err, res)=>{\n    if(err){\n        // 出错： 如文件不存在\n      console.log(err)\n    }else{\n        console.log(res.isDirectory()); //false\n        console.log(res.isFile()); //true\n    }\n  });\n```\n### 创建文件\n\n- fs.mkdir\n```javascript\n// 同步\n// fs.mkdir('demo',(err)=>{\n// 成功没有返回参数\n//   if(err){\n//     console.log(err);\n//   }else{\n//     console.log('创建成功');\n//   }\n// })\n\n// 异步\n fs.mkdirSync('demo2')\n```\n\n### （新建）写入文件（覆盖内容）\n- fs.writeFile\n```javascript\n// 异步\nfs.writeFile('hello','hehe1',(err)=>{\n  if(err){\n    console.log(err)\n  }else{\n    console.log('写入成功')\n  }\n});\n// 同步\n// fs.writeFileSync('hello','hehe1')\n```\n### （新建）追加文件（追加内容）\n- fs.appendFile\n```javascript\n// 异步\n// fs.appendFile('hello','hehe1',(err)=>{\n//   if(err){\n//     console.log(err)\n//   }else{\n//     console.log('追加写入成功')\n//   }\n// });\n// 同步\n// fs.appendFileSync('hello','hehe1')\n```\n###  读取文件\n- fs.readFile\n```javascript\n// 异步\n// fs.readFile('hello',(err, res)=>{\n//   if(err){\n//     console.log(err)\n//   }else{\n//     console.log(res) // buffer\n//     console.log(res.toString()) //字符输出\n//   }\n// });\n// 同步\n// fs.readFileSync('hello').toString()\n```\n### 读取文件目录\n\n```javascript\n// 读取文件目录\nfs.readdir('hello',(err, res)=>{\n  if(err){\n    console.log(err)\n  }else{\n    console.log(res) //文件名列表: [] \n  }\n});\n// console.log(fs.readdirSync('hello'))\n```\n### 重命名（可移动覆盖）\n\n```javascript\n// 读取文件目录\n// 异步\nfs.rename('./dd.js','./hello/dd.js',(err)=>{\n  if(err){\n    console.log(err)\n  }else{\n    console.log('重命名成功')\n  }\n})\n// fs.renameSync('./hello/dd.js','gg.js');\n```\n### 删除文件\n```javascript\n// 删除文件\n// 异步\nfs.unlink('./dd.js', (error) =>{\n  if (error) {\n  console.log(error)\n  } else {\n  console.log('成功的删除文件')\n  }\n})\n// fs.unlinkSync('./dd/dd.js')\n```\n### 删除文件夹\n```javascript\n// 删除文件夹\n// 异步\nfs.rmdir('./dd', (error) =>{\n  if (error) {// 文件夹非空会报错\n  console.log(error)\n  } else {\n  console.log('成功的删除了目录：logs')\n  }\n})\n// fs.rmdirSync('./dd')\n```\n### 相关包\n- mkdirp\n\n### 管道流\n - **读取文件流**\n\n ```javascript\nvar readStream=fs.createReadStream('./data/input.txt');\nvar count=0;\nvar str='';\nreadStream.on('data',(data)=>{\n    str+=data;\n    count++;\n})\nreadStream.on('end',()=>{\n    console.log(str)\n    console.log(count)\n})\nreadStream.on('error',(err)=>{\n    console.log(err);   \n})\n ```\n - **写入文件流**\n\n ```javascript\nvar str = '';\nfor(var i=0;i<500;i++){\n    str+='我是从数据库获取的数据，我要保存起来1111\\n';\n}\nvar writeStream=fs.createWriteStream('./data/output.txt');\n// 标记文件末尾，否则finish不会触发\nwriteStream.end();\nwriteStream.on('finish',()=>{\n    console.log('写入完成');\n})\n ```\n - **管道流**\n\n```javascript\nconst fs = require('fs');\nconst readStream = fs.createReadStream('./data/demo.zip')\nconst writeStream = fs.createWriteStream('hehe.zip')\n// <source>.pipe(<target>)\nreadStream.pipe(writeStream);\n```\n\n","source":"_posts/fs.md","raw":"---\ncategories: \n- 前端\n- Node\ntags:\n- Node\n- fs\n---\n# 文件模块  fs\n\n### **检测文件是否存在**\n\n- fs.stat/fs.statSync\n```javascript\n// 同步\n// cosnt res = fs.statSync('./test01.js') //同步\n// res.isDirectory(); //false\n// res.isFile(); //true\n// const res = fs.statSync('./test999.js') //找不到的文件直接报错\n\n// 异步\n  fs.stat('./test01.js',(err, res)=>{\n    if(err){\n        // 出错： 如文件不存在\n      console.log(err)\n    }else{\n        console.log(res.isDirectory()); //false\n        console.log(res.isFile()); //true\n    }\n  });\n```\n### 创建文件\n\n- fs.mkdir\n```javascript\n// 同步\n// fs.mkdir('demo',(err)=>{\n// 成功没有返回参数\n//   if(err){\n//     console.log(err);\n//   }else{\n//     console.log('创建成功');\n//   }\n// })\n\n// 异步\n fs.mkdirSync('demo2')\n```\n\n### （新建）写入文件（覆盖内容）\n- fs.writeFile\n```javascript\n// 异步\nfs.writeFile('hello','hehe1',(err)=>{\n  if(err){\n    console.log(err)\n  }else{\n    console.log('写入成功')\n  }\n});\n// 同步\n// fs.writeFileSync('hello','hehe1')\n```\n### （新建）追加文件（追加内容）\n- fs.appendFile\n```javascript\n// 异步\n// fs.appendFile('hello','hehe1',(err)=>{\n//   if(err){\n//     console.log(err)\n//   }else{\n//     console.log('追加写入成功')\n//   }\n// });\n// 同步\n// fs.appendFileSync('hello','hehe1')\n```\n###  读取文件\n- fs.readFile\n```javascript\n// 异步\n// fs.readFile('hello',(err, res)=>{\n//   if(err){\n//     console.log(err)\n//   }else{\n//     console.log(res) // buffer\n//     console.log(res.toString()) //字符输出\n//   }\n// });\n// 同步\n// fs.readFileSync('hello').toString()\n```\n### 读取文件目录\n\n```javascript\n// 读取文件目录\nfs.readdir('hello',(err, res)=>{\n  if(err){\n    console.log(err)\n  }else{\n    console.log(res) //文件名列表: [] \n  }\n});\n// console.log(fs.readdirSync('hello'))\n```\n### 重命名（可移动覆盖）\n\n```javascript\n// 读取文件目录\n// 异步\nfs.rename('./dd.js','./hello/dd.js',(err)=>{\n  if(err){\n    console.log(err)\n  }else{\n    console.log('重命名成功')\n  }\n})\n// fs.renameSync('./hello/dd.js','gg.js');\n```\n### 删除文件\n```javascript\n// 删除文件\n// 异步\nfs.unlink('./dd.js', (error) =>{\n  if (error) {\n  console.log(error)\n  } else {\n  console.log('成功的删除文件')\n  }\n})\n// fs.unlinkSync('./dd/dd.js')\n```\n### 删除文件夹\n```javascript\n// 删除文件夹\n// 异步\nfs.rmdir('./dd', (error) =>{\n  if (error) {// 文件夹非空会报错\n  console.log(error)\n  } else {\n  console.log('成功的删除了目录：logs')\n  }\n})\n// fs.rmdirSync('./dd')\n```\n### 相关包\n- mkdirp\n\n### 管道流\n - **读取文件流**\n\n ```javascript\nvar readStream=fs.createReadStream('./data/input.txt');\nvar count=0;\nvar str='';\nreadStream.on('data',(data)=>{\n    str+=data;\n    count++;\n})\nreadStream.on('end',()=>{\n    console.log(str)\n    console.log(count)\n})\nreadStream.on('error',(err)=>{\n    console.log(err);   \n})\n ```\n - **写入文件流**\n\n ```javascript\nvar str = '';\nfor(var i=0;i<500;i++){\n    str+='我是从数据库获取的数据，我要保存起来1111\\n';\n}\nvar writeStream=fs.createWriteStream('./data/output.txt');\n// 标记文件末尾，否则finish不会触发\nwriteStream.end();\nwriteStream.on('finish',()=>{\n    console.log('写入完成');\n})\n ```\n - **管道流**\n\n```javascript\nconst fs = require('fs');\nconst readStream = fs.createReadStream('./data/demo.zip')\nconst writeStream = fs.createWriteStream('hehe.zip')\n// <source>.pipe(<target>)\nreadStream.pipe(writeStream);\n```\n\n","slug":"fs","published":1,"date":"2020-07-16T13:28:48.275Z","updated":"2020-07-17T11:47:14.611Z","title":"fs","_id":"ckcotxgo50005p8voamf3btnk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"文件模块-fs\"><a href=\"#文件模块-fs\" class=\"headerlink\" title=\"文件模块  fs\"></a>文件模块  fs</h1><h3 id=\"检测文件是否存在\"><a href=\"#检测文件是否存在\" class=\"headerlink\" title=\"检测文件是否存在\"></a><strong>检测文件是否存在</strong></h3><ul>\n<li><p>fs.stat/fs.statSync</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// cosnt res = fs.statSync('./test01.js') //同步</span></span><br><span class=\"line\"><span class=\"comment\">// res.isDirectory(); //false</span></span><br><span class=\"line\"><span class=\"comment\">// res.isFile(); //true</span></span><br><span class=\"line\"><span class=\"comment\">// const res = fs.statSync('./test999.js') //找不到的文件直接报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">  fs.stat(<span class=\"string\">'./test01.js'</span>,(err, res)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 出错： 如文件不存在</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.isDirectory()); <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.isFile()); <span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h3></li>\n<li><p>fs.mkdir</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.mkdir('demo',(err)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// 成功没有返回参数</span></span><br><span class=\"line\"><span class=\"comment\">//   if(err)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('创建成功');</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\"> fs.mkdirSync(<span class=\"string\">'demo2'</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"（新建）写入文件（覆盖内容）\"><a href=\"#（新建）写入文件（覆盖内容）\" class=\"headerlink\" title=\"（新建）写入文件（覆盖内容）\"></a>（新建）写入文件（覆盖内容）</h3><ul>\n<li>fs.writeFile<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'hello'</span>,<span class=\"string\">'hehe1'</span>,(err)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'写入成功'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.writeFileSync('hello','hehe1')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"（新建）追加文件（追加内容）\"><a href=\"#（新建）追加文件（追加内容）\" class=\"headerlink\" title=\"（新建）追加文件（追加内容）\"></a>（新建）追加文件（追加内容）</h3></li>\n<li>fs.appendFile<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.appendFile('hello','hehe1',(err)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if(err)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('追加写入成功')</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.appendFileSync('hello','hehe1')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3></li>\n<li>fs.readFile<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFile('hello',(err, res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if(err)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res) // buffer</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res.toString()) //字符输出</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFileSync('hello').toString()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取文件目录\"><a href=\"#读取文件目录\" class=\"headerlink\" title=\"读取文件目录\"></a>读取文件目录</h3></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取文件目录</span></span><br><span class=\"line\">fs.readdir(<span class=\"string\">'hello'</span>,(err, res)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">//文件名列表: [] </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// console.log(fs.readdirSync('hello'))</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名（可移动覆盖）\"><a href=\"#重命名（可移动覆盖）\" class=\"headerlink\" title=\"重命名（可移动覆盖）\"></a>重命名（可移动覆盖）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取文件目录</span></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.rename(<span class=\"string\">'./dd.js'</span>,<span class=\"string\">'./hello/dd.js'</span>,(err)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'重命名成功'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.renameSync('./hello/dd.js','gg.js');</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除文件</span></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.unlink(<span class=\"string\">'./dd.js'</span>, (error) =&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功的删除文件'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.unlinkSync('./dd/dd.js')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文件夹\"><a href=\"#删除文件夹\" class=\"headerlink\" title=\"删除文件夹\"></a>删除文件夹</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除文件夹</span></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.rmdir(<span class=\"string\">'./dd'</span>, (error) =&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;<span class=\"comment\">// 文件夹非空会报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功的删除了目录：logs'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.rmdirSync('./dd')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"相关包\"><a href=\"#相关包\" class=\"headerlink\" title=\"相关包\"></a>相关包</h3><ul>\n<li>mkdirp</li>\n</ul>\n<h3 id=\"管道流\"><a href=\"#管道流\" class=\"headerlink\" title=\"管道流\"></a>管道流</h3><ul>\n<li><p><strong>读取文件流</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readStream=fs.createReadStream(<span class=\"string\">'./data/input.txt'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">''</span>;</span><br><span class=\"line\">readStream.on(<span class=\"string\">'data'</span>,(data)=&gt;&#123;</span><br><span class=\"line\">    str+=data;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.on(<span class=\"string\">'end'</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.on(<span class=\"string\">'error'</span>,(err)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);   </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>写入文件流</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)&#123;</span><br><span class=\"line\">    str+=<span class=\"string\">'我是从数据库获取的数据，我要保存起来1111\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> writeStream=fs.createWriteStream(<span class=\"string\">'./data/output.txt'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 标记文件末尾，否则finish不会触发</span></span><br><span class=\"line\">writeStream.end();</span><br><span class=\"line\">writeStream.on(<span class=\"string\">'finish'</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'写入完成'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>管道流</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> readStream = fs.createReadStream(<span class=\"string\">'./data/demo.zip'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> writeStream = fs.createWriteStream(<span class=\"string\">'hehe.zip'</span>)</span><br><span class=\"line\"><span class=\"comment\">// &lt;source&gt;.pipe(&lt;target&gt;)</span></span><br><span class=\"line\">readStream.pipe(writeStream);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文件模块-fs\"><a href=\"#文件模块-fs\" class=\"headerlink\" title=\"文件模块  fs\"></a>文件模块  fs</h1><h3 id=\"检测文件是否存在\"><a href=\"#检测文件是否存在\" class=\"headerlink\" title=\"检测文件是否存在\"></a><strong>检测文件是否存在</strong></h3><ul>\n<li><p>fs.stat/fs.statSync</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// cosnt res = fs.statSync('./test01.js') //同步</span></span><br><span class=\"line\"><span class=\"comment\">// res.isDirectory(); //false</span></span><br><span class=\"line\"><span class=\"comment\">// res.isFile(); //true</span></span><br><span class=\"line\"><span class=\"comment\">// const res = fs.statSync('./test999.js') //找不到的文件直接报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">  fs.stat(<span class=\"string\">'./test01.js'</span>,(err, res)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 出错： 如文件不存在</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.isDirectory()); <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.isFile()); <span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h3></li>\n<li><p>fs.mkdir</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.mkdir('demo',(err)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// 成功没有返回参数</span></span><br><span class=\"line\"><span class=\"comment\">//   if(err)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('创建成功');</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\"> fs.mkdirSync(<span class=\"string\">'demo2'</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"（新建）写入文件（覆盖内容）\"><a href=\"#（新建）写入文件（覆盖内容）\" class=\"headerlink\" title=\"（新建）写入文件（覆盖内容）\"></a>（新建）写入文件（覆盖内容）</h3><ul>\n<li>fs.writeFile<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'hello'</span>,<span class=\"string\">'hehe1'</span>,(err)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'写入成功'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.writeFileSync('hello','hehe1')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"（新建）追加文件（追加内容）\"><a href=\"#（新建）追加文件（追加内容）\" class=\"headerlink\" title=\"（新建）追加文件（追加内容）\"></a>（新建）追加文件（追加内容）</h3></li>\n<li>fs.appendFile<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.appendFile('hello','hehe1',(err)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if(err)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('追加写入成功')</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.appendFileSync('hello','hehe1')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3></li>\n<li>fs.readFile<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFile('hello',(err, res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if(err)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res) // buffer</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res.toString()) //字符输出</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFileSync('hello').toString()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取文件目录\"><a href=\"#读取文件目录\" class=\"headerlink\" title=\"读取文件目录\"></a>读取文件目录</h3></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取文件目录</span></span><br><span class=\"line\">fs.readdir(<span class=\"string\">'hello'</span>,(err, res)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">//文件名列表: [] </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// console.log(fs.readdirSync('hello'))</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名（可移动覆盖）\"><a href=\"#重命名（可移动覆盖）\" class=\"headerlink\" title=\"重命名（可移动覆盖）\"></a>重命名（可移动覆盖）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取文件目录</span></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.rename(<span class=\"string\">'./dd.js'</span>,<span class=\"string\">'./hello/dd.js'</span>,(err)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'重命名成功'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.renameSync('./hello/dd.js','gg.js');</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除文件</span></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.unlink(<span class=\"string\">'./dd.js'</span>, (error) =&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功的删除文件'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.unlinkSync('./dd/dd.js')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文件夹\"><a href=\"#删除文件夹\" class=\"headerlink\" title=\"删除文件夹\"></a>删除文件夹</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除文件夹</span></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">fs.rmdir(<span class=\"string\">'./dd'</span>, (error) =&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;<span class=\"comment\">// 文件夹非空会报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功的删除了目录：logs'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.rmdirSync('./dd')</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"相关包\"><a href=\"#相关包\" class=\"headerlink\" title=\"相关包\"></a>相关包</h3><ul>\n<li>mkdirp</li>\n</ul>\n<h3 id=\"管道流\"><a href=\"#管道流\" class=\"headerlink\" title=\"管道流\"></a>管道流</h3><ul>\n<li><p><strong>读取文件流</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readStream=fs.createReadStream(<span class=\"string\">'./data/input.txt'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">''</span>;</span><br><span class=\"line\">readStream.on(<span class=\"string\">'data'</span>,(data)=&gt;&#123;</span><br><span class=\"line\">    str+=data;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.on(<span class=\"string\">'end'</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">readStream.on(<span class=\"string\">'error'</span>,(err)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);   </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>写入文件流</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)&#123;</span><br><span class=\"line\">    str+=<span class=\"string\">'我是从数据库获取的数据，我要保存起来1111\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> writeStream=fs.createWriteStream(<span class=\"string\">'./data/output.txt'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 标记文件末尾，否则finish不会触发</span></span><br><span class=\"line\">writeStream.end();</span><br><span class=\"line\">writeStream.on(<span class=\"string\">'finish'</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'写入完成'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>管道流</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> readStream = fs.createReadStream(<span class=\"string\">'./data/demo.zip'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> writeStream = fs.createWriteStream(<span class=\"string\">'hehe.zip'</span>)</span><br><span class=\"line\"><span class=\"comment\">// &lt;source&gt;.pipe(&lt;target&gt;)</span></span><br><span class=\"line\">readStream.pipe(writeStream);</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"# ht\n\n### node\n```javascript\n\n        <style>\n            html, body {\n                padding: 0px;\n                margin: 0px;                \n            }            \n            .main {\n                margin: 0px;\n                padding: 0px;\n                position: absolute;\n                top: 0px;\n                bottom: 0px;\n                left: 0px;\n                right: 0px;\n            }\n        </style>  \n\nvar dataModel = new ht.DataModel(),\ngraphView = new ht.graph.GraphView(dataModel),\nview = graphView.getView();            \nview.className = 'main';\ndocument.body.appendChild(view);    \nwindow.addEventListener('resize', function (e) {\n   graphView.invalidate();\n}, false);     \nnode1 = new ht.Node();\nnode1.setName('Node 1');\nnode1.setStyleMap({ // .s\n   'body.color': 'red',\n   'select.type': 'circle',\n   'select.padding': 3\n});\nnode1.setAttrObject({ // .a            \n   age: 35,\n   sex: 1,\n   hidden: false\n});\nnode1.setPosition(100, 100);// .p\ndataModel.add(node1);\ndataModel.sm().ss(node1); // sm:getSelectionModel ss:setSelection\n```\n\n\n\n# 带属性（右侧编辑属性）\n\n```javascript\n                dataModel = new ht.DataModel();\n                graphView = new ht.graph.GraphView(dataModel);\n                propertyView = new ht.widget.PropertyView(dataModel);// 属性view\n                splitView = new ht.widget.SplitView(graphView, propertyView);// 分割（最多可传4个参数）\n      \n                view = splitView.getView();\n                view.className = 'main';\n                document.body.appendChild(view);    \n                window.addEventListener('resize', function (e) {\n                    splitView.invalidate();\n                }, false);      \n\n\t\t\t\tpropertyModel = propertyView.getPropertyModel();// 属性model\n                \n                var property = new ht.Property();\n                property.setName('name');   \n                property.setDisplayName('Name'); \n                property.setAlign('center');// 中间对齐\n                property.setEditable(true);// 可编辑\n                propertyModel.add(property);   \n                \n                property = new ht.Property();\n                property.setName('image');   \n                property.setDisplayName('Image'); \n                property.setEditable(true);\n                property.setEnum({                    \n                    values: ['node_image', 'group_image', 'subGraph_image'],\n                    labels: ['Node', 'Group', 'SubGraph'],\n                    icons: ['node_icon', 'group_icon', 'subGraph_icon']\n                });  // 下拉框\n                propertyModel.add(property);//添加属性\n\n                property = new ht.Property();\n                property.setName('body.color');\n                property.setAccessType('style');// 属性类别 style\n                property.setValueType('color');\n                property.setCategoryName('Style Properties');// 属性类别名称\n                propertyModel.add(property);\n\n                property = new ht.Property();\n                property.setName('age');\n                property.setDisplayName('Age'); \n                property.setAccessType('attr');// 属性类别 Attr\n                property.setValueType('int');// 值类型\n                property.setAlign('right');\n                property.setEditable(true);\n                property.setCategoryName('Attr Properties');// 属性类别名称\n                propertyModel.add(property); \n                \n                property = new ht.Property();\n                property.setName('hidden');\n                property.setDisplayName('Hidden this node'); \n                property.setColor('red');\n                property.setIcon('images/alert.gif');// 图标\n                property.setAccessType('attr');\n                property.setValueType('boolean');// 布尔类型\n                property.setEditable(true);\n                property.setCategoryName('Attr Properties');\n                propertyModel.add(property);       \n\n                property = new ht.Property();\n                property.setName('sex');\n                property.setDisplayName('Sex'); \n\t\t\t\tproperty.setColor('red');//颜色\n                property.setAccessType('attr');                \n                property.setEditable(true);\n                property.setEnum([1, 2], ['Male', 'Female']); // 下拉框\n                property.setCategoryName('Attr Properties');//属性类别名称\n                propertyModel.add(property);  \n```\n\n[](https://hightopo.com/codeeditor/index.html?url=https://www.hightopo.com/guide/guide/core/propertyview/examples/example_property.html)\n\n\n\n","source":"_posts/ht.md","raw":"---\ncategories: \n- 前端\n- HT\ntags:\n- HT\n---\n# ht\n\n### node\n```javascript\n\n        <style>\n            html, body {\n                padding: 0px;\n                margin: 0px;                \n            }            \n            .main {\n                margin: 0px;\n                padding: 0px;\n                position: absolute;\n                top: 0px;\n                bottom: 0px;\n                left: 0px;\n                right: 0px;\n            }\n        </style>  \n\nvar dataModel = new ht.DataModel(),\ngraphView = new ht.graph.GraphView(dataModel),\nview = graphView.getView();            \nview.className = 'main';\ndocument.body.appendChild(view);    \nwindow.addEventListener('resize', function (e) {\n   graphView.invalidate();\n}, false);     \nnode1 = new ht.Node();\nnode1.setName('Node 1');\nnode1.setStyleMap({ // .s\n   'body.color': 'red',\n   'select.type': 'circle',\n   'select.padding': 3\n});\nnode1.setAttrObject({ // .a            \n   age: 35,\n   sex: 1,\n   hidden: false\n});\nnode1.setPosition(100, 100);// .p\ndataModel.add(node1);\ndataModel.sm().ss(node1); // sm:getSelectionModel ss:setSelection\n```\n\n\n\n# 带属性（右侧编辑属性）\n\n```javascript\n                dataModel = new ht.DataModel();\n                graphView = new ht.graph.GraphView(dataModel);\n                propertyView = new ht.widget.PropertyView(dataModel);// 属性view\n                splitView = new ht.widget.SplitView(graphView, propertyView);// 分割（最多可传4个参数）\n      \n                view = splitView.getView();\n                view.className = 'main';\n                document.body.appendChild(view);    \n                window.addEventListener('resize', function (e) {\n                    splitView.invalidate();\n                }, false);      \n\n\t\t\t\tpropertyModel = propertyView.getPropertyModel();// 属性model\n                \n                var property = new ht.Property();\n                property.setName('name');   \n                property.setDisplayName('Name'); \n                property.setAlign('center');// 中间对齐\n                property.setEditable(true);// 可编辑\n                propertyModel.add(property);   \n                \n                property = new ht.Property();\n                property.setName('image');   \n                property.setDisplayName('Image'); \n                property.setEditable(true);\n                property.setEnum({                    \n                    values: ['node_image', 'group_image', 'subGraph_image'],\n                    labels: ['Node', 'Group', 'SubGraph'],\n                    icons: ['node_icon', 'group_icon', 'subGraph_icon']\n                });  // 下拉框\n                propertyModel.add(property);//添加属性\n\n                property = new ht.Property();\n                property.setName('body.color');\n                property.setAccessType('style');// 属性类别 style\n                property.setValueType('color');\n                property.setCategoryName('Style Properties');// 属性类别名称\n                propertyModel.add(property);\n\n                property = new ht.Property();\n                property.setName('age');\n                property.setDisplayName('Age'); \n                property.setAccessType('attr');// 属性类别 Attr\n                property.setValueType('int');// 值类型\n                property.setAlign('right');\n                property.setEditable(true);\n                property.setCategoryName('Attr Properties');// 属性类别名称\n                propertyModel.add(property); \n                \n                property = new ht.Property();\n                property.setName('hidden');\n                property.setDisplayName('Hidden this node'); \n                property.setColor('red');\n                property.setIcon('images/alert.gif');// 图标\n                property.setAccessType('attr');\n                property.setValueType('boolean');// 布尔类型\n                property.setEditable(true);\n                property.setCategoryName('Attr Properties');\n                propertyModel.add(property);       \n\n                property = new ht.Property();\n                property.setName('sex');\n                property.setDisplayName('Sex'); \n\t\t\t\tproperty.setColor('red');//颜色\n                property.setAccessType('attr');                \n                property.setEditable(true);\n                property.setEnum([1, 2], ['Male', 'Female']); // 下拉框\n                property.setCategoryName('Attr Properties');//属性类别名称\n                propertyModel.add(property);  \n```\n\n[](https://hightopo.com/codeeditor/index.html?url=https://www.hightopo.com/guide/guide/core/propertyview/examples/example_property.html)\n\n\n\n","slug":"ht","published":1,"date":"2020-07-16T13:28:48.284Z","updated":"2020-07-17T11:40:09.975Z","title":"ht","_id":"ckcotxgoh0006p8vohca04wy8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ht\"><a href=\"#ht\" class=\"headerlink\" title=\"ht\"></a>ht</h1><h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            html, body &#123;</span><br><span class=\"line\">                padding: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                margin: <span class=\"number\">0</span>px;                </span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            .main &#123;</span><br><span class=\"line\">                margin: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                padding: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">                top: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                bottom: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                left: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                right: <span class=\"number\">0</span>px;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">var dataModel = new ht.DataModel(),</span></span><br><span class=\"line\"><span class=\"regexp\">graphView = new ht.graph.GraphView(dataModel),</span></span><br><span class=\"line\"><span class=\"regexp\">view = graphView.getView();            </span></span><br><span class=\"line\"><span class=\"regexp\">view.className = 'main';</span></span><br><span class=\"line\"><span class=\"regexp\">document.body.appendChild(view);    </span></span><br><span class=\"line\"><span class=\"regexp\">window.addEventListener('resize', function (e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">   graphView.invalidate();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;, false);     </span></span><br><span class=\"line\"><span class=\"regexp\">node1 = new ht.Node();</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setName('Node 1');</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setStyleMap(&#123; /</span><span class=\"regexp\">/ .s</span></span><br><span class=\"line\"><span class=\"regexp\">   'body.color': 'red',</span></span><br><span class=\"line\"><span class=\"regexp\">   'select.type': 'circle',</span></span><br><span class=\"line\"><span class=\"regexp\">   'select.padding': 3</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setAttrObject(&#123; /</span><span class=\"regexp\">/ .a            </span></span><br><span class=\"line\"><span class=\"regexp\">   age: 35,</span></span><br><span class=\"line\"><span class=\"regexp\">   sex: 1,</span></span><br><span class=\"line\"><span class=\"regexp\">   hidden: false</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setPosition(100, 100);/</span><span class=\"regexp\">/ .p</span></span><br><span class=\"line\"><span class=\"regexp\">dataModel.add(node1);</span></span><br><span class=\"line\"><span class=\"regexp\">dataModel.sm().ss(node1); /</span><span class=\"regexp\">/ sm:getSelectionModel ss:setSelection</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"带属性（右侧编辑属性）\"><a href=\"#带属性（右侧编辑属性）\" class=\"headerlink\" title=\"带属性（右侧编辑属性）\"></a>带属性（右侧编辑属性）</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            dataModel = <span class=\"keyword\">new</span> ht.DataModel();</span><br><span class=\"line\">            graphView = <span class=\"keyword\">new</span> ht.graph.GraphView(dataModel);</span><br><span class=\"line\">            propertyView = <span class=\"keyword\">new</span> ht.widget.PropertyView(dataModel);<span class=\"comment\">// 属性view</span></span><br><span class=\"line\">            splitView = <span class=\"keyword\">new</span> ht.widget.SplitView(graphView, propertyView);<span class=\"comment\">// 分割（最多可传4个参数）</span></span><br><span class=\"line\">  </span><br><span class=\"line\">            view = splitView.getView();</span><br><span class=\"line\">            view.className = <span class=\"string\">'main'</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(view);    </span><br><span class=\"line\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                splitView.invalidate();</span><br><span class=\"line\">            &#125;, <span class=\"literal\">false</span>);      </span><br><span class=\"line\"></span><br><span class=\"line\">propertyModel = propertyView.getPropertyModel();<span class=\"comment\">// 属性model</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'name'</span>);   </span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Name'</span>); </span><br><span class=\"line\">            property.setAlign(<span class=\"string\">'center'</span>);<span class=\"comment\">// 中间对齐</span></span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);<span class=\"comment\">// 可编辑</span></span><br><span class=\"line\">            propertyModel.add(property);   </span><br><span class=\"line\">            </span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'image'</span>);   </span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Image'</span>); </span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setEnum(&#123;                    </span><br><span class=\"line\">                values: [<span class=\"string\">'node_image'</span>, <span class=\"string\">'group_image'</span>, <span class=\"string\">'subGraph_image'</span>],</span><br><span class=\"line\">                labels: [<span class=\"string\">'Node'</span>, <span class=\"string\">'Group'</span>, <span class=\"string\">'SubGraph'</span>],</span><br><span class=\"line\">                icons: [<span class=\"string\">'node_icon'</span>, <span class=\"string\">'group_icon'</span>, <span class=\"string\">'subGraph_icon'</span>]</span><br><span class=\"line\">            &#125;);  <span class=\"comment\">// 下拉框</span></span><br><span class=\"line\">            propertyModel.add(property);<span class=\"comment\">//添加属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'body.color'</span>);</span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'style'</span>);<span class=\"comment\">// 属性类别 style</span></span><br><span class=\"line\">            property.setValueType(<span class=\"string\">'color'</span>);</span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Style Properties'</span>);<span class=\"comment\">// 属性类别名称</span></span><br><span class=\"line\">            propertyModel.add(property);</span><br><span class=\"line\"></span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'age'</span>);</span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Age'</span>); </span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'attr'</span>);<span class=\"comment\">// 属性类别 Attr</span></span><br><span class=\"line\">            property.setValueType(<span class=\"string\">'int'</span>);<span class=\"comment\">// 值类型</span></span><br><span class=\"line\">            property.setAlign(<span class=\"string\">'right'</span>);</span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Attr Properties'</span>);<span class=\"comment\">// 属性类别名称</span></span><br><span class=\"line\">            propertyModel.add(property); </span><br><span class=\"line\">            </span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Hidden this node'</span>); </span><br><span class=\"line\">            property.setColor(<span class=\"string\">'red'</span>);</span><br><span class=\"line\">            property.setIcon(<span class=\"string\">'images/alert.gif'</span>);<span class=\"comment\">// 图标</span></span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'attr'</span>);</span><br><span class=\"line\">            property.setValueType(<span class=\"string\">'boolean'</span>);<span class=\"comment\">// 布尔类型</span></span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Attr Properties'</span>);</span><br><span class=\"line\">            propertyModel.add(property);       </span><br><span class=\"line\"></span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'sex'</span>);</span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Sex'</span>); </span><br><span class=\"line\">property.setColor(<span class=\"string\">'red'</span>);<span class=\"comment\">//颜色</span></span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'attr'</span>);                </span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setEnum([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"string\">'Male'</span>, <span class=\"string\">'Female'</span>]); <span class=\"comment\">// 下拉框</span></span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Attr Properties'</span>);<span class=\"comment\">//属性类别名称</span></span><br><span class=\"line\">            propertyModel.add(property);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://hightopo.com/codeeditor/index.html?url=https://www.hightopo.com/guide/guide/core/propertyview/examples/example_property.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ht\"><a href=\"#ht\" class=\"headerlink\" title=\"ht\"></a>ht</h1><h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            html, body &#123;</span><br><span class=\"line\">                padding: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                margin: <span class=\"number\">0</span>px;                </span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            .main &#123;</span><br><span class=\"line\">                margin: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                padding: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">                top: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                bottom: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                left: <span class=\"number\">0</span>px;</span><br><span class=\"line\">                right: <span class=\"number\">0</span>px;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">var dataModel = new ht.DataModel(),</span></span><br><span class=\"line\"><span class=\"regexp\">graphView = new ht.graph.GraphView(dataModel),</span></span><br><span class=\"line\"><span class=\"regexp\">view = graphView.getView();            </span></span><br><span class=\"line\"><span class=\"regexp\">view.className = 'main';</span></span><br><span class=\"line\"><span class=\"regexp\">document.body.appendChild(view);    </span></span><br><span class=\"line\"><span class=\"regexp\">window.addEventListener('resize', function (e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">   graphView.invalidate();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;, false);     </span></span><br><span class=\"line\"><span class=\"regexp\">node1 = new ht.Node();</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setName('Node 1');</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setStyleMap(&#123; /</span><span class=\"regexp\">/ .s</span></span><br><span class=\"line\"><span class=\"regexp\">   'body.color': 'red',</span></span><br><span class=\"line\"><span class=\"regexp\">   'select.type': 'circle',</span></span><br><span class=\"line\"><span class=\"regexp\">   'select.padding': 3</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setAttrObject(&#123; /</span><span class=\"regexp\">/ .a            </span></span><br><span class=\"line\"><span class=\"regexp\">   age: 35,</span></span><br><span class=\"line\"><span class=\"regexp\">   sex: 1,</span></span><br><span class=\"line\"><span class=\"regexp\">   hidden: false</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">node1.setPosition(100, 100);/</span><span class=\"regexp\">/ .p</span></span><br><span class=\"line\"><span class=\"regexp\">dataModel.add(node1);</span></span><br><span class=\"line\"><span class=\"regexp\">dataModel.sm().ss(node1); /</span><span class=\"regexp\">/ sm:getSelectionModel ss:setSelection</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"带属性（右侧编辑属性）\"><a href=\"#带属性（右侧编辑属性）\" class=\"headerlink\" title=\"带属性（右侧编辑属性）\"></a>带属性（右侧编辑属性）</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            dataModel = <span class=\"keyword\">new</span> ht.DataModel();</span><br><span class=\"line\">            graphView = <span class=\"keyword\">new</span> ht.graph.GraphView(dataModel);</span><br><span class=\"line\">            propertyView = <span class=\"keyword\">new</span> ht.widget.PropertyView(dataModel);<span class=\"comment\">// 属性view</span></span><br><span class=\"line\">            splitView = <span class=\"keyword\">new</span> ht.widget.SplitView(graphView, propertyView);<span class=\"comment\">// 分割（最多可传4个参数）</span></span><br><span class=\"line\">  </span><br><span class=\"line\">            view = splitView.getView();</span><br><span class=\"line\">            view.className = <span class=\"string\">'main'</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(view);    </span><br><span class=\"line\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                splitView.invalidate();</span><br><span class=\"line\">            &#125;, <span class=\"literal\">false</span>);      </span><br><span class=\"line\"></span><br><span class=\"line\">propertyModel = propertyView.getPropertyModel();<span class=\"comment\">// 属性model</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'name'</span>);   </span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Name'</span>); </span><br><span class=\"line\">            property.setAlign(<span class=\"string\">'center'</span>);<span class=\"comment\">// 中间对齐</span></span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);<span class=\"comment\">// 可编辑</span></span><br><span class=\"line\">            propertyModel.add(property);   </span><br><span class=\"line\">            </span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'image'</span>);   </span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Image'</span>); </span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setEnum(&#123;                    </span><br><span class=\"line\">                values: [<span class=\"string\">'node_image'</span>, <span class=\"string\">'group_image'</span>, <span class=\"string\">'subGraph_image'</span>],</span><br><span class=\"line\">                labels: [<span class=\"string\">'Node'</span>, <span class=\"string\">'Group'</span>, <span class=\"string\">'SubGraph'</span>],</span><br><span class=\"line\">                icons: [<span class=\"string\">'node_icon'</span>, <span class=\"string\">'group_icon'</span>, <span class=\"string\">'subGraph_icon'</span>]</span><br><span class=\"line\">            &#125;);  <span class=\"comment\">// 下拉框</span></span><br><span class=\"line\">            propertyModel.add(property);<span class=\"comment\">//添加属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'body.color'</span>);</span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'style'</span>);<span class=\"comment\">// 属性类别 style</span></span><br><span class=\"line\">            property.setValueType(<span class=\"string\">'color'</span>);</span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Style Properties'</span>);<span class=\"comment\">// 属性类别名称</span></span><br><span class=\"line\">            propertyModel.add(property);</span><br><span class=\"line\"></span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'age'</span>);</span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Age'</span>); </span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'attr'</span>);<span class=\"comment\">// 属性类别 Attr</span></span><br><span class=\"line\">            property.setValueType(<span class=\"string\">'int'</span>);<span class=\"comment\">// 值类型</span></span><br><span class=\"line\">            property.setAlign(<span class=\"string\">'right'</span>);</span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Attr Properties'</span>);<span class=\"comment\">// 属性类别名称</span></span><br><span class=\"line\">            propertyModel.add(property); </span><br><span class=\"line\">            </span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Hidden this node'</span>); </span><br><span class=\"line\">            property.setColor(<span class=\"string\">'red'</span>);</span><br><span class=\"line\">            property.setIcon(<span class=\"string\">'images/alert.gif'</span>);<span class=\"comment\">// 图标</span></span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'attr'</span>);</span><br><span class=\"line\">            property.setValueType(<span class=\"string\">'boolean'</span>);<span class=\"comment\">// 布尔类型</span></span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Attr Properties'</span>);</span><br><span class=\"line\">            propertyModel.add(property);       </span><br><span class=\"line\"></span><br><span class=\"line\">            property = <span class=\"keyword\">new</span> ht.Property();</span><br><span class=\"line\">            property.setName(<span class=\"string\">'sex'</span>);</span><br><span class=\"line\">            property.setDisplayName(<span class=\"string\">'Sex'</span>); </span><br><span class=\"line\">property.setColor(<span class=\"string\">'red'</span>);<span class=\"comment\">//颜色</span></span><br><span class=\"line\">            property.setAccessType(<span class=\"string\">'attr'</span>);                </span><br><span class=\"line\">            property.setEditable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            property.setEnum([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"string\">'Male'</span>, <span class=\"string\">'Female'</span>]); <span class=\"comment\">// 下拉框</span></span><br><span class=\"line\">            property.setCategoryName(<span class=\"string\">'Attr Properties'</span>);<span class=\"comment\">//属性类别名称</span></span><br><span class=\"line\">            propertyModel.add(property);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://hightopo.com/codeeditor/index.html?url=https://www.hightopo.com/guide/guide/core/propertyview/examples/example_property.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n"},{"_content":"\n清除npm资源缓存\n```\n\tnpm cache clean -f\n```\n用代码更改npm的配置文件\n```\n\tnpm config set registry http://registry.npm.taobao.org\n```\n查看远程包版本信息\n```\n\tnpm info <packageName>\n```\n查看本地包版本信息\n```\n\tnpm info <packageName>\n```\n安装nrm\n```\n\tnpm install -g nrm\n```\n查看镜像列表\n```\n\tnrm ls\n```\n在nrm添加自己的镜像地址s\n```\n\tnrm add resource_name resource_url\n```\n切换镜像\n```\n\tnrm use taobao\n```\n删除\n```\n\tnrm del r_name\n```\n测试镜像的相应速度\n```\n\tnrm test r_name\n```\n","source":"_posts/npm常用命令.md","raw":"---\ncategories: \n- 前端\n- Npm\ntags:\n- npm\n- nrm\n---\n\n清除npm资源缓存\n```\n\tnpm cache clean -f\n```\n用代码更改npm的配置文件\n```\n\tnpm config set registry http://registry.npm.taobao.org\n```\n查看远程包版本信息\n```\n\tnpm info <packageName>\n```\n查看本地包版本信息\n```\n\tnpm info <packageName>\n```\n安装nrm\n```\n\tnpm install -g nrm\n```\n查看镜像列表\n```\n\tnrm ls\n```\n在nrm添加自己的镜像地址s\n```\n\tnrm add resource_name resource_url\n```\n切换镜像\n```\n\tnrm use taobao\n```\n删除\n```\n\tnrm del r_name\n```\n测试镜像的相应速度\n```\n\tnrm test r_name\n```\n","slug":"npm常用命令","published":1,"date":"2020-07-16T13:28:48.315Z","updated":"2020-07-17T12:12:49.529Z","title":"npm常用命令","_id":"ckcotxgpi0008p8vofv1p4bhq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>清除npm资源缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean -f</span><br></pre></td></tr></table></figure>\n<p>用代码更改npm的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>查看远程包版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n<p>查看本地包版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n<p>安装nrm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n<p>查看镜像列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n<p>在nrm添加自己的镜像地址s</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm add resource_name resource_url</span><br></pre></td></tr></table></figure>\n<p>切换镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n<p>删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm del r_name</span><br></pre></td></tr></table></figure>\n<p>测试镜像的相应速度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm test r_name</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>清除npm资源缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean -f</span><br></pre></td></tr></table></figure>\n<p>用代码更改npm的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>查看远程包版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n<p>查看本地包版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure>\n<p>安装nrm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n<p>查看镜像列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n<p>在nrm添加自己的镜像地址s</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm add resource_name resource_url</span><br></pre></td></tr></table></figure>\n<p>切换镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n<p>删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm del r_name</span><br></pre></td></tr></table></figure>\n<p>测试镜像的相应速度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm test r_name</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 柯里化\n\n柯里化是函数式编程编程的常用技巧： 将多参数函数转换成单参数函数，这些单参数函数的返回值也是函数。\n\n```javascript\nconst add = (x,y) => x + y; \n// 变形\nconst add = x => y => x + y;\nconst add1 = add1(1);\nadd1(2); //3\nadd2(3)\t//4\n// 传入第一个参数后，第一个值（x）被保留起来，返回的第二个函数可以多次复用\n```\n\n# 组合","source":"_posts/react性能实践.md","raw":"---\ncategories: \n- 前端\n- 其他\n---\n# 柯里化\n\n柯里化是函数式编程编程的常用技巧： 将多参数函数转换成单参数函数，这些单参数函数的返回值也是函数。\n\n```javascript\nconst add = (x,y) => x + y; \n// 变形\nconst add = x => y => x + y;\nconst add1 = add1(1);\nadd1(2); //3\nadd2(3)\t//4\n// 传入第一个参数后，第一个值（x）被保留起来，返回的第二个函数可以多次复用\n```\n\n# 组合","slug":"react性能实践","published":1,"date":"2020-07-16T13:28:48.320Z","updated":"2020-07-17T12:13:31.553Z","title":"react性能实践","_id":"ckcotxgpl000ap8vof8eqavcr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h1><p>柯里化是函数式编程编程的常用技巧： 将多参数函数转换成单参数函数，这些单参数函数的返回值也是函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> x + y; </span><br><span class=\"line\"><span class=\"comment\">// 变形</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> add1 = add1(<span class=\"number\">1</span>);</span><br><span class=\"line\">add1(<span class=\"number\">2</span>); <span class=\"comment\">//3</span></span><br><span class=\"line\">add2(<span class=\"number\">3</span>)\t<span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"comment\">// 传入第一个参数后，第一个值（x）被保留起来，返回的第二个函数可以多次复用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h1><p>柯里化是函数式编程编程的常用技巧： 将多参数函数转换成单参数函数，这些单参数函数的返回值也是函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> x + y; </span><br><span class=\"line\"><span class=\"comment\">// 变形</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> add1 = add1(<span class=\"number\">1</span>);</span><br><span class=\"line\">add1(<span class=\"number\">2</span>); <span class=\"comment\">//3</span></span><br><span class=\"line\">add2(<span class=\"number\">3</span>)\t<span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"comment\">// 传入第一个参数后，第一个值（x）被保留起来，返回的第二个函数可以多次复用</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h1>"},{"_content":"```javascript\nimport React, { createContext } from 'react'\nconst Test = (props) => {\n  console.log(props)  // {a: 1}\n  console.log(props.a) // 1\n  return <div>ddddddddddd</div>\n}\nconst Context = createContext();\nconsole.log(Context)\nconst TestPage = () => {\n  const store = { a: 1 };\n  return (\n    <Context.Provider value={store}>\n      <Context.Consumer>\n        {store => <Test {...store} />}\n      </Context.Consumer>\n      <div>\n        测试页面\n      </div>\n    </Context.Provider>\n  )\n}\nexport default TestPage;\n```\n\n```javascript\nimport React, { createContext, useContext } from 'react'\nconst Test = () => {\n  const { a } = useContext(Context);\n  console.log(a) // 1\n  return <div>ddddddddddd</div>\n}\nconst Context = createContext();\nconst TestPage = () => {\n  const store = { a: 1 }\n  return (\n    <Context.Provider value={store}>\n      <Test />\n      <div>\n        测试页面\n          </div>\n    </Context.Provider>\n  )\n}\n```\n\n","source":"_posts/react之Context.md","raw":"---\ncategories: \n- 前端\n- React\ntags:\n- React\n---\n```javascript\nimport React, { createContext } from 'react'\nconst Test = (props) => {\n  console.log(props)  // {a: 1}\n  console.log(props.a) // 1\n  return <div>ddddddddddd</div>\n}\nconst Context = createContext();\nconsole.log(Context)\nconst TestPage = () => {\n  const store = { a: 1 };\n  return (\n    <Context.Provider value={store}>\n      <Context.Consumer>\n        {store => <Test {...store} />}\n      </Context.Consumer>\n      <div>\n        测试页面\n      </div>\n    </Context.Provider>\n  )\n}\nexport default TestPage;\n```\n\n```javascript\nimport React, { createContext, useContext } from 'react'\nconst Test = () => {\n  const { a } = useContext(Context);\n  console.log(a) // 1\n  return <div>ddddddddddd</div>\n}\nconst Context = createContext();\nconst TestPage = () => {\n  const store = { a: 1 }\n  return (\n    <Context.Provider value={store}>\n      <Test />\n      <div>\n        测试页面\n          </div>\n    </Context.Provider>\n  )\n}\n```\n\n","slug":"react之Context","published":1,"date":"2020-07-16T13:28:48.322Z","updated":"2020-07-17T12:09:54.022Z","title":"react之Context","_id":"ckcotxgpn000bp8vocsnn78kn","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Test = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(props)  <span class=\"comment\">// &#123;a: 1&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(props.a) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ddddddddddd<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Context = createContext();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Context)</span><br><span class=\"line\"><span class=\"keyword\">const</span> TestPage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Context.Provider value=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;Context.Consumer&gt;</span><br><span class=\"line\">        &#123;store =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Test</span> &#123;<span class=\"attr\">...store</span>&#125; /&gt;</span></span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Context.Consumer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        测试页面</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Context.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">export default TestPage;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; createContext, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Test = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; a &#125; = useContext(Context);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ddddddddddd<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Context = createContext();</span><br><span class=\"line\"><span class=\"keyword\">const</span> TestPage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Context.Provider value=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;Test /&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        测试页面</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Context.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Test = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(props)  <span class=\"comment\">// &#123;a: 1&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(props.a) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ddddddddddd<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Context = createContext();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Context)</span><br><span class=\"line\"><span class=\"keyword\">const</span> TestPage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Context.Provider value=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;Context.Consumer&gt;</span><br><span class=\"line\">        &#123;store =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Test</span> &#123;<span class=\"attr\">...store</span>&#125; /&gt;</span></span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Context.Consumer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        测试页面</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Context.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">export default TestPage;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; createContext, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Test = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; a &#125; = useContext(Context);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ddddddddddd<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Context = createContext();</span><br><span class=\"line\"><span class=\"keyword\">const</span> TestPage = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Context.Provider value=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;Test /&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        测试页面</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Context.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"npm发包流程\n\n### 注册npm账号\nhttps://www.npmjs.com/signup\n### 初始化项目\n- 初始化（myNpm）\n```javascript\nnpm init // 生成package.json\n```\n- 创建项目文件index.js\n\n```javascript\nmodule.exports = { // 暴露模块\n  fun: function () {\n      console.log('我的第一个测试包');\n  }     \n}; \n```\n- 修改package.json文件\n```json\n\"main\": \"index.js\",\n```\n### 本地测试\n新建test.js\n```javascript\nconst tools = require('./index.js')\ntools.fun()\n```\n命令行执行\n```javascript\nnode test.js // 输出：我的第一个测试包\n```\n### 发布包\n```javascript\nnpm adduser // 输入账号密码,如果不是第一次发包，运行 npm login\n// 不是当前项目需要设置包名参数\nnpm publish // 项目目录下--access=public公共包\n\n// 在測試版本中 的package.json我們改成這樣 \"version\": \"1.0.6-beta\",然後提交測試版本\nnpm publish --tag=beta\n// 下載測試版本\nnpm install @fz/components@beta\n\n```\n###  包权限管理\n```javascript\n查看远程包版本\nnpm view <package_name> version --json\n查看模块拥有者 \nnpm owner ls <package_name> \n添加一个发布者 \nnpm owner add <user> <package_name> \n删除一个发布者 \nnpm owner rm <user> <package_name>\n```\n\n","source":"_posts/发包.md","raw":"---\ncategories: \n- 前端\n- 前端工程化\ntags:\n- npm\n---\nnpm发包流程\n\n### 注册npm账号\nhttps://www.npmjs.com/signup\n### 初始化项目\n- 初始化（myNpm）\n```javascript\nnpm init // 生成package.json\n```\n- 创建项目文件index.js\n\n```javascript\nmodule.exports = { // 暴露模块\n  fun: function () {\n      console.log('我的第一个测试包');\n  }     \n}; \n```\n- 修改package.json文件\n```json\n\"main\": \"index.js\",\n```\n### 本地测试\n新建test.js\n```javascript\nconst tools = require('./index.js')\ntools.fun()\n```\n命令行执行\n```javascript\nnode test.js // 输出：我的第一个测试包\n```\n### 发布包\n```javascript\nnpm adduser // 输入账号密码,如果不是第一次发包，运行 npm login\n// 不是当前项目需要设置包名参数\nnpm publish // 项目目录下--access=public公共包\n\n// 在測試版本中 的package.json我們改成這樣 \"version\": \"1.0.6-beta\",然後提交測試版本\nnpm publish --tag=beta\n// 下載測試版本\nnpm install @fz/components@beta\n\n```\n###  包权限管理\n```javascript\n查看远程包版本\nnpm view <package_name> version --json\n查看模块拥有者 \nnpm owner ls <package_name> \n添加一个发布者 \nnpm owner add <user> <package_name> \n删除一个发布者 \nnpm owner rm <user> <package_name>\n```\n\n","slug":"发包","published":1,"date":"2020-07-16T13:28:48.406Z","updated":"2020-07-17T11:44:23.833Z","title":"发包","_id":"ckcotxgsc000cp8voetlygb9a","comments":1,"layout":"post","photos":[],"link":"","content":"<p>npm发包流程</p>\n<h3 id=\"注册npm账号\"><a href=\"#注册npm账号\" class=\"headerlink\" title=\"注册npm账号\"></a>注册npm账号</h3><p><a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/signup</a></p>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><ul>\n<li>初始化（myNpm）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init <span class=\"comment\">// 生成package.json</span></span><br></pre></td></tr></table></figure></li>\n<li>创建项目文件index.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"comment\">// 暴露模块</span></span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的第一个测试包'</span>);</span><br><span class=\"line\">  &#125;     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改package.json文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\": \"index.js\",</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3>新建test.js<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tools = <span class=\"built_in\">require</span>(<span class=\"string\">'./index.js'</span>)</span><br><span class=\"line\">tools.fun()</span><br></pre></td></tr></table></figure>\n命令行执行<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node test.js <span class=\"comment\">// 输出：我的第一个测试包</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布包\"><a href=\"#发布包\" class=\"headerlink\" title=\"发布包\"></a>发布包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser <span class=\"comment\">// 输入账号密码,如果不是第一次发包，运行 npm login</span></span><br><span class=\"line\"><span class=\"comment\">// 不是当前项目需要设置包名参数</span></span><br><span class=\"line\">npm publish <span class=\"comment\">// 项目目录下--access=public公共包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在測試版本中 的package.json我們改成這樣 \"version\": \"1.0.6-beta\",然後提交測試版本</span></span><br><span class=\"line\">npm publish --tag=beta</span><br><span class=\"line\"><span class=\"comment\">// 下載測試版本</span></span><br><span class=\"line\">npm install @fz/components@beta</span><br></pre></td></tr></table></figure>\n<h3 id=\"包权限管理\"><a href=\"#包权限管理\" class=\"headerlink\" title=\"包权限管理\"></a>包权限管理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看远程包版本</span><br><span class=\"line\">npm view &lt;package_name&gt; version --json</span><br><span class=\"line\">查看模块拥有者 </span><br><span class=\"line\">npm owner ls &lt;package_name&gt; </span><br><span class=\"line\">添加一个发布者 </span><br><span class=\"line\">npm owner add &lt;user&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">package_name</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"xml\">删除一个发布者 </span></span><br><span class=\"line\">npm owner rm &lt;user&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>npm发包流程</p>\n<h3 id=\"注册npm账号\"><a href=\"#注册npm账号\" class=\"headerlink\" title=\"注册npm账号\"></a>注册npm账号</h3><p><a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/signup</a></p>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><ul>\n<li>初始化（myNpm）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init <span class=\"comment\">// 生成package.json</span></span><br></pre></td></tr></table></figure></li>\n<li>创建项目文件index.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"comment\">// 暴露模块</span></span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的第一个测试包'</span>);</span><br><span class=\"line\">  &#125;     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改package.json文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\": \"index.js\",</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3>新建test.js<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tools = <span class=\"built_in\">require</span>(<span class=\"string\">'./index.js'</span>)</span><br><span class=\"line\">tools.fun()</span><br></pre></td></tr></table></figure>\n命令行执行<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node test.js <span class=\"comment\">// 输出：我的第一个测试包</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布包\"><a href=\"#发布包\" class=\"headerlink\" title=\"发布包\"></a>发布包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser <span class=\"comment\">// 输入账号密码,如果不是第一次发包，运行 npm login</span></span><br><span class=\"line\"><span class=\"comment\">// 不是当前项目需要设置包名参数</span></span><br><span class=\"line\">npm publish <span class=\"comment\">// 项目目录下--access=public公共包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在測試版本中 的package.json我們改成這樣 \"version\": \"1.0.6-beta\",然後提交測試版本</span></span><br><span class=\"line\">npm publish --tag=beta</span><br><span class=\"line\"><span class=\"comment\">// 下載測試版本</span></span><br><span class=\"line\">npm install @fz/components@beta</span><br></pre></td></tr></table></figure>\n<h3 id=\"包权限管理\"><a href=\"#包权限管理\" class=\"headerlink\" title=\"包权限管理\"></a>包权限管理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看远程包版本</span><br><span class=\"line\">npm view &lt;package_name&gt; version --json</span><br><span class=\"line\">查看模块拥有者 </span><br><span class=\"line\">npm owner ls &lt;package_name&gt; </span><br><span class=\"line\">添加一个发布者 </span><br><span class=\"line\">npm owner add &lt;user&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">package_name</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"xml\">删除一个发布者 </span></span><br><span class=\"line\">npm owner rm &lt;user&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"_content":"干掉端口号方法：\n\n1.进入cmd命令窗口，写netstat -ano|findstr \"8080\"\n\n![img](https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143844534-1765934002.png)\n\n2.taskkill -PID 13512 -F\n\n![img](https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143901503-695659454.png)\n\n3.查看端口被哪个服务占用\n\ntasklist | findstr PID\n\n4.结束服务\n\ntaskkill /f /t /im KGService.exe","source":"_posts/干掉端口号方法：.md","raw":"---\ncategories: \n- 其他\ntags:\n- 端口\n---\n干掉端口号方法：\n\n1.进入cmd命令窗口，写netstat -ano|findstr \"8080\"\n\n![img](https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143844534-1765934002.png)\n\n2.taskkill -PID 13512 -F\n\n![img](https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143901503-695659454.png)\n\n3.查看端口被哪个服务占用\n\ntasklist | findstr PID\n\n4.结束服务\n\ntaskkill /f /t /im KGService.exe","slug":"干掉端口号方法：","published":1,"date":"2020-07-16T13:28:48.429Z","updated":"2020-07-17T11:29:54.333Z","title":"干掉端口号方法：","_id":"ckcotxgsn000dp8vodxwn5du7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>干掉端口号方法：</p>\n<p>1.进入cmd命令窗口，写netstat -ano|findstr “8080”</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143844534-1765934002.png\" alt=\"img\"></p>\n<p>2.taskkill -PID 13512 -F</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143901503-695659454.png\" alt=\"img\"></p>\n<p>3.查看端口被哪个服务占用</p>\n<p>tasklist | findstr PID</p>\n<p>4.结束服务</p>\n<p>taskkill /f /t /im KGService.exe</p>\n","site":{"data":{}},"excerpt":"","more":"<p>干掉端口号方法：</p>\n<p>1.进入cmd命令窗口，写netstat -ano|findstr “8080”</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143844534-1765934002.png\" alt=\"img\"></p>\n<p>2.taskkill -PID 13512 -F</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1215590/201811/1215590-20181116143901503-695659454.png\" alt=\"img\"></p>\n<p>3.查看端口被哪个服务占用</p>\n<p>tasklist | findstr PID</p>\n<p>4.结束服务</p>\n<p>taskkill /f /t /im KGService.exe</p>\n"},{"_content":"npm发包(基本流程通同其他包)\n\n常用工具包：\n\n- chalk --命令行文字定制化显示工具\n- commander --命令行工具\n- inquirer --命令行问询工具\n- ora --命令行生成loading工具\n- fs-extra --fs加强版\n\ndownload-git-repo --远程git资源包下载工具\n\n### 注册npm账号\nhttps://www.npmjs.com/signup\n### 初始化项目\n- 初始化（ test）\n```javascript\nnpm init // 生成package.json\n```\n- 创建项目文件\n\t- 创建bin文件夹\n\t- 创建bin/build文件（可以不写后缀名，可以为其他文件名）\n\t- 设置\n```javascript\n#!/usr/bin/env node\n\nconsole.log('hello world');\n```\n- 修改package.json文件 添加\n```json\n\"bin\": \"bin/build\",\n```\n### 本地测试\n```javascript\ncd test\nnode ./bin/build\n// 输入 hello world\n```\n\n### 发布\n如果是第一次发布，运行 npm adduser，如果不是第一次发包，运行 npm login，输入账号密码\n进入项目文件夹下，运行 npm publish 发布，不是当前项目需要设置设置包名\n","source":"_posts/脚手架.md","raw":"---\ncategories: \n- 前端\n- 前端工程化\ntags:\n- npm\n- node\n- 自动化\n---\nnpm发包(基本流程通同其他包)\n\n常用工具包：\n\n- chalk --命令行文字定制化显示工具\n- commander --命令行工具\n- inquirer --命令行问询工具\n- ora --命令行生成loading工具\n- fs-extra --fs加强版\n\ndownload-git-repo --远程git资源包下载工具\n\n### 注册npm账号\nhttps://www.npmjs.com/signup\n### 初始化项目\n- 初始化（ test）\n```javascript\nnpm init // 生成package.json\n```\n- 创建项目文件\n\t- 创建bin文件夹\n\t- 创建bin/build文件（可以不写后缀名，可以为其他文件名）\n\t- 设置\n```javascript\n#!/usr/bin/env node\n\nconsole.log('hello world');\n```\n- 修改package.json文件 添加\n```json\n\"bin\": \"bin/build\",\n```\n### 本地测试\n```javascript\ncd test\nnode ./bin/build\n// 输入 hello world\n```\n\n### 发布\n如果是第一次发布，运行 npm adduser，如果不是第一次发包，运行 npm login，输入账号密码\n进入项目文件夹下，运行 npm publish 发布，不是当前项目需要设置设置包名\n","slug":"脚手架","published":1,"date":"2020-07-16T13:28:48.431Z","updated":"2020-07-17T11:44:45.021Z","title":"脚手架","_id":"ckcotxgsq000ep8vo2tc84vnp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>npm发包(基本流程通同其他包)</p>\n<p>常用工具包：</p>\n<ul>\n<li>chalk –命令行文字定制化显示工具</li>\n<li>commander –命令行工具</li>\n<li>inquirer –命令行问询工具</li>\n<li>ora –命令行生成loading工具</li>\n<li>fs-extra –fs加强版</li>\n</ul>\n<p>download-git-repo –远程git资源包下载工具</p>\n<h3 id=\"注册npm账号\"><a href=\"#注册npm账号\" class=\"headerlink\" title=\"注册npm账号\"></a>注册npm账号</h3><p><a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/signup</a></p>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><ul>\n<li>初始化（ test）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init <span class=\"comment\">// 生成package.json</span></span><br></pre></td></tr></table></figure></li>\n<li>创建项目文件<ul>\n<li>创建bin文件夹</li>\n<li>创建bin/build文件（可以不写后缀名，可以为其他文件名）</li>\n<li>设置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>修改package.json文件 添加<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"bin\": \"bin/build\",</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd test</span><br><span class=\"line\">node ./bin/build</span><br><span class=\"line\"><span class=\"comment\">// 输入 hello world</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>如果是第一次发布，运行 npm adduser，如果不是第一次发包，运行 npm login，输入账号密码<br>进入项目文件夹下，运行 npm publish 发布，不是当前项目需要设置设置包名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>npm发包(基本流程通同其他包)</p>\n<p>常用工具包：</p>\n<ul>\n<li>chalk –命令行文字定制化显示工具</li>\n<li>commander –命令行工具</li>\n<li>inquirer –命令行问询工具</li>\n<li>ora –命令行生成loading工具</li>\n<li>fs-extra –fs加强版</li>\n</ul>\n<p>download-git-repo –远程git资源包下载工具</p>\n<h3 id=\"注册npm账号\"><a href=\"#注册npm账号\" class=\"headerlink\" title=\"注册npm账号\"></a>注册npm账号</h3><p><a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/signup</a></p>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><ul>\n<li>初始化（ test）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init <span class=\"comment\">// 生成package.json</span></span><br></pre></td></tr></table></figure></li>\n<li>创建项目文件<ul>\n<li>创建bin文件夹</li>\n<li>创建bin/build文件（可以不写后缀名，可以为其他文件名）</li>\n<li>设置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>修改package.json文件 添加<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"bin\": \"bin/build\",</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd test</span><br><span class=\"line\">node ./bin/build</span><br><span class=\"line\"><span class=\"comment\">// 输入 hello world</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>如果是第一次发布，运行 npm adduser，如果不是第一次发包，运行 npm login，输入账号密码<br>进入项目文件夹下，运行 npm publish 发布，不是当前项目需要设置设置包名</p>\n"},{"date":"2017-10-06T16:00:00.000Z","_content":"\n1.类式继承\n\nSubClass.protype=new SuperClass();\n\n缺点：无法在创建子类实例时传参给父类（初始化原型属性，即父类实例），如果继承的属性是引用类型，则修改该属性会相互影响（共用地址空间）\n\n2.构造函数继承(call方法)，子类中直接使用this调用call方法，传入参数\n\nSuperClass.call(this,params) \n\n缺点：只继承了父类实例属性， 不能继承原型属性，无法实现函数复用 \n\n3.组合继承：\n\n构造函数内SuperClass.call(this,params) //可传参继承实例属性\n\n```text\nSon.prototype.constructor = Son;\n```\n\n构造函数外SubClass.protype=new SuperClass();) //继承实例属性（无法传参也没关系，优先访问构造函数内的实例属性）+原型属性\n\n调用两次父类构造函数，资源浪费\n\n4.原型链继承\n\n构造函数内SuperClass.call(this,params) // 可传参，继承实例属性\n\n构造函数外SubClass.protype=SubClass.protype； // 继承原型属性\n\n","source":"_posts/面向对象.md","raw":"---\ndate: 2017-10-07\ncategories: \n- 前端\n- 面向对象\ntags:\n- 继承\n---\n\n1.类式继承\n\nSubClass.protype=new SuperClass();\n\n缺点：无法在创建子类实例时传参给父类（初始化原型属性，即父类实例），如果继承的属性是引用类型，则修改该属性会相互影响（共用地址空间）\n\n2.构造函数继承(call方法)，子类中直接使用this调用call方法，传入参数\n\nSuperClass.call(this,params) \n\n缺点：只继承了父类实例属性， 不能继承原型属性，无法实现函数复用 \n\n3.组合继承：\n\n构造函数内SuperClass.call(this,params) //可传参继承实例属性\n\n```text\nSon.prototype.constructor = Son;\n```\n\n构造函数外SubClass.protype=new SuperClass();) //继承实例属性（无法传参也没关系，优先访问构造函数内的实例属性）+原型属性\n\n调用两次父类构造函数，资源浪费\n\n4.原型链继承\n\n构造函数内SuperClass.call(this,params) // 可传参，继承实例属性\n\n构造函数外SubClass.protype=SubClass.protype； // 继承原型属性\n\n","slug":"面向对象","published":1,"updated":"2020-07-17T12:00:30.287Z","title":"面向对象","_id":"ckcotxgt6000fp8vo7sxpevxh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.类式继承</p>\n<p>SubClass.protype=new SuperClass();</p>\n<p>缺点：无法在创建子类实例时传参给父类（初始化原型属性，即父类实例），如果继承的属性是引用类型，则修改该属性会相互影响（共用地址空间）</p>\n<p>2.构造函数继承(call方法)，子类中直接使用this调用call方法，传入参数</p>\n<p>SuperClass.call(this,params) </p>\n<p>缺点：只继承了父类实例属性， 不能继承原型属性，无法实现函数复用 </p>\n<p>3.组合继承：</p>\n<p>构造函数内SuperClass.call(this,params) //可传参继承实例属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Son.prototype.constructor &#x3D; Son;</span><br></pre></td></tr></table></figure>\n\n<p>构造函数外SubClass.protype=new SuperClass();) //继承实例属性（无法传参也没关系，优先访问构造函数内的实例属性）+原型属性</p>\n<p>调用两次父类构造函数，资源浪费</p>\n<p>4.原型链继承</p>\n<p>构造函数内SuperClass.call(this,params) // 可传参，继承实例属性</p>\n<p>构造函数外SubClass.protype=SubClass.protype； // 继承原型属性</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.类式继承</p>\n<p>SubClass.protype=new SuperClass();</p>\n<p>缺点：无法在创建子类实例时传参给父类（初始化原型属性，即父类实例），如果继承的属性是引用类型，则修改该属性会相互影响（共用地址空间）</p>\n<p>2.构造函数继承(call方法)，子类中直接使用this调用call方法，传入参数</p>\n<p>SuperClass.call(this,params) </p>\n<p>缺点：只继承了父类实例属性， 不能继承原型属性，无法实现函数复用 </p>\n<p>3.组合继承：</p>\n<p>构造函数内SuperClass.call(this,params) //可传参继承实例属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Son.prototype.constructor &#x3D; Son;</span><br></pre></td></tr></table></figure>\n\n<p>构造函数外SubClass.protype=new SuperClass();) //继承实例属性（无法传参也没关系，优先访问构造函数内的实例属性）+原型属性</p>\n<p>调用两次父类构造函数，资源浪费</p>\n<p>4.原型链继承</p>\n<p>构造函数内SuperClass.call(this,params) // 可传参，继承实例属性</p>\n<p>构造函数外SubClass.protype=SubClass.protype； // 继承原型属性</p>\n"},{"_content":"# 前端工程化实践（一）-- 前端组件化\n\n#### 背景：\n\n- 公司当前的前端开发现状是，各个项目组各自封装各自的组件，无法快速复用和统一管理，影响开发效率，增加迭代成本\n- 目前国内访问国外服务器被墙的现状，在项目初始化和迭代过程中，出现npm包无法下载，下载慢的问题，即便切换其他镜像下载有时也不理想，（不同源的包甚至有些微差异，目前在样式方面有体现）\n#### 优点：\n托管公司内部组件库代码，不对外，方便管理\n项目中使用到的npm包会缓存到私服库里，能明显提升之后下包的速度\n\n- 前置基础：默认服务器已安装node，PM2\n\n因为公司目前是React技术栈，且主要使用umi+antd的生态，故本着一切从快从简的原则，直接使用了相关的umi/father工具，master是使用一开始的library工具，3月份作者改名为dumi，支持迁移，马上探索！\n\n## npm私服搭建\n\n使用基于node的verdaccio搭建，简单，方便，快捷!此处默认服务器已安装node环境\n- 全局安装verdaccio：\n```\nnpm i verdaccio -g;\n```\n- 全局安装pm2，用来守护node进程：\n```\nnpm i pm2 -g;\n```\n- 启动verdaccio：\n```\npm2 start verdaccio\n```\n- 停止verdaccio：\n```\npm2 stop verdaccio\n```\n![001](E:\\笔记\\001.png)\n### verdaccio使用\n- 查看config.yaml配置文件  config.yaml\n![002](E:\\笔记\\002.png)\n- 修改配置 vim /root/.config/verdaccio/config.yaml，配置服务端口 0.0.0.:4873,也可以配置包的缓存位置，请留意这些红色标注\n![003](E:\\笔记\\003.png)\n- 阿里云服务器记得打开端口访问权限\n\n- 其他解释：\n\n  **字段含义：**\n   scope有两种模式\n   一种是 @/ 表示某下属的某项目\n   另一种是 * 匹配项目名称(名称在package.json中有定义)\n   权限：\n\n  -  `access`: 表示哪一类用户可以对匹配的项目进行安装(install)\n  -  `publish`: 表示哪一类用户可以对匹配的项目进行发布(publish)\n  -  `proxy`: 如其名，这里的值是对应于 uplinks 的名称，如果本地不存在，允许去对应的uplinks去取。\n\n  **值的含义：**\n\n  -  `$all` 表示所有人(已注册、未注册)都可以执行对应的操作\n  -  `$authenticated` 表示只有通过验证的人(已注册)可以执行对应操作，注意，任何人都可以去注册账户。\n  -  `$anonymous` 表示只有匿名者可以进行对应操作（通常无用）\n\n  如果要指定某个用户才有权限，可以直接写上用户名，多个用户用空格隔开，比如：\n\n  ```undefined\n  publish: michael martin\n  ```\n\n  \n\n### father（umi）使用\n\n一开始用的library，后面作者推荐用更新到father，目前又推荐使用dumi暂时未升级\n\n- 修改package.json\n\n  ```json\n  \"scripts\": {\n      \"doc:dev\": \"father doc dev\", //本地文档开发\n      \"dev\": \"father build --watch\",// 监视组件构建\n      \"build\": \"father build\",// 组件构建\n      \"doc:build\": \"father doc build\",//本地文档构建\n      \"doc:deploy\": \"father doc deploy\"//构建发布文档到远程git\n  }\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.esm.js\",\n  ```\n\n- 修改.fatherrc.js\n\n  ```javascript\n  import commonjs from 'rollup-plugin-commonjs';\n  export default {\n    entry: 'src/index.js',\n    esm: 'babel', //默认rollup \n    cjs: 'babel', //默认rollup \n    //rollup的情况下发现无法用es6导入 只能用require，同时package.json的入口的配置\"main\": \"dist/index.js\",\"module\": \"dist/index.esm.js\",即从dist作为主入口\n      \n    doc: {\n      base: '/umi_cps', //如果是根目录直接写‘/’，我此处配置未git上的仓库名称\n      title: 'MgUi', // 左上角title\n      themeConfig: { mode: 'light' },\n    },\n    cssModules: false,\n    // cssModules: {\n    //   generateScopedName: 'mglinker_[name]__[local]___[hash:base64:5]',\n    // },\n    // extractCSS: true,\n    extraRollupPlugins: [\n      commonjs({\n        // include: 'node_modules/**',\n        // namedExports: { 'react': ['createElement', 'Component', 'Fragment', 'createContext', 'useContext', 'useEffect', 'useMemo', 'useRef', 'useState', 'forwardRef', 'Suspense', 'useCallback', 'memo' ] },\n        namedExports: { 'react': ['createElement', 'Component'] }, // react的api如果有报缺少，则在配置\n      })\n    ],\n    extraBabelPlugins: [\n      ['babel-plugin-import', {\n        libraryName: 'antd',\n        libraryDirectory: 'es',\n        style: true,\n      }],\n    ],\n  }\n  ```\n\n- 开发调试包\n\n  - 进入组件库根目录，执行\n\n    ```javascript\n    //根据package.json上的配置，包被链接到全局（去全局找会发现那里是一个快捷方式指向本地组件库这里）\n    npm link\n  ```\n  \n- 进入测试引用的项目，执行\n  \n  ```javascript\n    //链接本地组件库名（package.json内的名字）\n    npm link umi_cps\n    //链接完成，测试使用\n    ```\n  \n  - 解除link\n  \n     ```javascript\n    //解除项目和模块link，项目目录下\n    npm unlink 模块名\n    //解除模块全局link，模块目录下\n    npm unlink 模块名\n     ```\n  \n    Tip: 也可以在同一项目目录下，相对路径引入\n\n- 发布包\n\n  - 注意切换镜像，我是用镜像管理工具，也可以直接使用npm config\n\n    ```javascript\n    nrm use npm //或者私服地址的镜像名 npm config set registry  https://xxxx.org\n    ```\n\n    \n\n  - 登录发布\n\n    ```javascript\n    // 注册账号（无账号网站注册或者使用命令行创建）\n    npm adduser\n    Username: xxx\n    Password: xxxxxx\n    Email: xxxx@gmail.com\n    // 登录\n    npm login\n    Username: xxx\n    Password: xxxxxx\n    Email: xxxx@gmail.com\n    // 发布\n    npm publish\n    \n    ```\n\n    - 再次提醒： 注意切换镜像！！！切换后要重新登录！\n    \n      \n\n# 组件Demo\n\n### 1.安装\n\n```js\nnpm install umi_cps\n```\n\n或者用yarn安装\n\n```js\nyarn add umi_cps\n```\n\n### 2. 使用\n\n```jsx\nimport { \n  MgButton,\n} from 'umi_cps'\nconst Demo = () => <MgButton>蘑菇的第一个button</MgButton>\nexport default Demo\n```\n\n## 3.组件开发调试\n\n```js\nnpm run doc:dev\n```\n\n### 4.组件构建\n\n```js\nnpm run build\n```\n\n### 5.构建使用文档\n\n```js\nnpm run build\n```\n\n### 5.推送文档到远程git仓库发布\n\n```js\nnpm run doc:deploy\n```","source":"_posts/前端工程化实践（一）-- 前端组件化.md","raw":"---\ncategories: \n- 前端\n- 前端工程化\ntags:\n- npm\n---\n# 前端工程化实践（一）-- 前端组件化\n\n#### 背景：\n\n- 公司当前的前端开发现状是，各个项目组各自封装各自的组件，无法快速复用和统一管理，影响开发效率，增加迭代成本\n- 目前国内访问国外服务器被墙的现状，在项目初始化和迭代过程中，出现npm包无法下载，下载慢的问题，即便切换其他镜像下载有时也不理想，（不同源的包甚至有些微差异，目前在样式方面有体现）\n#### 优点：\n托管公司内部组件库代码，不对外，方便管理\n项目中使用到的npm包会缓存到私服库里，能明显提升之后下包的速度\n\n- 前置基础：默认服务器已安装node，PM2\n\n因为公司目前是React技术栈，且主要使用umi+antd的生态，故本着一切从快从简的原则，直接使用了相关的umi/father工具，master是使用一开始的library工具，3月份作者改名为dumi，支持迁移，马上探索！\n\n## npm私服搭建\n\n使用基于node的verdaccio搭建，简单，方便，快捷!此处默认服务器已安装node环境\n- 全局安装verdaccio：\n```\nnpm i verdaccio -g;\n```\n- 全局安装pm2，用来守护node进程：\n```\nnpm i pm2 -g;\n```\n- 启动verdaccio：\n```\npm2 start verdaccio\n```\n- 停止verdaccio：\n```\npm2 stop verdaccio\n```\n![001](E:\\笔记\\001.png)\n### verdaccio使用\n- 查看config.yaml配置文件  config.yaml\n![002](E:\\笔记\\002.png)\n- 修改配置 vim /root/.config/verdaccio/config.yaml，配置服务端口 0.0.0.:4873,也可以配置包的缓存位置，请留意这些红色标注\n![003](E:\\笔记\\003.png)\n- 阿里云服务器记得打开端口访问权限\n\n- 其他解释：\n\n  **字段含义：**\n   scope有两种模式\n   一种是 @/ 表示某下属的某项目\n   另一种是 * 匹配项目名称(名称在package.json中有定义)\n   权限：\n\n  -  `access`: 表示哪一类用户可以对匹配的项目进行安装(install)\n  -  `publish`: 表示哪一类用户可以对匹配的项目进行发布(publish)\n  -  `proxy`: 如其名，这里的值是对应于 uplinks 的名称，如果本地不存在，允许去对应的uplinks去取。\n\n  **值的含义：**\n\n  -  `$all` 表示所有人(已注册、未注册)都可以执行对应的操作\n  -  `$authenticated` 表示只有通过验证的人(已注册)可以执行对应操作，注意，任何人都可以去注册账户。\n  -  `$anonymous` 表示只有匿名者可以进行对应操作（通常无用）\n\n  如果要指定某个用户才有权限，可以直接写上用户名，多个用户用空格隔开，比如：\n\n  ```undefined\n  publish: michael martin\n  ```\n\n  \n\n### father（umi）使用\n\n一开始用的library，后面作者推荐用更新到father，目前又推荐使用dumi暂时未升级\n\n- 修改package.json\n\n  ```json\n  \"scripts\": {\n      \"doc:dev\": \"father doc dev\", //本地文档开发\n      \"dev\": \"father build --watch\",// 监视组件构建\n      \"build\": \"father build\",// 组件构建\n      \"doc:build\": \"father doc build\",//本地文档构建\n      \"doc:deploy\": \"father doc deploy\"//构建发布文档到远程git\n  }\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.esm.js\",\n  ```\n\n- 修改.fatherrc.js\n\n  ```javascript\n  import commonjs from 'rollup-plugin-commonjs';\n  export default {\n    entry: 'src/index.js',\n    esm: 'babel', //默认rollup \n    cjs: 'babel', //默认rollup \n    //rollup的情况下发现无法用es6导入 只能用require，同时package.json的入口的配置\"main\": \"dist/index.js\",\"module\": \"dist/index.esm.js\",即从dist作为主入口\n      \n    doc: {\n      base: '/umi_cps', //如果是根目录直接写‘/’，我此处配置未git上的仓库名称\n      title: 'MgUi', // 左上角title\n      themeConfig: { mode: 'light' },\n    },\n    cssModules: false,\n    // cssModules: {\n    //   generateScopedName: 'mglinker_[name]__[local]___[hash:base64:5]',\n    // },\n    // extractCSS: true,\n    extraRollupPlugins: [\n      commonjs({\n        // include: 'node_modules/**',\n        // namedExports: { 'react': ['createElement', 'Component', 'Fragment', 'createContext', 'useContext', 'useEffect', 'useMemo', 'useRef', 'useState', 'forwardRef', 'Suspense', 'useCallback', 'memo' ] },\n        namedExports: { 'react': ['createElement', 'Component'] }, // react的api如果有报缺少，则在配置\n      })\n    ],\n    extraBabelPlugins: [\n      ['babel-plugin-import', {\n        libraryName: 'antd',\n        libraryDirectory: 'es',\n        style: true,\n      }],\n    ],\n  }\n  ```\n\n- 开发调试包\n\n  - 进入组件库根目录，执行\n\n    ```javascript\n    //根据package.json上的配置，包被链接到全局（去全局找会发现那里是一个快捷方式指向本地组件库这里）\n    npm link\n  ```\n  \n- 进入测试引用的项目，执行\n  \n  ```javascript\n    //链接本地组件库名（package.json内的名字）\n    npm link umi_cps\n    //链接完成，测试使用\n    ```\n  \n  - 解除link\n  \n     ```javascript\n    //解除项目和模块link，项目目录下\n    npm unlink 模块名\n    //解除模块全局link，模块目录下\n    npm unlink 模块名\n     ```\n  \n    Tip: 也可以在同一项目目录下，相对路径引入\n\n- 发布包\n\n  - 注意切换镜像，我是用镜像管理工具，也可以直接使用npm config\n\n    ```javascript\n    nrm use npm //或者私服地址的镜像名 npm config set registry  https://xxxx.org\n    ```\n\n    \n\n  - 登录发布\n\n    ```javascript\n    // 注册账号（无账号网站注册或者使用命令行创建）\n    npm adduser\n    Username: xxx\n    Password: xxxxxx\n    Email: xxxx@gmail.com\n    // 登录\n    npm login\n    Username: xxx\n    Password: xxxxxx\n    Email: xxxx@gmail.com\n    // 发布\n    npm publish\n    \n    ```\n\n    - 再次提醒： 注意切换镜像！！！切换后要重新登录！\n    \n      \n\n# 组件Demo\n\n### 1.安装\n\n```js\nnpm install umi_cps\n```\n\n或者用yarn安装\n\n```js\nyarn add umi_cps\n```\n\n### 2. 使用\n\n```jsx\nimport { \n  MgButton,\n} from 'umi_cps'\nconst Demo = () => <MgButton>蘑菇的第一个button</MgButton>\nexport default Demo\n```\n\n## 3.组件开发调试\n\n```js\nnpm run doc:dev\n```\n\n### 4.组件构建\n\n```js\nnpm run build\n```\n\n### 5.构建使用文档\n\n```js\nnpm run build\n```\n\n### 5.推送文档到远程git仓库发布\n\n```js\nnpm run doc:deploy\n```","slug":"前端工程化实践（一）-- 前端组件化","published":1,"date":"2020-07-16T13:28:48.481Z","updated":"2020-07-17T11:45:05.217Z","title":"前端工程化实践（一）-- 前端组件化","_id":"ckcotxgu1000gp8vofgyg4ats","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前端工程化实践（一）–-前端组件化\"><a href=\"#前端工程化实践（一）–-前端组件化\" class=\"headerlink\" title=\"前端工程化实践（一）– 前端组件化\"></a>前端工程化实践（一）– 前端组件化</h1><h4 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h4><ul>\n<li><p>公司当前的前端开发现状是，各个项目组各自封装各自的组件，无法快速复用和统一管理，影响开发效率，增加迭代成本</p>\n</li>\n<li><p>目前国内访问国外服务器被墙的现状，在项目初始化和迭代过程中，出现npm包无法下载，下载慢的问题，即便切换其他镜像下载有时也不理想，（不同源的包甚至有些微差异，目前在样式方面有体现）</p>\n<h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><p>托管公司内部组件库代码，不对外，方便管理<br>项目中使用到的npm包会缓存到私服库里，能明显提升之后下包的速度</p>\n</li>\n<li><p>前置基础：默认服务器已安装node，PM2</p>\n</li>\n</ul>\n<p>因为公司目前是React技术栈，且主要使用umi+antd的生态，故本着一切从快从简的原则，直接使用了相关的umi/father工具，master是使用一开始的library工具，3月份作者改名为dumi，支持迁移，马上探索！</p>\n<h2 id=\"npm私服搭建\"><a href=\"#npm私服搭建\" class=\"headerlink\" title=\"npm私服搭建\"></a>npm私服搭建</h2><p>使用基于node的verdaccio搭建，简单，方便，快捷!此处默认服务器已安装node环境</p>\n<ul>\n<li><p>全局安装verdaccio：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i verdaccio -g;</span><br></pre></td></tr></table></figure></li>\n<li><p>全局安装pm2，用来守护node进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pm2 -g;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动verdaccio：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start verdaccio</span><br></pre></td></tr></table></figure></li>\n<li><p>停止verdaccio：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 stop verdaccio</span><br></pre></td></tr></table></figure>\n<p><img src=\"E:%5C%E7%AC%94%E8%AE%B0%5C001.png\" alt=\"001\"></p>\n<h3 id=\"verdaccio使用\"><a href=\"#verdaccio使用\" class=\"headerlink\" title=\"verdaccio使用\"></a>verdaccio使用</h3></li>\n<li><p>查看config.yaml配置文件  config.yaml<br><img src=\"E:%5C%E7%AC%94%E8%AE%B0%5C002.png\" alt=\"002\"></p>\n</li>\n<li><p>修改配置 vim /root/.config/verdaccio/config.yaml，配置服务端口 0.0.0.:4873,也可以配置包的缓存位置，请留意这些红色标注<br><img src=\"E:%5C%E7%AC%94%E8%AE%B0%5C003.png\" alt=\"003\"></p>\n</li>\n<li><p>阿里云服务器记得打开端口访问权限</p>\n</li>\n<li><p>其他解释：</p>\n<p><strong>字段含义：</strong><br> scope有两种模式<br> 一种是 @/ 表示某下属的某项目<br> 另一种是 * 匹配项目名称(名称在package.json中有定义)<br> 权限：</p>\n<ul>\n<li><code>access</code>: 表示哪一类用户可以对匹配的项目进行安装(install)</li>\n<li><code>publish</code>: 表示哪一类用户可以对匹配的项目进行发布(publish)</li>\n<li><code>proxy</code>: 如其名，这里的值是对应于 uplinks 的名称，如果本地不存在，允许去对应的uplinks去取。</li>\n</ul>\n<p><strong>值的含义：</strong></p>\n<ul>\n<li><code>$all</code> 表示所有人(已注册、未注册)都可以执行对应的操作</li>\n<li><code>$authenticated</code> 表示只有通过验证的人(已注册)可以执行对应操作，注意，任何人都可以去注册账户。</li>\n<li><code>$anonymous</code> 表示只有匿名者可以进行对应操作（通常无用）</li>\n</ul>\n<p>如果要指定某个用户才有权限，可以直接写上用户名，多个用户用空格隔开，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publish: michael martin</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"father（umi）使用\"><a href=\"#father（umi）使用\" class=\"headerlink\" title=\"father（umi）使用\"></a>father（umi）使用</h3><p>一开始用的library，后面作者推荐用更新到father，目前又推荐使用dumi暂时未升级</p>\n<ul>\n<li><p>修改package.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"doc:dev\": \"father doc dev\", //本地文档开发</span><br><span class=\"line\">    \"dev\": \"father build --watch\",// 监视组件构建</span><br><span class=\"line\">    \"build\": \"father build\",// 组件构建</span><br><span class=\"line\">    \"doc:build\": \"father doc build\",//本地文档构建</span><br><span class=\"line\">    \"doc:deploy\": \"father doc deploy\"//构建发布文档到远程git</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\"main\": \"dist/index.js\",</span><br><span class=\"line\">\"module\": \"dist/index.esm.js\",</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改.fatherrc.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-commonjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'src/index.js'</span>,</span><br><span class=\"line\">  esm: <span class=\"string\">'babel'</span>, <span class=\"comment\">//默认rollup </span></span><br><span class=\"line\">  cjs: <span class=\"string\">'babel'</span>, <span class=\"comment\">//默认rollup </span></span><br><span class=\"line\">  <span class=\"comment\">//rollup的情况下发现无法用es6导入 只能用require，同时package.json的入口的配置\"main\": \"dist/index.js\",\"module\": \"dist/index.esm.js\",即从dist作为主入口</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  doc: &#123;</span><br><span class=\"line\">    base: <span class=\"string\">'/umi_cps'</span>, <span class=\"comment\">//如果是根目录直接写‘/’，我此处配置未git上的仓库名称</span></span><br><span class=\"line\">    title: <span class=\"string\">'MgUi'</span>, <span class=\"comment\">// 左上角title</span></span><br><span class=\"line\">    themeConfig: &#123; <span class=\"attr\">mode</span>: <span class=\"string\">'light'</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  cssModules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// cssModules: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   generateScopedName: 'mglinker_[name]__[local]___[hash:base64:5]',</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// extractCSS: true,</span></span><br><span class=\"line\">  extraRollupPlugins: [</span><br><span class=\"line\">    commonjs(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// include: 'node_modules/**',</span></span><br><span class=\"line\">      <span class=\"comment\">// namedExports: &#123; 'react': ['createElement', 'Component', 'Fragment', 'createContext', 'useContext', 'useEffect', 'useMemo', 'useRef', 'useState', 'forwardRef', 'Suspense', 'useCallback', 'memo' ] &#125;,</span></span><br><span class=\"line\">      namedExports: &#123; <span class=\"string\">'react'</span>: [<span class=\"string\">'createElement'</span>, <span class=\"string\">'Component'</span>] &#125;, <span class=\"comment\">// react的api如果有报缺少，则在配置</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  extraBabelPlugins: [</span><br><span class=\"line\">    [<span class=\"string\">'babel-plugin-import'</span>, &#123;</span><br><span class=\"line\">      libraryName: <span class=\"string\">'antd'</span>,</span><br><span class=\"line\">      libraryDirectory: <span class=\"string\">'es'</span>,</span><br><span class=\"line\">      style: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开发调试包</p>\n<ul>\n<li><p>进入组件库根目录，执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据package.json上的配置，包被链接到全局（去全局找会发现那里是一个快捷方式指向本地组件库这里）</span></span><br><span class=\"line\">npm link</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>进入测试引用的项目，执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//链接本地组件库名（package.json内的名字）</span></span><br><span class=\"line\">npm link umi_cps</span><br><span class=\"line\"><span class=\"comment\">//链接完成，测试使用</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解除link</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解除项目和模块link，项目目录下</span></span><br><span class=\"line\">npm unlink 模块名</span><br><span class=\"line\"><span class=\"comment\">//解除模块全局link，模块目录下</span></span><br><span class=\"line\">npm unlink 模块名</span><br></pre></td></tr></table></figure>\n\n<p>Tip: 也可以在同一项目目录下，相对路径引入</p>\n</li>\n</ul>\n</li>\n<li><p>发布包</p>\n<ul>\n<li><p>注意切换镜像，我是用镜像管理工具，也可以直接使用npm config</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use npm <span class=\"comment\">//或者私服地址的镜像名 npm config set registry  https://xxxx.org</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>登录发布</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册账号（无账号网站注册或者使用命令行创建）</span></span><br><span class=\"line\">npm adduser</span><br><span class=\"line\">Username: xxx</span><br><span class=\"line\">Password: xxxxxx</span><br><span class=\"line\">Email: xxxx@gmail.com</span><br><span class=\"line\"><span class=\"comment\">// 登录</span></span><br><span class=\"line\">npm login</span><br><span class=\"line\">Username: xxx</span><br><span class=\"line\">Password: xxxxxx</span><br><span class=\"line\">Email: xxxx@gmail.com</span><br><span class=\"line\"><span class=\"comment\">// 发布</span></span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次提醒： 注意切换镜像！！！切换后要重新登录！</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"组件Demo\"><a href=\"#组件Demo\" class=\"headerlink\" title=\"组件Demo\"></a>组件Demo</h1><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install umi_cps</span><br></pre></td></tr></table></figure>\n\n<p>或者用yarn安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add umi_cps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; </span><br><span class=\"line\">  MgButton,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'umi_cps'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Demo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MgButton</span>&gt;</span>蘑菇的第一个button<span class=\"tag\">&lt;/<span class=\"name\">MgButton</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Demo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件开发调试\"><a href=\"#3-组件开发调试\" class=\"headerlink\" title=\"3.组件开发调试\"></a>3.组件开发调试</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run doc:dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-组件构建\"><a href=\"#4-组件构建\" class=\"headerlink\" title=\"4.组件构建\"></a>4.组件构建</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-构建使用文档\"><a href=\"#5-构建使用文档\" class=\"headerlink\" title=\"5.构建使用文档\"></a>5.构建使用文档</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-推送文档到远程git仓库发布\"><a href=\"#5-推送文档到远程git仓库发布\" class=\"headerlink\" title=\"5.推送文档到远程git仓库发布\"></a>5.推送文档到远程git仓库发布</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run doc:deploy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端工程化实践（一）–-前端组件化\"><a href=\"#前端工程化实践（一）–-前端组件化\" class=\"headerlink\" title=\"前端工程化实践（一）– 前端组件化\"></a>前端工程化实践（一）– 前端组件化</h1><h4 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h4><ul>\n<li><p>公司当前的前端开发现状是，各个项目组各自封装各自的组件，无法快速复用和统一管理，影响开发效率，增加迭代成本</p>\n</li>\n<li><p>目前国内访问国外服务器被墙的现状，在项目初始化和迭代过程中，出现npm包无法下载，下载慢的问题，即便切换其他镜像下载有时也不理想，（不同源的包甚至有些微差异，目前在样式方面有体现）</p>\n<h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><p>托管公司内部组件库代码，不对外，方便管理<br>项目中使用到的npm包会缓存到私服库里，能明显提升之后下包的速度</p>\n</li>\n<li><p>前置基础：默认服务器已安装node，PM2</p>\n</li>\n</ul>\n<p>因为公司目前是React技术栈，且主要使用umi+antd的生态，故本着一切从快从简的原则，直接使用了相关的umi/father工具，master是使用一开始的library工具，3月份作者改名为dumi，支持迁移，马上探索！</p>\n<h2 id=\"npm私服搭建\"><a href=\"#npm私服搭建\" class=\"headerlink\" title=\"npm私服搭建\"></a>npm私服搭建</h2><p>使用基于node的verdaccio搭建，简单，方便，快捷!此处默认服务器已安装node环境</p>\n<ul>\n<li><p>全局安装verdaccio：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i verdaccio -g;</span><br></pre></td></tr></table></figure></li>\n<li><p>全局安装pm2，用来守护node进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pm2 -g;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动verdaccio：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start verdaccio</span><br></pre></td></tr></table></figure></li>\n<li><p>停止verdaccio：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 stop verdaccio</span><br></pre></td></tr></table></figure>\n<p><img src=\"E:%5C%E7%AC%94%E8%AE%B0%5C001.png\" alt=\"001\"></p>\n<h3 id=\"verdaccio使用\"><a href=\"#verdaccio使用\" class=\"headerlink\" title=\"verdaccio使用\"></a>verdaccio使用</h3></li>\n<li><p>查看config.yaml配置文件  config.yaml<br><img src=\"E:%5C%E7%AC%94%E8%AE%B0%5C002.png\" alt=\"002\"></p>\n</li>\n<li><p>修改配置 vim /root/.config/verdaccio/config.yaml，配置服务端口 0.0.0.:4873,也可以配置包的缓存位置，请留意这些红色标注<br><img src=\"E:%5C%E7%AC%94%E8%AE%B0%5C003.png\" alt=\"003\"></p>\n</li>\n<li><p>阿里云服务器记得打开端口访问权限</p>\n</li>\n<li><p>其他解释：</p>\n<p><strong>字段含义：</strong><br> scope有两种模式<br> 一种是 @/ 表示某下属的某项目<br> 另一种是 * 匹配项目名称(名称在package.json中有定义)<br> 权限：</p>\n<ul>\n<li><code>access</code>: 表示哪一类用户可以对匹配的项目进行安装(install)</li>\n<li><code>publish</code>: 表示哪一类用户可以对匹配的项目进行发布(publish)</li>\n<li><code>proxy</code>: 如其名，这里的值是对应于 uplinks 的名称，如果本地不存在，允许去对应的uplinks去取。</li>\n</ul>\n<p><strong>值的含义：</strong></p>\n<ul>\n<li><code>$all</code> 表示所有人(已注册、未注册)都可以执行对应的操作</li>\n<li><code>$authenticated</code> 表示只有通过验证的人(已注册)可以执行对应操作，注意，任何人都可以去注册账户。</li>\n<li><code>$anonymous</code> 表示只有匿名者可以进行对应操作（通常无用）</li>\n</ul>\n<p>如果要指定某个用户才有权限，可以直接写上用户名，多个用户用空格隔开，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publish: michael martin</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"father（umi）使用\"><a href=\"#father（umi）使用\" class=\"headerlink\" title=\"father（umi）使用\"></a>father（umi）使用</h3><p>一开始用的library，后面作者推荐用更新到father，目前又推荐使用dumi暂时未升级</p>\n<ul>\n<li><p>修改package.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"doc:dev\": \"father doc dev\", //本地文档开发</span><br><span class=\"line\">    \"dev\": \"father build --watch\",// 监视组件构建</span><br><span class=\"line\">    \"build\": \"father build\",// 组件构建</span><br><span class=\"line\">    \"doc:build\": \"father doc build\",//本地文档构建</span><br><span class=\"line\">    \"doc:deploy\": \"father doc deploy\"//构建发布文档到远程git</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\"main\": \"dist/index.js\",</span><br><span class=\"line\">\"module\": \"dist/index.esm.js\",</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改.fatherrc.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-commonjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'src/index.js'</span>,</span><br><span class=\"line\">  esm: <span class=\"string\">'babel'</span>, <span class=\"comment\">//默认rollup </span></span><br><span class=\"line\">  cjs: <span class=\"string\">'babel'</span>, <span class=\"comment\">//默认rollup </span></span><br><span class=\"line\">  <span class=\"comment\">//rollup的情况下发现无法用es6导入 只能用require，同时package.json的入口的配置\"main\": \"dist/index.js\",\"module\": \"dist/index.esm.js\",即从dist作为主入口</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  doc: &#123;</span><br><span class=\"line\">    base: <span class=\"string\">'/umi_cps'</span>, <span class=\"comment\">//如果是根目录直接写‘/’，我此处配置未git上的仓库名称</span></span><br><span class=\"line\">    title: <span class=\"string\">'MgUi'</span>, <span class=\"comment\">// 左上角title</span></span><br><span class=\"line\">    themeConfig: &#123; <span class=\"attr\">mode</span>: <span class=\"string\">'light'</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  cssModules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// cssModules: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   generateScopedName: 'mglinker_[name]__[local]___[hash:base64:5]',</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">// extractCSS: true,</span></span><br><span class=\"line\">  extraRollupPlugins: [</span><br><span class=\"line\">    commonjs(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// include: 'node_modules/**',</span></span><br><span class=\"line\">      <span class=\"comment\">// namedExports: &#123; 'react': ['createElement', 'Component', 'Fragment', 'createContext', 'useContext', 'useEffect', 'useMemo', 'useRef', 'useState', 'forwardRef', 'Suspense', 'useCallback', 'memo' ] &#125;,</span></span><br><span class=\"line\">      namedExports: &#123; <span class=\"string\">'react'</span>: [<span class=\"string\">'createElement'</span>, <span class=\"string\">'Component'</span>] &#125;, <span class=\"comment\">// react的api如果有报缺少，则在配置</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  extraBabelPlugins: [</span><br><span class=\"line\">    [<span class=\"string\">'babel-plugin-import'</span>, &#123;</span><br><span class=\"line\">      libraryName: <span class=\"string\">'antd'</span>,</span><br><span class=\"line\">      libraryDirectory: <span class=\"string\">'es'</span>,</span><br><span class=\"line\">      style: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开发调试包</p>\n<ul>\n<li><p>进入组件库根目录，执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据package.json上的配置，包被链接到全局（去全局找会发现那里是一个快捷方式指向本地组件库这里）</span></span><br><span class=\"line\">npm link</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>进入测试引用的项目，执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//链接本地组件库名（package.json内的名字）</span></span><br><span class=\"line\">npm link umi_cps</span><br><span class=\"line\"><span class=\"comment\">//链接完成，测试使用</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解除link</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解除项目和模块link，项目目录下</span></span><br><span class=\"line\">npm unlink 模块名</span><br><span class=\"line\"><span class=\"comment\">//解除模块全局link，模块目录下</span></span><br><span class=\"line\">npm unlink 模块名</span><br></pre></td></tr></table></figure>\n\n<p>Tip: 也可以在同一项目目录下，相对路径引入</p>\n</li>\n</ul>\n</li>\n<li><p>发布包</p>\n<ul>\n<li><p>注意切换镜像，我是用镜像管理工具，也可以直接使用npm config</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use npm <span class=\"comment\">//或者私服地址的镜像名 npm config set registry  https://xxxx.org</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>登录发布</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册账号（无账号网站注册或者使用命令行创建）</span></span><br><span class=\"line\">npm adduser</span><br><span class=\"line\">Username: xxx</span><br><span class=\"line\">Password: xxxxxx</span><br><span class=\"line\">Email: xxxx@gmail.com</span><br><span class=\"line\"><span class=\"comment\">// 登录</span></span><br><span class=\"line\">npm login</span><br><span class=\"line\">Username: xxx</span><br><span class=\"line\">Password: xxxxxx</span><br><span class=\"line\">Email: xxxx@gmail.com</span><br><span class=\"line\"><span class=\"comment\">// 发布</span></span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次提醒： 注意切换镜像！！！切换后要重新登录！</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"组件Demo\"><a href=\"#组件Demo\" class=\"headerlink\" title=\"组件Demo\"></a>组件Demo</h1><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install umi_cps</span><br></pre></td></tr></table></figure>\n\n<p>或者用yarn安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add umi_cps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; </span><br><span class=\"line\">  MgButton,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'umi_cps'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Demo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MgButton</span>&gt;</span>蘑菇的第一个button<span class=\"tag\">&lt;/<span class=\"name\">MgButton</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Demo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-组件开发调试\"><a href=\"#3-组件开发调试\" class=\"headerlink\" title=\"3.组件开发调试\"></a>3.组件开发调试</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run doc:dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-组件构建\"><a href=\"#4-组件构建\" class=\"headerlink\" title=\"4.组件构建\"></a>4.组件构建</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-构建使用文档\"><a href=\"#5-构建使用文档\" class=\"headerlink\" title=\"5.构建使用文档\"></a>5.构建使用文档</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-推送文档到远程git仓库发布\"><a href=\"#5-推送文档到远程git仓库发布\" class=\"headerlink\" title=\"5.推送文档到远程git仓库发布\"></a>5.推送文档到远程git仓库发布</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run doc:deploy</span><br></pre></td></tr></table></figure>"},{"date":"2018-01-09T16:00:00.000Z","_content":"## 1、ls 命令 : 显示目录内容列表\n\nLinux ls 命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。\n\n```\nls [-alrtAFR] [name...]\n```\n\n### 常用 options\n\n- -a 显示所有文件及目录 (ls 内定将文件名或目录名称开头为\".\"的视为隐藏档，不会列出)\n- -A 同 -a ,但不列出 \".\" (目前目录) 及 \"..\" (父目录)\n- -R 若目录下有文件,则以下之文件亦皆依序列出\n\n\n\n![ls-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaz9GKQicnztPXBDQFSmP9EyO4FWMDQCibqDNKda9YwYpgU3uYgL6IU5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## 2、rm 命令 : 删除文件/目录\n\nLinux rm 命令用于删除一个文件或者目录。\n\n```\nrm [options] [name...]\n```\n\n### **options:**\n\n- -i 删除前逐一询问确认\n- -r 或-R：递归处理，将指定目录下的所有文件与子目录一并处理\n- -f：强制删除文件或目录\n\n![rm-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicd2E651EgurUmagE4Vr7klGbkVpwDpibKKTny4EYpO6LibYaT3r9guoCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n![rm.png](https://mmbiz.qpic.cn/mmbiz_jpg/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicib6tZowDE15ZYaP1F8foz1iaZLvYUszZHaSBKRVPcSKcCTmtYCge1wsg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n## 3、tail 命令 : 查看文件内容\n\ntail 命令可用于查看文件的内容，有一个常用的参数 **-f** 常用于查阅正在改变的日志文件。\n\n**tail -f filename** 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。\n\n```\ntail [options][file]\n```\n\n### 常用 options:\n\n- -f 循环读取\n\n![tail-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSOhBAQA8FGTWKE3Ria005nCGng9VEhAelb1rvAh6XNKdbzgYP7FFvfw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **4、mv 命令 : 文件移动/改名**\n\nLinux mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。\n\n```\nmv [options] source dest\n# or\nmv [options] source... directory\n```\n\n### **options:**\n\n- -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件\n- -f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicjzOovSAqeIGa3TzyOTNT8xnAkibk4h5NmfgE92n5KYpkCkJeOybnoyA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n![mv-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicwOH2HFDnz01jiaPz0GOkwOiaQL5WxTiaNAoibplP0ACx1NbcLj9DJkJIOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **5、 touch 命令 : 新建文件**\n\nLinux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。\n\nls -l 可以显示档案的时间记录。\n\n```\ntouch [file]\n```\n\n\n\n![touch-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaPibkLMu2vnR2ibq3wT4LdQicF8SzMp13WS9LBdPWicGg9ICDHiacXoMbgw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## 6、which 命令 : 查找文件\n\nwhich 指令会在环境变量&dollar;PATH 设置的目录里查找符合条件的文件。\n\n```\nwhich [file...]\n```\n\n\n\n![which-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXichkcyiaogyuLb2mn0uuPrMx2IyiaFsYia6iaoSk1TAVGsjPTCqsjnTWprWA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## 7、cp 命令 : 复制文件/目录\n\nLinux cp 命令主要用于复制文件或目录。\n\n```\ncp [options] source dest\n# or\ncp [options] source... directory\n```\n\n### 常用 options:\n\n- -f：覆盖已经存在的目标文件而不给出提示。\n- -r：若给出的源文件是一个目录文件,此时将复制该目录下所有的子目录和文件。\n\n\n\n![cp-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXic1ALZfyfibz19SnwTmjVvXcaMyNZyk8ZHEeU4xiarfwiaMc66d8OsZEvzQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **8、cd 命令 : 切换工作目录**\n\nLinux cd 命令用于切换当前工作目录至 dirName(目录参数)。\n\n其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录,\"~\" 也表示为 home 目录 的意思\n\n```\ncd [dirName]\n```\n\n\n\n![cd-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicMg3ichZZSibVqSNS4QkqiakvSGiaxswic0zu8G4yW0vfkTnt3o7mb8Gvia5A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **9、pwd 命令 : 显示工作目录**\n\nLinux pwd 命令用于显示工作目录。\n\n执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n\n```\npwd\n```\n\n\n\n![pwd-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicYOxfsbO9nXHuva5KzjMy2o92a02GEsF3SZPQqPFnPKRnVMUeicVrlEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **10、 mkdir 命令 : 创建目录**\n\nLinux mkdir 命令用于建立名称为 dirName 之子目录。\n\n```\nmkdir [-p] dirName\n```\n\n### **options**\n\n- -p 确保目录名称存在,不存在的就建一个。\n\n\n\n![mkdir-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSiamgDAfeic1veWZR9yKtt7CC2P2V2BD1pV3hdrK6ZpcOQtItb4XkWeg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **11、 rmdir 命令 : 删除空目录**\n\nLinux rmdir 命令删除空的目录。\n\n```\nrmdir [-p] dirName\n```\n\n### **options**\n\n- -p 是当子目录被删除后使它也成为空目录的话,则顺便一并删除。\n\n\n\n![rmdir-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnzgdVKNpHPjeWeDMXQkqzukREibBRCwxic31B1P5r9VVRnr2PLTQAJcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **12、cat 命令 : 查看文件内容**\n\ncat 命令用于连接文件并打印到标准输出设备上。\n\n```\ncat fileName\n```\n\n\n\n![cat-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicUA0yuKeQ3VibumOYxO4AHfYrBuXDd2Bb8nsxtIzNusvSX1yTTNg5YtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **13、ping 命令 : 检测主机**\n\n执行 ping 指令会使用 ICMP 传输协议,发出要求回应的信息,若远端主机的网络功能没有问题,就会回应该信息,因而得知该主机运作正常。\n\n```\nping [主机名称或IP地址]\n```\n\n### **常用 options:**\n\n- -c<完成次数> 设置完成要求回应的次数。\n\n\n\n![ping-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXico9aWR3iazkLTlBHkjrjxGEDLS4cb4Ae5zTeHHfAq0kggRAPnycAwnJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **14、 telnet 命令 : 端口是否可访问**\n\n虽然 Linux telnet 命令主要用于远端登入。执行 telnet 指令开启终端机阶段作业,并登入远端主机,\n\n但是我更经常用它来查看某个远端主机端口是否可访问。\n\n```\ntelnet [主机名称或IP地址<通信端口>]\n```\n\n\n\n![telnet-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicGJ14ldzEMk8lO4FwlH5ARdWePhgjqqPK63uobKMQ5y5mzpjgkYJM5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **15、 grep 命令 : 查找关键字**\n\nLinux grep 命令用于查找文件里符合条件的字符串。\n\n```\ngrep [文件或目录...]\n```\n\n\n\n![grep-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnmh4N0IBp0XoOFsNzxsonqicAg3dTic65icBlCUDWo7x5pW5sReJYcMLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **16、ps 命令 : 显示当前进程状态**\n\nLinux ps 命令用于显示当前进程 (process) 的状态。\n\n```\nps [options]\n```\n\n### **常用 options**\n\n- -e 显示所有进程。\n- -f 全格式。\n\n\n```\nps -ef # 显示所有命令，连带命令行\n```\n\n## **17、| 命令 : 管道命令**\n\n通常情况下,我们只执行一条命令,那么如何执行多条命令呢？\n\n管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。\n\n- 只能处理前一条指令的正确输出，不能处理错误输出\n- 管道命令必须要能够接受来自前一个命令的数据成为 standard input 继续处理才行。\n\n\n\n![pipe-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicW0JTROaSt4XmWED6uAo8jIicRJ2KsODuYib9BAiagafJWtDuoMaodHTTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **18、 kill 命令 : 杀死进程**\n\nLinux kill 命令用于删除执行中的程序或工作。\n\nkill 可将指定的信息送至程序。预设的信息为 SIGTERM(15),可将指定程序终止。若仍无法终止该程序,可使用 SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。\n\n```\nkill [-s <信息名称或编号>][程序]　或　kill [-l <信息编号>]\n```\n\n\n\n![kill-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicIu4Rd9XzGelA6oRNVhHwpzVgInwDq2OQM2FlkJk8LkKg6y6ib10j8iag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **19、 top 命令 : 实时显示进程动态**\n\nLinux top 命令用于实时显示 process 的动态。\n\n```\ntop\n```\n\n### **常用 options:**\n\n- -pid 指定进程 id\n\n\n```\ntop -pid 4712\n```\n\n\n\n![top-example.gif](https://mmbiz.qpic.cn/mmbiz_gif/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicgUyjGHMO81bZJWFzkGfKjU1yKkRE4LRdJWc5wjEDibKGl8XicHnnVicicw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n\n\n## **20、 clear 命令 : 清除屏幕**\n\nLinux clear 命令用于清除屏幕。\n\n```\nclear\n```\n\n## **21、 alias 命令 : 别名配置**\n\nLinux alias 命令用于设置指令的别名。\n\n用户可利用 alias,自定指令的别名。若仅输入 alias,则可列出目前所有的别名设置。alias 的效力仅及于该次登入的操作。若要每次登入是即自动设好别名,可在.profile 或.cshrc 中设定指令的别名。\n\n```\nalias[别名]=[指令名称]\n```\n\n比如 git 原先就配置了一些别名,我们来看看\n\n\n\n![alias-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicDCebapv4Ung862KZncdSVLlgN2A7V4LBxKpBUOEX8InGWMd3m0X1VQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **22、 find 命令 : 查找文件**\n\nLinux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。\n\n如果使用该命令时,不设置任何参数,则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。\n\n```\nfind path -option [ -print ] [ -exec -ok command ] {} \\;\n```\n\n\n\n![find-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicKicJpTCNiaxldgYS2lYYfsol4TjGFwaCp7OuBH7VP8zWlCic3nPlzBMUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **23、 curl 命令 : 文件传输**\n\nlinux curl 是通过 url 语法在命令行下上传或下载文件的工具软件,它支持 http,https,ftp,ftps,telnet 等多种协议,常被用来抓取网页和监控 Web 服务器状态。\n\n```\ncurl [options] [url]\n```\n\n### 常用 options:\n\n- -o 把输出写到该文件中\n- -I 仅仅返回 header\n\ncurl 命令能做很多事,用过的人都说香,我说说我常用的场景吧:\n\n1. **调试请求**\n\n\n\n![curl-example-1.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicVfatkjFFzNATRFc4zG6ykxXv3s2uFqc4MGnpU0vzuuH6FWibjqMnJLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n1. **查看头部信息**\n\n\n\n![curl-example-3.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicu5P8OI6nNACZ44b4IYkzs98Z0UpqMCfIiayz3N91GPibLRvvdNl3iafww/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n1. **抓取网页**\n\n\n\n![curl-example-2.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicw40UlPPblJYKicMjNVlicia17aBoJuIZncVAqpxmx774X4hdTEWfpucqA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)","source":"_posts/前端应该会的23个linux常用命令.md","raw":"---\ndate: 2018-01-10\ncategories: \n- linux\ntags:\n- linux\n---\n## 1、ls 命令 : 显示目录内容列表\n\nLinux ls 命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。\n\n```\nls [-alrtAFR] [name...]\n```\n\n### 常用 options\n\n- -a 显示所有文件及目录 (ls 内定将文件名或目录名称开头为\".\"的视为隐藏档，不会列出)\n- -A 同 -a ,但不列出 \".\" (目前目录) 及 \"..\" (父目录)\n- -R 若目录下有文件,则以下之文件亦皆依序列出\n\n\n\n![ls-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaz9GKQicnztPXBDQFSmP9EyO4FWMDQCibqDNKda9YwYpgU3uYgL6IU5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## 2、rm 命令 : 删除文件/目录\n\nLinux rm 命令用于删除一个文件或者目录。\n\n```\nrm [options] [name...]\n```\n\n### **options:**\n\n- -i 删除前逐一询问确认\n- -r 或-R：递归处理，将指定目录下的所有文件与子目录一并处理\n- -f：强制删除文件或目录\n\n![rm-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicd2E651EgurUmagE4Vr7klGbkVpwDpibKKTny4EYpO6LibYaT3r9guoCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n![rm.png](https://mmbiz.qpic.cn/mmbiz_jpg/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicib6tZowDE15ZYaP1F8foz1iaZLvYUszZHaSBKRVPcSKcCTmtYCge1wsg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n## 3、tail 命令 : 查看文件内容\n\ntail 命令可用于查看文件的内容，有一个常用的参数 **-f** 常用于查阅正在改变的日志文件。\n\n**tail -f filename** 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。\n\n```\ntail [options][file]\n```\n\n### 常用 options:\n\n- -f 循环读取\n\n![tail-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSOhBAQA8FGTWKE3Ria005nCGng9VEhAelb1rvAh6XNKdbzgYP7FFvfw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **4、mv 命令 : 文件移动/改名**\n\nLinux mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。\n\n```\nmv [options] source dest\n# or\nmv [options] source... directory\n```\n\n### **options:**\n\n- -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件\n- -f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicjzOovSAqeIGa3TzyOTNT8xnAkibk4h5NmfgE92n5KYpkCkJeOybnoyA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n![mv-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicwOH2HFDnz01jiaPz0GOkwOiaQL5WxTiaNAoibplP0ACx1NbcLj9DJkJIOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **5、 touch 命令 : 新建文件**\n\nLinux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。\n\nls -l 可以显示档案的时间记录。\n\n```\ntouch [file]\n```\n\n\n\n![touch-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaPibkLMu2vnR2ibq3wT4LdQicF8SzMp13WS9LBdPWicGg9ICDHiacXoMbgw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## 6、which 命令 : 查找文件\n\nwhich 指令会在环境变量&dollar;PATH 设置的目录里查找符合条件的文件。\n\n```\nwhich [file...]\n```\n\n\n\n![which-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXichkcyiaogyuLb2mn0uuPrMx2IyiaFsYia6iaoSk1TAVGsjPTCqsjnTWprWA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## 7、cp 命令 : 复制文件/目录\n\nLinux cp 命令主要用于复制文件或目录。\n\n```\ncp [options] source dest\n# or\ncp [options] source... directory\n```\n\n### 常用 options:\n\n- -f：覆盖已经存在的目标文件而不给出提示。\n- -r：若给出的源文件是一个目录文件,此时将复制该目录下所有的子目录和文件。\n\n\n\n![cp-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXic1ALZfyfibz19SnwTmjVvXcaMyNZyk8ZHEeU4xiarfwiaMc66d8OsZEvzQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **8、cd 命令 : 切换工作目录**\n\nLinux cd 命令用于切换当前工作目录至 dirName(目录参数)。\n\n其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录,\"~\" 也表示为 home 目录 的意思\n\n```\ncd [dirName]\n```\n\n\n\n![cd-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicMg3ichZZSibVqSNS4QkqiakvSGiaxswic0zu8G4yW0vfkTnt3o7mb8Gvia5A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **9、pwd 命令 : 显示工作目录**\n\nLinux pwd 命令用于显示工作目录。\n\n执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n\n```\npwd\n```\n\n\n\n![pwd-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicYOxfsbO9nXHuva5KzjMy2o92a02GEsF3SZPQqPFnPKRnVMUeicVrlEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **10、 mkdir 命令 : 创建目录**\n\nLinux mkdir 命令用于建立名称为 dirName 之子目录。\n\n```\nmkdir [-p] dirName\n```\n\n### **options**\n\n- -p 确保目录名称存在,不存在的就建一个。\n\n\n\n![mkdir-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSiamgDAfeic1veWZR9yKtt7CC2P2V2BD1pV3hdrK6ZpcOQtItb4XkWeg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **11、 rmdir 命令 : 删除空目录**\n\nLinux rmdir 命令删除空的目录。\n\n```\nrmdir [-p] dirName\n```\n\n### **options**\n\n- -p 是当子目录被删除后使它也成为空目录的话,则顺便一并删除。\n\n\n\n![rmdir-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnzgdVKNpHPjeWeDMXQkqzukREibBRCwxic31B1P5r9VVRnr2PLTQAJcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **12、cat 命令 : 查看文件内容**\n\ncat 命令用于连接文件并打印到标准输出设备上。\n\n```\ncat fileName\n```\n\n\n\n![cat-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicUA0yuKeQ3VibumOYxO4AHfYrBuXDd2Bb8nsxtIzNusvSX1yTTNg5YtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **13、ping 命令 : 检测主机**\n\n执行 ping 指令会使用 ICMP 传输协议,发出要求回应的信息,若远端主机的网络功能没有问题,就会回应该信息,因而得知该主机运作正常。\n\n```\nping [主机名称或IP地址]\n```\n\n### **常用 options:**\n\n- -c<完成次数> 设置完成要求回应的次数。\n\n\n\n![ping-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXico9aWR3iazkLTlBHkjrjxGEDLS4cb4Ae5zTeHHfAq0kggRAPnycAwnJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **14、 telnet 命令 : 端口是否可访问**\n\n虽然 Linux telnet 命令主要用于远端登入。执行 telnet 指令开启终端机阶段作业,并登入远端主机,\n\n但是我更经常用它来查看某个远端主机端口是否可访问。\n\n```\ntelnet [主机名称或IP地址<通信端口>]\n```\n\n\n\n![telnet-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicGJ14ldzEMk8lO4FwlH5ARdWePhgjqqPK63uobKMQ5y5mzpjgkYJM5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **15、 grep 命令 : 查找关键字**\n\nLinux grep 命令用于查找文件里符合条件的字符串。\n\n```\ngrep [文件或目录...]\n```\n\n\n\n![grep-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnmh4N0IBp0XoOFsNzxsonqicAg3dTic65icBlCUDWo7x5pW5sReJYcMLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **16、ps 命令 : 显示当前进程状态**\n\nLinux ps 命令用于显示当前进程 (process) 的状态。\n\n```\nps [options]\n```\n\n### **常用 options**\n\n- -e 显示所有进程。\n- -f 全格式。\n\n\n```\nps -ef # 显示所有命令，连带命令行\n```\n\n## **17、| 命令 : 管道命令**\n\n通常情况下,我们只执行一条命令,那么如何执行多条命令呢？\n\n管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。\n\n- 只能处理前一条指令的正确输出，不能处理错误输出\n- 管道命令必须要能够接受来自前一个命令的数据成为 standard input 继续处理才行。\n\n\n\n![pipe-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicW0JTROaSt4XmWED6uAo8jIicRJ2KsODuYib9BAiagafJWtDuoMaodHTTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **18、 kill 命令 : 杀死进程**\n\nLinux kill 命令用于删除执行中的程序或工作。\n\nkill 可将指定的信息送至程序。预设的信息为 SIGTERM(15),可将指定程序终止。若仍无法终止该程序,可使用 SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。\n\n```\nkill [-s <信息名称或编号>][程序]　或　kill [-l <信息编号>]\n```\n\n\n\n![kill-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicIu4Rd9XzGelA6oRNVhHwpzVgInwDq2OQM2FlkJk8LkKg6y6ib10j8iag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **19、 top 命令 : 实时显示进程动态**\n\nLinux top 命令用于实时显示 process 的动态。\n\n```\ntop\n```\n\n### **常用 options:**\n\n- -pid 指定进程 id\n\n\n```\ntop -pid 4712\n```\n\n\n\n![top-example.gif](https://mmbiz.qpic.cn/mmbiz_gif/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicgUyjGHMO81bZJWFzkGfKjU1yKkRE4LRdJWc5wjEDibKGl8XicHnnVicicw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n\n\n## **20、 clear 命令 : 清除屏幕**\n\nLinux clear 命令用于清除屏幕。\n\n```\nclear\n```\n\n## **21、 alias 命令 : 别名配置**\n\nLinux alias 命令用于设置指令的别名。\n\n用户可利用 alias,自定指令的别名。若仅输入 alias,则可列出目前所有的别名设置。alias 的效力仅及于该次登入的操作。若要每次登入是即自动设好别名,可在.profile 或.cshrc 中设定指令的别名。\n\n```\nalias[别名]=[指令名称]\n```\n\n比如 git 原先就配置了一些别名,我们来看看\n\n\n\n![alias-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicDCebapv4Ung862KZncdSVLlgN2A7V4LBxKpBUOEX8InGWMd3m0X1VQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **22、 find 命令 : 查找文件**\n\nLinux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。\n\n如果使用该命令时,不设置任何参数,则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。\n\n```\nfind path -option [ -print ] [ -exec -ok command ] {} \\;\n```\n\n\n\n![find-example.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicKicJpTCNiaxldgYS2lYYfsol4TjGFwaCp7OuBH7VP8zWlCic3nPlzBMUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n## **23、 curl 命令 : 文件传输**\n\nlinux curl 是通过 url 语法在命令行下上传或下载文件的工具软件,它支持 http,https,ftp,ftps,telnet 等多种协议,常被用来抓取网页和监控 Web 服务器状态。\n\n```\ncurl [options] [url]\n```\n\n### 常用 options:\n\n- -o 把输出写到该文件中\n- -I 仅仅返回 header\n\ncurl 命令能做很多事,用过的人都说香,我说说我常用的场景吧:\n\n1. **调试请求**\n\n\n\n![curl-example-1.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicVfatkjFFzNATRFc4zG6ykxXv3s2uFqc4MGnpU0vzuuH6FWibjqMnJLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n1. **查看头部信息**\n\n\n\n![curl-example-3.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicu5P8OI6nNACZ44b4IYkzs98Z0UpqMCfIiayz3N91GPibLRvvdNl3iafww/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n1. **抓取网页**\n\n\n\n![curl-example-2.png](https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicw40UlPPblJYKicMjNVlicia17aBoJuIZncVAqpxmx774X4hdTEWfpucqA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)","slug":"前端应该会的23个linux常用命令","published":1,"updated":"2020-07-17T11:57:08.629Z","title":"前端应该会的23个linux常用命令","_id":"ckcotxgue000hp8vo8ps9f7sd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1、ls-命令-显示目录内容列表\"><a href=\"#1、ls-命令-显示目录内容列表\" class=\"headerlink\" title=\"1、ls 命令 : 显示目录内容列表\"></a>1、ls 命令 : 显示目录内容列表</h2><p>Linux ls 命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [-alrtAFR] [name...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options\"><a href=\"#常用-options\" class=\"headerlink\" title=\"常用 options\"></a>常用 options</h3><ul>\n<li>-a 显示所有文件及目录 (ls 内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出)</li>\n<li>-A 同 -a ,但不列出 “.” (目前目录) 及 “..” (父目录)</li>\n<li>-R 若目录下有文件,则以下之文件亦皆依序列出</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaz9GKQicnztPXBDQFSmP9EyO4FWMDQCibqDNKda9YwYpgU3uYgL6IU5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"ls-example.png\"></p>\n<h2 id=\"2、rm-命令-删除文件-目录\"><a href=\"#2、rm-命令-删除文件-目录\" class=\"headerlink\" title=\"2、rm 命令 : 删除文件/目录\"></a>2、rm 命令 : 删除文件/目录</h2><p>Linux rm 命令用于删除一个文件或者目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [options] [name...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options:\"></a><strong>options:</strong></h3><ul>\n<li>-i 删除前逐一询问确认</li>\n<li>-r 或-R：递归处理，将指定目录下的所有文件与子目录一并处理</li>\n<li>-f：强制删除文件或目录</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicd2E651EgurUmagE4Vr7klGbkVpwDpibKKTny4EYpO6LibYaT3r9guoCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"rm-example.png\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicib6tZowDE15ZYaP1F8foz1iaZLvYUszZHaSBKRVPcSKcCTmtYCge1wsg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"rm.png\"></p>\n<h2 id=\"3、tail-命令-查看文件内容\"><a href=\"#3、tail-命令-查看文件内容\" class=\"headerlink\" title=\"3、tail 命令 : 查看文件内容\"></a>3、tail 命令 : 查看文件内容</h2><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>\n<p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail [options][file]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-1\"><a href=\"#常用-options-1\" class=\"headerlink\" title=\"常用 options:\"></a>常用 options:</h3><ul>\n<li>-f 循环读取</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSOhBAQA8FGTWKE3Ria005nCGng9VEhAelb1rvAh6XNKdbzgYP7FFvfw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"tail-example.png\"></p>\n<h2 id=\"4、mv-命令-文件移动-改名\"><a href=\"#4、mv-命令-文件移动-改名\" class=\"headerlink\" title=\"4、mv 命令 : 文件移动/改名\"></a><strong>4、mv 命令 : 文件移动/改名</strong></h2><p>Linux mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv [options] source dest</span><br><span class=\"line\"># or</span><br><span class=\"line\">mv [options] source... directory</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options-1\"><a href=\"#options-1\" class=\"headerlink\" title=\"options:\"></a><strong>options:</strong></h3><ul>\n<li>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件</li>\n<li>-f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicjzOovSAqeIGa3TzyOTNT8xnAkibk4h5NmfgE92n5KYpkCkJeOybnoyA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicwOH2HFDnz01jiaPz0GOkwOiaQL5WxTiaNAoibplP0ACx1NbcLj9DJkJIOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"mv-example.png\"></p>\n<h2 id=\"5、-touch-命令-新建文件\"><a href=\"#5、-touch-命令-新建文件\" class=\"headerlink\" title=\"5、 touch 命令 : 新建文件\"></a><strong>5、 touch 命令 : 新建文件</strong></h2><p>Linux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。</p>\n<p>ls -l 可以显示档案的时间记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [file]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaPibkLMu2vnR2ibq3wT4LdQicF8SzMp13WS9LBdPWicGg9ICDHiacXoMbgw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"touch-example.png\"></p>\n<h2 id=\"6、which-命令-查找文件\"><a href=\"#6、which-命令-查找文件\" class=\"headerlink\" title=\"6、which 命令 : 查找文件\"></a>6、which 命令 : 查找文件</h2><p>which 指令会在环境变量&dollar;PATH 设置的目录里查找符合条件的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which [file...]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXichkcyiaogyuLb2mn0uuPrMx2IyiaFsYia6iaoSk1TAVGsjPTCqsjnTWprWA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"which-example.png\"></p>\n<h2 id=\"7、cp-命令-复制文件-目录\"><a href=\"#7、cp-命令-复制文件-目录\" class=\"headerlink\" title=\"7、cp 命令 : 复制文件/目录\"></a>7、cp 命令 : 复制文件/目录</h2><p>Linux cp 命令主要用于复制文件或目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [options] source dest</span><br><span class=\"line\"># or</span><br><span class=\"line\">cp [options] source... directory</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-2\"><a href=\"#常用-options-2\" class=\"headerlink\" title=\"常用 options:\"></a>常用 options:</h3><ul>\n<li>-f：覆盖已经存在的目标文件而不给出提示。</li>\n<li>-r：若给出的源文件是一个目录文件,此时将复制该目录下所有的子目录和文件。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXic1ALZfyfibz19SnwTmjVvXcaMyNZyk8ZHEeU4xiarfwiaMc66d8OsZEvzQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cp-example.png\"></p>\n<h2 id=\"8、cd-命令-切换工作目录\"><a href=\"#8、cd-命令-切换工作目录\" class=\"headerlink\" title=\"8、cd 命令 : 切换工作目录\"></a><strong>8、cd 命令 : 切换工作目录</strong></h2><p>Linux cd 命令用于切换当前工作目录至 dirName(目录参数)。</p>\n<p>其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录,”~” 也表示为 home 目录 的意思</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [dirName]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicMg3ichZZSibVqSNS4QkqiakvSGiaxswic0zu8G4yW0vfkTnt3o7mb8Gvia5A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cd-example.png\"></p>\n<h2 id=\"9、pwd-命令-显示工作目录\"><a href=\"#9、pwd-命令-显示工作目录\" class=\"headerlink\" title=\"9、pwd 命令 : 显示工作目录\"></a><strong>9、pwd 命令 : 显示工作目录</strong></h2><p>Linux pwd 命令用于显示工作目录。</p>\n<p>执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicYOxfsbO9nXHuva5KzjMy2o92a02GEsF3SZPQqPFnPKRnVMUeicVrlEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"pwd-example.png\"></p>\n<h2 id=\"10、-mkdir-命令-创建目录\"><a href=\"#10、-mkdir-命令-创建目录\" class=\"headerlink\" title=\"10、 mkdir 命令 : 创建目录\"></a><strong>10、 mkdir 命令 : 创建目录</strong></h2><p>Linux mkdir 命令用于建立名称为 dirName 之子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [-p] dirName</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options-2\"><a href=\"#options-2\" class=\"headerlink\" title=\"options\"></a><strong>options</strong></h3><ul>\n<li>-p 确保目录名称存在,不存在的就建一个。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSiamgDAfeic1veWZR9yKtt7CC2P2V2BD1pV3hdrK6ZpcOQtItb4XkWeg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"mkdir-example.png\"></p>\n<h2 id=\"11、-rmdir-命令-删除空目录\"><a href=\"#11、-rmdir-命令-删除空目录\" class=\"headerlink\" title=\"11、 rmdir 命令 : 删除空目录\"></a><strong>11、 rmdir 命令 : 删除空目录</strong></h2><p>Linux rmdir 命令删除空的目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [-p] dirName</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options-3\"><a href=\"#options-3\" class=\"headerlink\" title=\"options\"></a><strong>options</strong></h3><ul>\n<li>-p 是当子目录被删除后使它也成为空目录的话,则顺便一并删除。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnzgdVKNpHPjeWeDMXQkqzukREibBRCwxic31B1P5r9VVRnr2PLTQAJcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"rmdir-example.png\"></p>\n<h2 id=\"12、cat-命令-查看文件内容\"><a href=\"#12、cat-命令-查看文件内容\" class=\"headerlink\" title=\"12、cat 命令 : 查看文件内容\"></a><strong>12、cat 命令 : 查看文件内容</strong></h2><p>cat 命令用于连接文件并打印到标准输出设备上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat fileName</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicUA0yuKeQ3VibumOYxO4AHfYrBuXDd2Bb8nsxtIzNusvSX1yTTNg5YtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cat-example.png\"></p>\n<h2 id=\"13、ping-命令-检测主机\"><a href=\"#13、ping-命令-检测主机\" class=\"headerlink\" title=\"13、ping 命令 : 检测主机\"></a><strong>13、ping 命令 : 检测主机</strong></h2><p>执行 ping 指令会使用 ICMP 传输协议,发出要求回应的信息,若远端主机的网络功能没有问题,就会回应该信息,因而得知该主机运作正常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping [主机名称或IP地址]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-3\"><a href=\"#常用-options-3\" class=\"headerlink\" title=\"常用 options:\"></a><strong>常用 options:</strong></h3><ul>\n<li>-c&lt;完成次数&gt; 设置完成要求回应的次数。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXico9aWR3iazkLTlBHkjrjxGEDLS4cb4Ae5zTeHHfAq0kggRAPnycAwnJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"ping-example.png\"></p>\n<h2 id=\"14、-telnet-命令-端口是否可访问\"><a href=\"#14、-telnet-命令-端口是否可访问\" class=\"headerlink\" title=\"14、 telnet 命令 : 端口是否可访问\"></a><strong>14、 telnet 命令 : 端口是否可访问</strong></h2><p>虽然 Linux telnet 命令主要用于远端登入。执行 telnet 指令开启终端机阶段作业,并登入远端主机,</p>\n<p>但是我更经常用它来查看某个远端主机端口是否可访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet [主机名称或IP地址&lt;通信端口&gt;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicGJ14ldzEMk8lO4FwlH5ARdWePhgjqqPK63uobKMQ5y5mzpjgkYJM5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"telnet-example.png\"></p>\n<h2 id=\"15、-grep-命令-查找关键字\"><a href=\"#15、-grep-命令-查找关键字\" class=\"headerlink\" title=\"15、 grep 命令 : 查找关键字\"></a><strong>15、 grep 命令 : 查找关键字</strong></h2><p>Linux grep 命令用于查找文件里符合条件的字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [文件或目录...]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnmh4N0IBp0XoOFsNzxsonqicAg3dTic65icBlCUDWo7x5pW5sReJYcMLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"grep-example.png\"></p>\n<h2 id=\"16、ps-命令-显示当前进程状态\"><a href=\"#16、ps-命令-显示当前进程状态\" class=\"headerlink\" title=\"16、ps 命令 : 显示当前进程状态\"></a><strong>16、ps 命令 : 显示当前进程状态</strong></h2><p>Linux ps 命令用于显示当前进程 (process) 的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [options]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-4\"><a href=\"#常用-options-4\" class=\"headerlink\" title=\"常用 options\"></a><strong>常用 options</strong></h3><ul>\n<li>-e 显示所有进程。</li>\n<li>-f 全格式。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef # 显示所有命令，连带命令行</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17、-命令-管道命令\"><a href=\"#17、-命令-管道命令\" class=\"headerlink\" title=\"17、| 命令 : 管道命令\"></a><strong>17、| 命令 : 管道命令</strong></h2><p>通常情况下,我们只执行一条命令,那么如何执行多条命令呢？</p>\n<p>管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。</p>\n<ul>\n<li>只能处理前一条指令的正确输出，不能处理错误输出</li>\n<li>管道命令必须要能够接受来自前一个命令的数据成为 standard input 继续处理才行。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicW0JTROaSt4XmWED6uAo8jIicRJ2KsODuYib9BAiagafJWtDuoMaodHTTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"pipe-example.png\"></p>\n<h2 id=\"18、-kill-命令-杀死进程\"><a href=\"#18、-kill-命令-杀死进程\" class=\"headerlink\" title=\"18、 kill 命令 : 杀死进程\"></a><strong>18、 kill 命令 : 杀死进程</strong></h2><p>Linux kill 命令用于删除执行中的程序或工作。</p>\n<p>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15),可将指定程序终止。若仍无法终止该程序,可使用 SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicIu4Rd9XzGelA6oRNVhHwpzVgInwDq2OQM2FlkJk8LkKg6y6ib10j8iag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"kill-example.png\"></p>\n<h2 id=\"19、-top-命令-实时显示进程动态\"><a href=\"#19、-top-命令-实时显示进程动态\" class=\"headerlink\" title=\"19、 top 命令 : 实时显示进程动态\"></a><strong>19、 top 命令 : 实时显示进程动态</strong></h2><p>Linux top 命令用于实时显示 process 的动态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-5\"><a href=\"#常用-options-5\" class=\"headerlink\" title=\"常用 options:\"></a><strong>常用 options:</strong></h3><ul>\n<li>-pid 指定进程 id</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -pid 4712</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicgUyjGHMO81bZJWFzkGfKjU1yKkRE4LRdJWc5wjEDibKGl8XicHnnVicicw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"top-example.gif\"></p>\n<h2 id=\"20、-clear-命令-清除屏幕\"><a href=\"#20、-clear-命令-清除屏幕\" class=\"headerlink\" title=\"20、 clear 命令 : 清除屏幕\"></a><strong>20、 clear 命令 : 清除屏幕</strong></h2><p>Linux clear 命令用于清除屏幕。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21、-alias-命令-别名配置\"><a href=\"#21、-alias-命令-别名配置\" class=\"headerlink\" title=\"21、 alias 命令 : 别名配置\"></a><strong>21、 alias 命令 : 别名配置</strong></h2><p>Linux alias 命令用于设置指令的别名。</p>\n<p>用户可利用 alias,自定指令的别名。若仅输入 alias,则可列出目前所有的别名设置。alias 的效力仅及于该次登入的操作。若要每次登入是即自动设好别名,可在.profile 或.cshrc 中设定指令的别名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias[别名]&#x3D;[指令名称]</span><br></pre></td></tr></table></figure>\n\n<p>比如 git 原先就配置了一些别名,我们来看看</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicDCebapv4Ung862KZncdSVLlgN2A7V4LBxKpBUOEX8InGWMd3m0X1VQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"alias-example.png\"></p>\n<h2 id=\"22、-find-命令-查找文件\"><a href=\"#22、-find-命令-查找文件\" class=\"headerlink\" title=\"22、 find 命令 : 查找文件\"></a><strong>22、 find 命令 : 查找文件</strong></h2><p>Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。</p>\n<p>如果使用该命令时,不设置任何参数,则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find path -option [ -print ] [ -exec -ok command ] &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicKicJpTCNiaxldgYS2lYYfsol4TjGFwaCp7OuBH7VP8zWlCic3nPlzBMUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"find-example.png\"></p>\n<h2 id=\"23、-curl-命令-文件传输\"><a href=\"#23、-curl-命令-文件传输\" class=\"headerlink\" title=\"23、 curl 命令 : 文件传输\"></a><strong>23、 curl 命令 : 文件传输</strong></h2><p>linux curl 是通过 url 语法在命令行下上传或下载文件的工具软件,它支持 http,https,ftp,ftps,telnet 等多种协议,常被用来抓取网页和监控 Web 服务器状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl [options] [url]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-6\"><a href=\"#常用-options-6\" class=\"headerlink\" title=\"常用 options:\"></a>常用 options:</h3><ul>\n<li>-o 把输出写到该文件中</li>\n<li>-I 仅仅返回 header</li>\n</ul>\n<p>curl 命令能做很多事,用过的人都说香,我说说我常用的场景吧:</p>\n<ol>\n<li><strong>调试请求</strong></li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicVfatkjFFzNATRFc4zG6ykxXv3s2uFqc4MGnpU0vzuuH6FWibjqMnJLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"curl-example-1.png\"></p>\n<ol>\n<li><strong>查看头部信息</strong></li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicu5P8OI6nNACZ44b4IYkzs98Z0UpqMCfIiayz3N91GPibLRvvdNl3iafww/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"curl-example-3.png\"></p>\n<ol>\n<li><strong>抓取网页</strong></li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicw40UlPPblJYKicMjNVlicia17aBoJuIZncVAqpxmx774X4hdTEWfpucqA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"curl-example-2.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、ls-命令-显示目录内容列表\"><a href=\"#1、ls-命令-显示目录内容列表\" class=\"headerlink\" title=\"1、ls 命令 : 显示目录内容列表\"></a>1、ls 命令 : 显示目录内容列表</h2><p>Linux ls 命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [-alrtAFR] [name...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options\"><a href=\"#常用-options\" class=\"headerlink\" title=\"常用 options\"></a>常用 options</h3><ul>\n<li>-a 显示所有文件及目录 (ls 内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出)</li>\n<li>-A 同 -a ,但不列出 “.” (目前目录) 及 “..” (父目录)</li>\n<li>-R 若目录下有文件,则以下之文件亦皆依序列出</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaz9GKQicnztPXBDQFSmP9EyO4FWMDQCibqDNKda9YwYpgU3uYgL6IU5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"ls-example.png\"></p>\n<h2 id=\"2、rm-命令-删除文件-目录\"><a href=\"#2、rm-命令-删除文件-目录\" class=\"headerlink\" title=\"2、rm 命令 : 删除文件/目录\"></a>2、rm 命令 : 删除文件/目录</h2><p>Linux rm 命令用于删除一个文件或者目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [options] [name...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options:\"></a><strong>options:</strong></h3><ul>\n<li>-i 删除前逐一询问确认</li>\n<li>-r 或-R：递归处理，将指定目录下的所有文件与子目录一并处理</li>\n<li>-f：强制删除文件或目录</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicd2E651EgurUmagE4Vr7klGbkVpwDpibKKTny4EYpO6LibYaT3r9guoCw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"rm-example.png\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicib6tZowDE15ZYaP1F8foz1iaZLvYUszZHaSBKRVPcSKcCTmtYCge1wsg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"rm.png\"></p>\n<h2 id=\"3、tail-命令-查看文件内容\"><a href=\"#3、tail-命令-查看文件内容\" class=\"headerlink\" title=\"3、tail 命令 : 查看文件内容\"></a>3、tail 命令 : 查看文件内容</h2><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>\n<p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail [options][file]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-1\"><a href=\"#常用-options-1\" class=\"headerlink\" title=\"常用 options:\"></a>常用 options:</h3><ul>\n<li>-f 循环读取</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSOhBAQA8FGTWKE3Ria005nCGng9VEhAelb1rvAh6XNKdbzgYP7FFvfw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"tail-example.png\"></p>\n<h2 id=\"4、mv-命令-文件移动-改名\"><a href=\"#4、mv-命令-文件移动-改名\" class=\"headerlink\" title=\"4、mv 命令 : 文件移动/改名\"></a><strong>4、mv 命令 : 文件移动/改名</strong></h2><p>Linux mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv [options] source dest</span><br><span class=\"line\"># or</span><br><span class=\"line\">mv [options] source... directory</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options-1\"><a href=\"#options-1\" class=\"headerlink\" title=\"options:\"></a><strong>options:</strong></h3><ul>\n<li>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件</li>\n<li>-f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicjzOovSAqeIGa3TzyOTNT8xnAkibk4h5NmfgE92n5KYpkCkJeOybnoyA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicwOH2HFDnz01jiaPz0GOkwOiaQL5WxTiaNAoibplP0ACx1NbcLj9DJkJIOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"mv-example.png\"></p>\n<h2 id=\"5、-touch-命令-新建文件\"><a href=\"#5、-touch-命令-新建文件\" class=\"headerlink\" title=\"5、 touch 命令 : 新建文件\"></a><strong>5、 touch 命令 : 新建文件</strong></h2><p>Linux touch 命令用于修改文件或者目录的时间属性,包括存取时间和更改时间。若文件不存在,系统会建立一个新的文件。</p>\n<p>ls -l 可以显示档案的时间记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch [file]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXiciaPibkLMu2vnR2ibq3wT4LdQicF8SzMp13WS9LBdPWicGg9ICDHiacXoMbgw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"touch-example.png\"></p>\n<h2 id=\"6、which-命令-查找文件\"><a href=\"#6、which-命令-查找文件\" class=\"headerlink\" title=\"6、which 命令 : 查找文件\"></a>6、which 命令 : 查找文件</h2><p>which 指令会在环境变量&dollar;PATH 设置的目录里查找符合条件的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which [file...]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXichkcyiaogyuLb2mn0uuPrMx2IyiaFsYia6iaoSk1TAVGsjPTCqsjnTWprWA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"which-example.png\"></p>\n<h2 id=\"7、cp-命令-复制文件-目录\"><a href=\"#7、cp-命令-复制文件-目录\" class=\"headerlink\" title=\"7、cp 命令 : 复制文件/目录\"></a>7、cp 命令 : 复制文件/目录</h2><p>Linux cp 命令主要用于复制文件或目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [options] source dest</span><br><span class=\"line\"># or</span><br><span class=\"line\">cp [options] source... directory</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-2\"><a href=\"#常用-options-2\" class=\"headerlink\" title=\"常用 options:\"></a>常用 options:</h3><ul>\n<li>-f：覆盖已经存在的目标文件而不给出提示。</li>\n<li>-r：若给出的源文件是一个目录文件,此时将复制该目录下所有的子目录和文件。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXic1ALZfyfibz19SnwTmjVvXcaMyNZyk8ZHEeU4xiarfwiaMc66d8OsZEvzQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cp-example.png\"></p>\n<h2 id=\"8、cd-命令-切换工作目录\"><a href=\"#8、cd-命令-切换工作目录\" class=\"headerlink\" title=\"8、cd 命令 : 切换工作目录\"></a><strong>8、cd 命令 : 切换工作目录</strong></h2><p>Linux cd 命令用于切换当前工作目录至 dirName(目录参数)。</p>\n<p>其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录,”~” 也表示为 home 目录 的意思</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [dirName]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicMg3ichZZSibVqSNS4QkqiakvSGiaxswic0zu8G4yW0vfkTnt3o7mb8Gvia5A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cd-example.png\"></p>\n<h2 id=\"9、pwd-命令-显示工作目录\"><a href=\"#9、pwd-命令-显示工作目录\" class=\"headerlink\" title=\"9、pwd 命令 : 显示工作目录\"></a><strong>9、pwd 命令 : 显示工作目录</strong></h2><p>Linux pwd 命令用于显示工作目录。</p>\n<p>执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicYOxfsbO9nXHuva5KzjMy2o92a02GEsF3SZPQqPFnPKRnVMUeicVrlEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"pwd-example.png\"></p>\n<h2 id=\"10、-mkdir-命令-创建目录\"><a href=\"#10、-mkdir-命令-创建目录\" class=\"headerlink\" title=\"10、 mkdir 命令 : 创建目录\"></a><strong>10、 mkdir 命令 : 创建目录</strong></h2><p>Linux mkdir 命令用于建立名称为 dirName 之子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [-p] dirName</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options-2\"><a href=\"#options-2\" class=\"headerlink\" title=\"options\"></a><strong>options</strong></h3><ul>\n<li>-p 确保目录名称存在,不存在的就建一个。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicSiamgDAfeic1veWZR9yKtt7CC2P2V2BD1pV3hdrK6ZpcOQtItb4XkWeg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"mkdir-example.png\"></p>\n<h2 id=\"11、-rmdir-命令-删除空目录\"><a href=\"#11、-rmdir-命令-删除空目录\" class=\"headerlink\" title=\"11、 rmdir 命令 : 删除空目录\"></a><strong>11、 rmdir 命令 : 删除空目录</strong></h2><p>Linux rmdir 命令删除空的目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir [-p] dirName</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"options-3\"><a href=\"#options-3\" class=\"headerlink\" title=\"options\"></a><strong>options</strong></h3><ul>\n<li>-p 是当子目录被删除后使它也成为空目录的话,则顺便一并删除。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnzgdVKNpHPjeWeDMXQkqzukREibBRCwxic31B1P5r9VVRnr2PLTQAJcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"rmdir-example.png\"></p>\n<h2 id=\"12、cat-命令-查看文件内容\"><a href=\"#12、cat-命令-查看文件内容\" class=\"headerlink\" title=\"12、cat 命令 : 查看文件内容\"></a><strong>12、cat 命令 : 查看文件内容</strong></h2><p>cat 命令用于连接文件并打印到标准输出设备上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat fileName</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicUA0yuKeQ3VibumOYxO4AHfYrBuXDd2Bb8nsxtIzNusvSX1yTTNg5YtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"cat-example.png\"></p>\n<h2 id=\"13、ping-命令-检测主机\"><a href=\"#13、ping-命令-检测主机\" class=\"headerlink\" title=\"13、ping 命令 : 检测主机\"></a><strong>13、ping 命令 : 检测主机</strong></h2><p>执行 ping 指令会使用 ICMP 传输协议,发出要求回应的信息,若远端主机的网络功能没有问题,就会回应该信息,因而得知该主机运作正常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping [主机名称或IP地址]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-3\"><a href=\"#常用-options-3\" class=\"headerlink\" title=\"常用 options:\"></a><strong>常用 options:</strong></h3><ul>\n<li>-c&lt;完成次数&gt; 设置完成要求回应的次数。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXico9aWR3iazkLTlBHkjrjxGEDLS4cb4Ae5zTeHHfAq0kggRAPnycAwnJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"ping-example.png\"></p>\n<h2 id=\"14、-telnet-命令-端口是否可访问\"><a href=\"#14、-telnet-命令-端口是否可访问\" class=\"headerlink\" title=\"14、 telnet 命令 : 端口是否可访问\"></a><strong>14、 telnet 命令 : 端口是否可访问</strong></h2><p>虽然 Linux telnet 命令主要用于远端登入。执行 telnet 指令开启终端机阶段作业,并登入远端主机,</p>\n<p>但是我更经常用它来查看某个远端主机端口是否可访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet [主机名称或IP地址&lt;通信端口&gt;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicGJ14ldzEMk8lO4FwlH5ARdWePhgjqqPK63uobKMQ5y5mzpjgkYJM5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"telnet-example.png\"></p>\n<h2 id=\"15、-grep-命令-查找关键字\"><a href=\"#15、-grep-命令-查找关键字\" class=\"headerlink\" title=\"15、 grep 命令 : 查找关键字\"></a><strong>15、 grep 命令 : 查找关键字</strong></h2><p>Linux grep 命令用于查找文件里符合条件的字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [文件或目录...]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicnmh4N0IBp0XoOFsNzxsonqicAg3dTic65icBlCUDWo7x5pW5sReJYcMLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"grep-example.png\"></p>\n<h2 id=\"16、ps-命令-显示当前进程状态\"><a href=\"#16、ps-命令-显示当前进程状态\" class=\"headerlink\" title=\"16、ps 命令 : 显示当前进程状态\"></a><strong>16、ps 命令 : 显示当前进程状态</strong></h2><p>Linux ps 命令用于显示当前进程 (process) 的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [options]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-4\"><a href=\"#常用-options-4\" class=\"headerlink\" title=\"常用 options\"></a><strong>常用 options</strong></h3><ul>\n<li>-e 显示所有进程。</li>\n<li>-f 全格式。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef # 显示所有命令，连带命令行</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17、-命令-管道命令\"><a href=\"#17、-命令-管道命令\" class=\"headerlink\" title=\"17、| 命令 : 管道命令\"></a><strong>17、| 命令 : 管道命令</strong></h2><p>通常情况下,我们只执行一条命令,那么如何执行多条命令呢？</p>\n<p>管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。</p>\n<ul>\n<li>只能处理前一条指令的正确输出，不能处理错误输出</li>\n<li>管道命令必须要能够接受来自前一个命令的数据成为 standard input 继续处理才行。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicW0JTROaSt4XmWED6uAo8jIicRJ2KsODuYib9BAiagafJWtDuoMaodHTTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"pipe-example.png\"></p>\n<h2 id=\"18、-kill-命令-杀死进程\"><a href=\"#18、-kill-命令-杀死进程\" class=\"headerlink\" title=\"18、 kill 命令 : 杀死进程\"></a><strong>18、 kill 命令 : 杀死进程</strong></h2><p>Linux kill 命令用于删除执行中的程序或工作。</p>\n<p>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15),可将指定程序终止。若仍无法终止该程序,可使用 SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicIu4Rd9XzGelA6oRNVhHwpzVgInwDq2OQM2FlkJk8LkKg6y6ib10j8iag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"kill-example.png\"></p>\n<h2 id=\"19、-top-命令-实时显示进程动态\"><a href=\"#19、-top-命令-实时显示进程动态\" class=\"headerlink\" title=\"19、 top 命令 : 实时显示进程动态\"></a><strong>19、 top 命令 : 实时显示进程动态</strong></h2><p>Linux top 命令用于实时显示 process 的动态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-5\"><a href=\"#常用-options-5\" class=\"headerlink\" title=\"常用 options:\"></a><strong>常用 options:</strong></h3><ul>\n<li>-pid 指定进程 id</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -pid 4712</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicgUyjGHMO81bZJWFzkGfKjU1yKkRE4LRdJWc5wjEDibKGl8XicHnnVicicw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"top-example.gif\"></p>\n<h2 id=\"20、-clear-命令-清除屏幕\"><a href=\"#20、-clear-命令-清除屏幕\" class=\"headerlink\" title=\"20、 clear 命令 : 清除屏幕\"></a><strong>20、 clear 命令 : 清除屏幕</strong></h2><p>Linux clear 命令用于清除屏幕。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21、-alias-命令-别名配置\"><a href=\"#21、-alias-命令-别名配置\" class=\"headerlink\" title=\"21、 alias 命令 : 别名配置\"></a><strong>21、 alias 命令 : 别名配置</strong></h2><p>Linux alias 命令用于设置指令的别名。</p>\n<p>用户可利用 alias,自定指令的别名。若仅输入 alias,则可列出目前所有的别名设置。alias 的效力仅及于该次登入的操作。若要每次登入是即自动设好别名,可在.profile 或.cshrc 中设定指令的别名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias[别名]&#x3D;[指令名称]</span><br></pre></td></tr></table></figure>\n\n<p>比如 git 原先就配置了一些别名,我们来看看</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicDCebapv4Ung862KZncdSVLlgN2A7V4LBxKpBUOEX8InGWMd3m0X1VQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"alias-example.png\"></p>\n<h2 id=\"22、-find-命令-查找文件\"><a href=\"#22、-find-命令-查找文件\" class=\"headerlink\" title=\"22、 find 命令 : 查找文件\"></a><strong>22、 find 命令 : 查找文件</strong></h2><p>Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。</p>\n<p>如果使用该命令时,不设置任何参数,则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find path -option [ -print ] [ -exec -ok command ] &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicKicJpTCNiaxldgYS2lYYfsol4TjGFwaCp7OuBH7VP8zWlCic3nPlzBMUg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"find-example.png\"></p>\n<h2 id=\"23、-curl-命令-文件传输\"><a href=\"#23、-curl-命令-文件传输\" class=\"headerlink\" title=\"23、 curl 命令 : 文件传输\"></a><strong>23、 curl 命令 : 文件传输</strong></h2><p>linux curl 是通过 url 语法在命令行下上传或下载文件的工具软件,它支持 http,https,ftp,ftps,telnet 等多种协议,常被用来抓取网页和监控 Web 服务器状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl [options] [url]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用-options-6\"><a href=\"#常用-options-6\" class=\"headerlink\" title=\"常用 options:\"></a>常用 options:</h3><ul>\n<li>-o 把输出写到该文件中</li>\n<li>-I 仅仅返回 header</li>\n</ul>\n<p>curl 命令能做很多事,用过的人都说香,我说说我常用的场景吧:</p>\n<ol>\n<li><strong>调试请求</strong></li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicVfatkjFFzNATRFc4zG6ykxXv3s2uFqc4MGnpU0vzuuH6FWibjqMnJLw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"curl-example-1.png\"></p>\n<ol>\n<li><strong>查看头部信息</strong></li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicu5P8OI6nNACZ44b4IYkzs98Z0UpqMCfIiayz3N91GPibLRvvdNl3iafww/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"curl-example-3.png\"></p>\n<ol>\n<li><strong>抓取网页</strong></li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/eXCSRjyNYcaAWayNzE9hb4h7OEDttLXicw40UlPPblJYKicMjNVlicia17aBoJuIZncVAqpxmx774X4hdTEWfpucqA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"curl-example-2.png\"></p>\n"},{"_content":"# 小程序web-view\n\n背景：公司要做一个统计的echarts图，数据返回为数组，长度大概在5000，直接集成echarts使用，发现dataZoom拖拽卡顿严重，（其实主要是数据返回后渲染时间较长，渲染完成还是OK滴），控制台查看发现应该是微信小程序平台的性能瓶颈限制，考虑使用web-view突破\n\n由于公司使用的是Taro框架来做小程序的，所以遵循Reac的基本开发规范,原生也是同理，直接上代码吧\n\n### HistoryLine组件\n\n```react\nimport Taro, { Component } from '@tarojs/taro'\n// 引入 WebView 组件（原生一致）\nimport { WebView } from '@tarojs/components'\n\nclass HistoryLine extends Component {\n  config = {\n    navigationBarTitleText: \"历史曲线\",\n    pageOrientation: 'landscape',\n  };\n\n  render () {\n      // 路由传参\n    const { params: { equipmentGroupAttrName, groupId } } = this.$router;\n      // 在web页发请求需要小程序的请求头信息(后台接口校验使用，我存在本地，看你喜欢咯)\n      // 注意中文字符会被编码，就不用我说了吧，转码！！！\n    console.log(`https://xxx.com/area-simple.html?equipmentGroupAttrName=${encodeURI(equipmentGroupAttrName)}&groupId=${groupId}`)\n    // console.log(`http://192.168.1.136:5500/area-simple.html?equipmentGroupAttrName=${encodeURI(equipmentGroupAttrName)}&groupId=${groupId}`)\n    return (\n      <WebView src={`https://xxx.com/area-simple.html?equipmentGroupAttrName=${equipmentGroupAttrName}&groupId=${groupId}`}  />\n      // <WebView src={`http://192.168.1.136:5500/area-simple.html?equipmentGroupAttrName=${equipmentGroupAttrName}&groupId=${groupId}`}  />\n    )\n  }\n}\nexport default HistoryLine;\n```\n\n### H5页面\n\n```web-idl\n// 主要代码\n<div class=\"lineChart\" id=\"container\"></div>\n    <script type=\"text/javascript\">\n    // 获取传参\n      function getQueryVariable(variable) {\n        var query = window.location.search.substring(1);\n        var vars = query.split(\"&\");\n        for (var i = 0; i < vars.length; i++) {\n          var pair = vars[i].split(\"=\");\n          if (pair[0] == variable) {\n            return pair[1];\n          }\n        }\n        return false;\n      }\n\n      console.log(window.location);\n      // 中文反编码\n        var equipmentGroupAttrName = decodeURI(getQueryVariable('equipmentGroupAttrName'));\n        var groupId = getQueryVariable('groupId');\n  \t// 其他业务逻辑（做的echart图，就不放了）\n    </script>\n```\n\n##### 注意：\n\n1. 小程序在开发工具上，web-view的h5页面可以是放在本地服务上的web，页面内访问的接口可以是非https非域名的接口（需要设置开发工具不校验https和域名）\n2. 在手机调试时，即便打开开发者模式，以上环境，H5页面内也无法正常访问接口\n   - 如果h5页面部署在本地环境，手机运行到同一wifi环境下，即可正常访问web，无法访问接口\n   - 如果h5页面部署在外网环境，如果web服务器时http协议，接口是http协议，可以访问web，无法访问接口\n   - 如果h5页面部署在外网环境，如果web服务器时http协议，接口是https协议，可以访问web，可以访问接口\n   - 如果h5页面部署在外网环境，如果web服务器时https协议，接口是http协议，可以访问web，无法访问接口（web控制台会报错，提示不支持调用http协议）\n   - 如果h5页面部署在外网环境，如果web服务器时https协议，接口是https协议，可以访问web，可以访问接口（完美）\n3. 正式发布，必须为2中的最后一条规则，且需要配置微信小程序访问域名白名单：添加H5页面所在服务器域名及其内访问的api域名，规则为：https+备案域名","source":"_posts/小程序web-view踩坑.md","raw":"---\ncategories: \n- 前端\n- 小程序\ntags:\n- 小程序\n- webview\n---\n# 小程序web-view\n\n背景：公司要做一个统计的echarts图，数据返回为数组，长度大概在5000，直接集成echarts使用，发现dataZoom拖拽卡顿严重，（其实主要是数据返回后渲染时间较长，渲染完成还是OK滴），控制台查看发现应该是微信小程序平台的性能瓶颈限制，考虑使用web-view突破\n\n由于公司使用的是Taro框架来做小程序的，所以遵循Reac的基本开发规范,原生也是同理，直接上代码吧\n\n### HistoryLine组件\n\n```react\nimport Taro, { Component } from '@tarojs/taro'\n// 引入 WebView 组件（原生一致）\nimport { WebView } from '@tarojs/components'\n\nclass HistoryLine extends Component {\n  config = {\n    navigationBarTitleText: \"历史曲线\",\n    pageOrientation: 'landscape',\n  };\n\n  render () {\n      // 路由传参\n    const { params: { equipmentGroupAttrName, groupId } } = this.$router;\n      // 在web页发请求需要小程序的请求头信息(后台接口校验使用，我存在本地，看你喜欢咯)\n      // 注意中文字符会被编码，就不用我说了吧，转码！！！\n    console.log(`https://xxx.com/area-simple.html?equipmentGroupAttrName=${encodeURI(equipmentGroupAttrName)}&groupId=${groupId}`)\n    // console.log(`http://192.168.1.136:5500/area-simple.html?equipmentGroupAttrName=${encodeURI(equipmentGroupAttrName)}&groupId=${groupId}`)\n    return (\n      <WebView src={`https://xxx.com/area-simple.html?equipmentGroupAttrName=${equipmentGroupAttrName}&groupId=${groupId}`}  />\n      // <WebView src={`http://192.168.1.136:5500/area-simple.html?equipmentGroupAttrName=${equipmentGroupAttrName}&groupId=${groupId}`}  />\n    )\n  }\n}\nexport default HistoryLine;\n```\n\n### H5页面\n\n```web-idl\n// 主要代码\n<div class=\"lineChart\" id=\"container\"></div>\n    <script type=\"text/javascript\">\n    // 获取传参\n      function getQueryVariable(variable) {\n        var query = window.location.search.substring(1);\n        var vars = query.split(\"&\");\n        for (var i = 0; i < vars.length; i++) {\n          var pair = vars[i].split(\"=\");\n          if (pair[0] == variable) {\n            return pair[1];\n          }\n        }\n        return false;\n      }\n\n      console.log(window.location);\n      // 中文反编码\n        var equipmentGroupAttrName = decodeURI(getQueryVariable('equipmentGroupAttrName'));\n        var groupId = getQueryVariable('groupId');\n  \t// 其他业务逻辑（做的echart图，就不放了）\n    </script>\n```\n\n##### 注意：\n\n1. 小程序在开发工具上，web-view的h5页面可以是放在本地服务上的web，页面内访问的接口可以是非https非域名的接口（需要设置开发工具不校验https和域名）\n2. 在手机调试时，即便打开开发者模式，以上环境，H5页面内也无法正常访问接口\n   - 如果h5页面部署在本地环境，手机运行到同一wifi环境下，即可正常访问web，无法访问接口\n   - 如果h5页面部署在外网环境，如果web服务器时http协议，接口是http协议，可以访问web，无法访问接口\n   - 如果h5页面部署在外网环境，如果web服务器时http协议，接口是https协议，可以访问web，可以访问接口\n   - 如果h5页面部署在外网环境，如果web服务器时https协议，接口是http协议，可以访问web，无法访问接口（web控制台会报错，提示不支持调用http协议）\n   - 如果h5页面部署在外网环境，如果web服务器时https协议，接口是https协议，可以访问web，可以访问接口（完美）\n3. 正式发布，必须为2中的最后一条规则，且需要配置微信小程序访问域名白名单：添加H5页面所在服务器域名及其内访问的api域名，规则为：https+备案域名","slug":"小程序web-view踩坑","published":1,"date":"2020-07-16T13:28:48.512Z","updated":"2020-07-17T11:33:36.486Z","title":"小程序web-view踩坑","_id":"ckcotxguq000ip8vobtjrh0yd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"小程序web-view\"><a href=\"#小程序web-view\" class=\"headerlink\" title=\"小程序web-view\"></a>小程序web-view</h1><p>背景：公司要做一个统计的echarts图，数据返回为数组，长度大概在5000，直接集成echarts使用，发现dataZoom拖拽卡顿严重，（其实主要是数据返回后渲染时间较长，渲染完成还是OK滴），控制台查看发现应该是微信小程序平台的性能瓶颈限制，考虑使用web-view突破</p>\n<p>由于公司使用的是Taro框架来做小程序的，所以遵循Reac的基本开发规范,原生也是同理，直接上代码吧</p>\n<h3 id=\"HistoryLine组件\"><a href=\"#HistoryLine组件\" class=\"headerlink\" title=\"HistoryLine组件\"></a>HistoryLine组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Taro, &#123; Component &#125; from &#39;@tarojs&#x2F;taro&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 引入 WebView 组件（原生一致）</span><br><span class=\"line\">import &#123; WebView &#125; from &#39;@tarojs&#x2F;components&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">class HistoryLine extends Component &#123;</span><br><span class=\"line\">  config &#x3D; &#123;</span><br><span class=\"line\">    navigationBarTitleText: &quot;历史曲线&quot;,</span><br><span class=\"line\">    pageOrientation: &#39;landscape&#39;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 路由传参</span><br><span class=\"line\">    const &#123; params: &#123; equipmentGroupAttrName, groupId &#125; &#125; &#x3D; this.$router;</span><br><span class=\"line\">      &#x2F;&#x2F; 在web页发请求需要小程序的请求头信息(后台接口校验使用，我存在本地，看你喜欢咯)</span><br><span class=\"line\">      &#x2F;&#x2F; 注意中文字符会被编码，就不用我说了吧，转码！！！</span><br><span class=\"line\">    console.log(&#96;https:&#x2F;&#x2F;xxx.com&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;encodeURI(equipmentGroupAttrName)&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;)</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(&#96;http:&#x2F;&#x2F;192.168.1.136:5500&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;encodeURI(equipmentGroupAttrName)&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;)</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;WebView src&#x3D;&#123;&#96;https:&#x2F;&#x2F;xxx.com&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;equipmentGroupAttrName&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;&#125;  &#x2F;&gt;</span><br><span class=\"line\">      &#x2F;&#x2F; &lt;WebView src&#x3D;&#123;&#96;http:&#x2F;&#x2F;192.168.1.136:5500&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;equipmentGroupAttrName&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;&#125;  &#x2F;&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HistoryLine;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"H5页面\"><a href=\"#H5页面\" class=\"headerlink\" title=\"H5页面\"></a>H5页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 主要代码</span><br><span class=\"line\">&lt;div class&#x3D;&quot;lineChart&quot; id&#x3D;&quot;container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取传参</span><br><span class=\"line\">      function getQueryVariable(variable) &#123;</span><br><span class=\"line\">        var query &#x3D; window.location.search.substring(1);</span><br><span class=\"line\">        var vars &#x3D; query.split(&quot;&amp;&quot;);</span><br><span class=\"line\">        for (var i &#x3D; 0; i &lt; vars.length; i++) &#123;</span><br><span class=\"line\">          var pair &#x3D; vars[i].split(&quot;&#x3D;&quot;);</span><br><span class=\"line\">          if (pair[0] &#x3D;&#x3D; variable) &#123;</span><br><span class=\"line\">            return pair[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(window.location);</span><br><span class=\"line\">      &#x2F;&#x2F; 中文反编码</span><br><span class=\"line\">        var equipmentGroupAttrName &#x3D; decodeURI(getQueryVariable(&#39;equipmentGroupAttrName&#39;));</span><br><span class=\"line\">        var groupId &#x3D; getQueryVariable(&#39;groupId&#39;);</span><br><span class=\"line\">  \t&#x2F;&#x2F; 其他业务逻辑（做的echart图，就不放了）</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><ol>\n<li>小程序在开发工具上，web-view的h5页面可以是放在本地服务上的web，页面内访问的接口可以是非https非域名的接口（需要设置开发工具不校验https和域名）</li>\n<li>在手机调试时，即便打开开发者模式，以上环境，H5页面内也无法正常访问接口<ul>\n<li>如果h5页面部署在本地环境，手机运行到同一wifi环境下，即可正常访问web，无法访问接口</li>\n<li>如果h5页面部署在外网环境，如果web服务器时http协议，接口是http协议，可以访问web，无法访问接口</li>\n<li>如果h5页面部署在外网环境，如果web服务器时http协议，接口是https协议，可以访问web，可以访问接口</li>\n<li>如果h5页面部署在外网环境，如果web服务器时https协议，接口是http协议，可以访问web，无法访问接口（web控制台会报错，提示不支持调用http协议）</li>\n<li>如果h5页面部署在外网环境，如果web服务器时https协议，接口是https协议，可以访问web，可以访问接口（完美）</li>\n</ul>\n</li>\n<li>正式发布，必须为2中的最后一条规则，且需要配置微信小程序访问域名白名单：添加H5页面所在服务器域名及其内访问的api域名，规则为：https+备案域名</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"小程序web-view\"><a href=\"#小程序web-view\" class=\"headerlink\" title=\"小程序web-view\"></a>小程序web-view</h1><p>背景：公司要做一个统计的echarts图，数据返回为数组，长度大概在5000，直接集成echarts使用，发现dataZoom拖拽卡顿严重，（其实主要是数据返回后渲染时间较长，渲染完成还是OK滴），控制台查看发现应该是微信小程序平台的性能瓶颈限制，考虑使用web-view突破</p>\n<p>由于公司使用的是Taro框架来做小程序的，所以遵循Reac的基本开发规范,原生也是同理，直接上代码吧</p>\n<h3 id=\"HistoryLine组件\"><a href=\"#HistoryLine组件\" class=\"headerlink\" title=\"HistoryLine组件\"></a>HistoryLine组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Taro, &#123; Component &#125; from &#39;@tarojs&#x2F;taro&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 引入 WebView 组件（原生一致）</span><br><span class=\"line\">import &#123; WebView &#125; from &#39;@tarojs&#x2F;components&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">class HistoryLine extends Component &#123;</span><br><span class=\"line\">  config &#x3D; &#123;</span><br><span class=\"line\">    navigationBarTitleText: &quot;历史曲线&quot;,</span><br><span class=\"line\">    pageOrientation: &#39;landscape&#39;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 路由传参</span><br><span class=\"line\">    const &#123; params: &#123; equipmentGroupAttrName, groupId &#125; &#125; &#x3D; this.$router;</span><br><span class=\"line\">      &#x2F;&#x2F; 在web页发请求需要小程序的请求头信息(后台接口校验使用，我存在本地，看你喜欢咯)</span><br><span class=\"line\">      &#x2F;&#x2F; 注意中文字符会被编码，就不用我说了吧，转码！！！</span><br><span class=\"line\">    console.log(&#96;https:&#x2F;&#x2F;xxx.com&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;encodeURI(equipmentGroupAttrName)&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;)</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(&#96;http:&#x2F;&#x2F;192.168.1.136:5500&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;encodeURI(equipmentGroupAttrName)&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;)</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;WebView src&#x3D;&#123;&#96;https:&#x2F;&#x2F;xxx.com&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;equipmentGroupAttrName&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;&#125;  &#x2F;&gt;</span><br><span class=\"line\">      &#x2F;&#x2F; &lt;WebView src&#x3D;&#123;&#96;http:&#x2F;&#x2F;192.168.1.136:5500&#x2F;area-simple.html?equipmentGroupAttrName&#x3D;$&#123;equipmentGroupAttrName&#125;&amp;groupId&#x3D;$&#123;groupId&#125;&#96;&#125;  &#x2F;&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default HistoryLine;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"H5页面\"><a href=\"#H5页面\" class=\"headerlink\" title=\"H5页面\"></a>H5页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 主要代码</span><br><span class=\"line\">&lt;div class&#x3D;&quot;lineChart&quot; id&#x3D;&quot;container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取传参</span><br><span class=\"line\">      function getQueryVariable(variable) &#123;</span><br><span class=\"line\">        var query &#x3D; window.location.search.substring(1);</span><br><span class=\"line\">        var vars &#x3D; query.split(&quot;&amp;&quot;);</span><br><span class=\"line\">        for (var i &#x3D; 0; i &lt; vars.length; i++) &#123;</span><br><span class=\"line\">          var pair &#x3D; vars[i].split(&quot;&#x3D;&quot;);</span><br><span class=\"line\">          if (pair[0] &#x3D;&#x3D; variable) &#123;</span><br><span class=\"line\">            return pair[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(window.location);</span><br><span class=\"line\">      &#x2F;&#x2F; 中文反编码</span><br><span class=\"line\">        var equipmentGroupAttrName &#x3D; decodeURI(getQueryVariable(&#39;equipmentGroupAttrName&#39;));</span><br><span class=\"line\">        var groupId &#x3D; getQueryVariable(&#39;groupId&#39;);</span><br><span class=\"line\">  \t&#x2F;&#x2F; 其他业务逻辑（做的echart图，就不放了）</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><ol>\n<li>小程序在开发工具上，web-view的h5页面可以是放在本地服务上的web，页面内访问的接口可以是非https非域名的接口（需要设置开发工具不校验https和域名）</li>\n<li>在手机调试时，即便打开开发者模式，以上环境，H5页面内也无法正常访问接口<ul>\n<li>如果h5页面部署在本地环境，手机运行到同一wifi环境下，即可正常访问web，无法访问接口</li>\n<li>如果h5页面部署在外网环境，如果web服务器时http协议，接口是http协议，可以访问web，无法访问接口</li>\n<li>如果h5页面部署在外网环境，如果web服务器时http协议，接口是https协议，可以访问web，可以访问接口</li>\n<li>如果h5页面部署在外网环境，如果web服务器时https协议，接口是http协议，可以访问web，无法访问接口（web控制台会报错，提示不支持调用http协议）</li>\n<li>如果h5页面部署在外网环境，如果web服务器时https协议，接口是https协议，可以访问web，可以访问接口（完美）</li>\n</ul>\n</li>\n<li>正式发布，必须为2中的最后一条规则，且需要配置微信小程序访问域名白名单：添加H5页面所在服务器域名及其内访问的api域名，规则为：https+备案域名</li>\n</ol>\n"},{"_content":"# 自定义事件对象\n\n### 自定义事件类\n\n```javascript\n// events.js\nclass Event {\n  constructor(){\n    this.events={};\n  }\n\n  on(eventName,cb){//注册（监听）\n    if(this.events[eventName]){\n      this.events[eventName].push(cb);\n    }else{\n      this.events[eventName]=[cb];\n    }\n  }\n// 传参\n// emit(eventName, params){\n//  this.events[eventName].forEach(cb=>{\n//   cb(params);\n//  })\n// }\n  emit(eventName){//派发（执行）\n      if(this.events[eventName]){\n          this.events[eventName].forEach(cb=>{\n          cb();\n        })\n      } else {\n      \treturn;\n      }\n  }\n}\nexport default Event;\n```\n\n### 实例实例对象\n\n```javascript\n// common.js\nconst getEvent = new Event();\n \nexport default getEvent;\n```\n### 组件一注册事件\n```javascript\n\timport getEvent from './common'\n    getEvent.on('test',()=>{\n      alert(1)\n    })\n```\n### 组件二派发事件\n```javascript\n\timport getEvent from './common'\n\tgetEvent.emit('test');\n```","source":"_posts/自定义事件对象.md","raw":"---\n# title: 常用工具\n# date: 2017-12-14 13:05:38\n# comments: false\ncategories: \n- 前端\n- 其他\ntags:\n- event\n\n---\n# 自定义事件对象\n\n### 自定义事件类\n\n```javascript\n// events.js\nclass Event {\n  constructor(){\n    this.events={};\n  }\n\n  on(eventName,cb){//注册（监听）\n    if(this.events[eventName]){\n      this.events[eventName].push(cb);\n    }else{\n      this.events[eventName]=[cb];\n    }\n  }\n// 传参\n// emit(eventName, params){\n//  this.events[eventName].forEach(cb=>{\n//   cb(params);\n//  })\n// }\n  emit(eventName){//派发（执行）\n      if(this.events[eventName]){\n          this.events[eventName].forEach(cb=>{\n          cb();\n        })\n      } else {\n      \treturn;\n      }\n  }\n}\nexport default Event;\n```\n\n### 实例实例对象\n\n```javascript\n// common.js\nconst getEvent = new Event();\n \nexport default getEvent;\n```\n### 组件一注册事件\n```javascript\n\timport getEvent from './common'\n    getEvent.on('test',()=>{\n      alert(1)\n    })\n```\n### 组件二派发事件\n```javascript\n\timport getEvent from './common'\n\tgetEvent.emit('test');\n```","slug":"自定义事件对象","published":1,"date":"2020-07-16T13:28:48.521Z","updated":"2020-07-17T12:13:47.542Z","title":"自定义事件对象","_id":"ckcotxguv000jp8vohafig6rd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"自定义事件对象\"><a href=\"#自定义事件对象\" class=\"headerlink\" title=\"自定义事件对象\"></a>自定义事件对象</h1><h3 id=\"自定义事件类\"><a href=\"#自定义事件类\" class=\"headerlink\" title=\"自定义事件类\"></a>自定义事件类</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// events.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events=&#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on(eventName,cb)&#123;<span class=\"comment\">//注册（监听）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.events[eventName])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName].push(cb);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName]=[cb];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 传参</span></span><br><span class=\"line\"><span class=\"comment\">// emit(eventName, params)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  this.events[eventName].forEach(cb=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   cb(params);</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  emit(eventName)&#123;<span class=\"comment\">//派发（执行）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.events[eventName])&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.events[eventName].forEach(<span class=\"function\"><span class=\"params\">cb</span>=&gt;</span>&#123;</span><br><span class=\"line\">          cb();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Event;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例实例对象\"><a href=\"#实例实例对象\" class=\"headerlink\" title=\"实例实例对象\"></a>实例实例对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getEvent = <span class=\"keyword\">new</span> Event();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> getEvent;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件一注册事件\"><a href=\"#组件一注册事件\" class=\"headerlink\" title=\"组件一注册事件\"></a>组件一注册事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getEvent <span class=\"keyword\">from</span> <span class=\"string\">'./common'</span></span><br><span class=\"line\">   getEvent.on(<span class=\"string\">'test'</span>,()=&gt;&#123;</span><br><span class=\"line\">     alert(<span class=\"number\">1</span>)</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件二派发事件\"><a href=\"#组件二派发事件\" class=\"headerlink\" title=\"组件二派发事件\"></a>组件二派发事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getEvent <span class=\"keyword\">from</span> <span class=\"string\">'./common'</span></span><br><span class=\"line\">getEvent.emit(<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"自定义事件对象\"><a href=\"#自定义事件对象\" class=\"headerlink\" title=\"自定义事件对象\"></a>自定义事件对象</h1><h3 id=\"自定义事件类\"><a href=\"#自定义事件类\" class=\"headerlink\" title=\"自定义事件类\"></a>自定义事件类</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// events.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events=&#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on(eventName,cb)&#123;<span class=\"comment\">//注册（监听）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.events[eventName])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName].push(cb);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName]=[cb];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 传参</span></span><br><span class=\"line\"><span class=\"comment\">// emit(eventName, params)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  this.events[eventName].forEach(cb=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   cb(params);</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  emit(eventName)&#123;<span class=\"comment\">//派发（执行）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.events[eventName])&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.events[eventName].forEach(<span class=\"function\"><span class=\"params\">cb</span>=&gt;</span>&#123;</span><br><span class=\"line\">          cb();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Event;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例实例对象\"><a href=\"#实例实例对象\" class=\"headerlink\" title=\"实例实例对象\"></a>实例实例对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getEvent = <span class=\"keyword\">new</span> Event();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> getEvent;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件一注册事件\"><a href=\"#组件一注册事件\" class=\"headerlink\" title=\"组件一注册事件\"></a>组件一注册事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getEvent <span class=\"keyword\">from</span> <span class=\"string\">'./common'</span></span><br><span class=\"line\">   getEvent.on(<span class=\"string\">'test'</span>,()=&gt;&#123;</span><br><span class=\"line\">     alert(<span class=\"number\">1</span>)</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件二派发事件\"><a href=\"#组件二派发事件\" class=\"headerlink\" title=\"组件二派发事件\"></a>组件二派发事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getEvent <span class=\"keyword\">from</span> <span class=\"string\">'./common'</span></span><br><span class=\"line\">getEvent.emit(<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>"},{"date":"2017-12-13T16:00:00.000Z","_content":"# vue父子传参场景集锦(一)\n\n>### 父传子数据,子修改数据,父不改\n\n场景: 列表(父组件)点击,弹出表单并传递当前行数据到表单(子组件),表单使用双向绑定(elementUI el-form),需求是实现表单可编辑(v-model),且不修改列表数据(取消时列表数据未变).\n\n1. 直接使用props属性内数据,可以实现表单和列表数据修改同步(不符子不改父的原则),切换点击行时可以同步当前行数据\n\n   ```js\n   <Edit :articleForm='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n\texport default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'articleForm',\n   \t\t'type',\n   \t\t'reload'\n   \t],\n   }\n   ```\n\n\n2. 在data里将父组件传递的数据进行一次赋值(别名),实现父子组件取消双向绑定(Object.assign).(无法在切换行时将父组件传递的props同步到articleForm数据)\n\n   ```js\n   <Edit :rowData='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n   export default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件,copy行数据\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t\t//articleForm:this.rowData,//别名\n   \t\t\tarticleForm:Object.assign({},this.rowData)//别名,并避免绑定\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'rowData',\n   \t\t'type',\n   \t\t'reload'\n   \t],\n   }\n   ```\n3. props接受数据,使用computed赋值,实现切换行更改articleForm.\n\n   ```js\n   <Edit :rowData='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n    export default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n        data() {\n            return {\n            };\n        },\n        props: [\n            'rowData',\n            'type',\n            'reload'\n        ],\n        computed: {\n            articleForm: function() {\n             \t//return this.rowData//切换行可以同步父组件传递的新数据,且子组件会更改父组件数据,等同于方案1\n                return Object.assign({},this.rowData)//切换行可以同步父组件传递的新数据,但子组件无法编辑数据\n            }\n        },\n\t}\n   ```\n4. 在data里将父组件传递的数据进行copy,实现父子组件取消双向绑定.使用watch监听实现切换行时将父组件数据同步到articleForm数据,符合需求\n\n   ```js\n   <Edit :rowData='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n    export default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t\timg_file: [],\n   \t\t\tarticleForm:{}\n   \t\t\t//articleForm:Object.assign({},this.rowData)//别名,并copy\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'rowData',\n   \t\t'type',\n   \t\t'reload'\n   \t],\n   \twatch:{\n\t        rowData: {\n\t            deep: true,\n\t            immediate: true,//立刻监听,不用在data里进行第一次赋值\n\t            handler: function (val, oldVal) { \n\t                this.articleForm = Object.assign({},val);\n\t            },\n\t        }\n\t\t},\n    }\n   ```\n5. 在父组件进行数据源深copy,子组件就可以随意了,符合需求(最佳)\n\n   ```js\n   <Edit :articleForm='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n   \texport default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件,copy行数据\n                this.rowData = Object.assign({},row);\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t\timg_file: [],\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'articleForm',//或者使用computed赋值(改名)\n   \t\t'type',\n   \t\t'reload'\n   \t],\n\t}\n   ```","source":"_posts/vue父子传参场景集锦.md","raw":"---\ndate: 2017-12-14\ncategories: \n- 前端\n- Vue\ntags:\n- Vue\n---\n# vue父子传参场景集锦(一)\n\n>### 父传子数据,子修改数据,父不改\n\n场景: 列表(父组件)点击,弹出表单并传递当前行数据到表单(子组件),表单使用双向绑定(elementUI el-form),需求是实现表单可编辑(v-model),且不修改列表数据(取消时列表数据未变).\n\n1. 直接使用props属性内数据,可以实现表单和列表数据修改同步(不符子不改父的原则),切换点击行时可以同步当前行数据\n\n   ```js\n   <Edit :articleForm='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n\texport default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'articleForm',\n   \t\t'type',\n   \t\t'reload'\n   \t],\n   }\n   ```\n\n\n2. 在data里将父组件传递的数据进行一次赋值(别名),实现父子组件取消双向绑定(Object.assign).(无法在切换行时将父组件传递的props同步到articleForm数据)\n\n   ```js\n   <Edit :rowData='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n   export default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件,copy行数据\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t\t//articleForm:this.rowData,//别名\n   \t\t\tarticleForm:Object.assign({},this.rowData)//别名,并避免绑定\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'rowData',\n   \t\t'type',\n   \t\t'reload'\n   \t],\n   }\n   ```\n3. props接受数据,使用computed赋值,实现切换行更改articleForm.\n\n   ```js\n   <Edit :rowData='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n    export default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n        data() {\n            return {\n            };\n        },\n        props: [\n            'rowData',\n            'type',\n            'reload'\n        ],\n        computed: {\n            articleForm: function() {\n             \t//return this.rowData//切换行可以同步父组件传递的新数据,且子组件会更改父组件数据,等同于方案1\n                return Object.assign({},this.rowData)//切换行可以同步父组件传递的新数据,但子组件无法编辑数据\n            }\n        },\n\t}\n   ```\n4. 在data里将父组件传递的数据进行copy,实现父子组件取消双向绑定.使用watch监听实现切换行时将父组件数据同步到articleForm数据,符合需求\n\n   ```js\n   <Edit :rowData='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n    export default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件\n                this.rowData = row;\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t\timg_file: [],\n   \t\t\tarticleForm:{}\n   \t\t\t//articleForm:Object.assign({},this.rowData)//别名,并copy\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'rowData',\n   \t\t'type',\n   \t\t'reload'\n   \t],\n   \twatch:{\n\t        rowData: {\n\t            deep: true,\n\t            immediate: true,//立刻监听,不用在data里进行第一次赋值\n\t            handler: function (val, oldVal) { \n\t                this.articleForm = Object.assign({},val);\n\t            },\n\t        }\n\t\t},\n    }\n   ```\n5. 在父组件进行数据源深copy,子组件就可以随意了,符合需求(最佳)\n\n   ```js\n   <Edit :articleForm='rowData' />//父调用子组件 rowData:{title:\"xx\",content:\"xx\"}\n   \texport default {\n   \t\tdata() {\n\t\t\treturn {\n\t\t\t\trowData:{},\n\t\t\t}\n\t\t},\n\t\tmethods(){\n\t\t   \tedit(row) {//行点击事件,copy行数据\n                this.rowData = Object.assign({},row);\n            },\n\t\t}\n\t}\n   ```\n\n   ```js\n   <el-form :model=\"articleForm\" ref='articleForm'>//子组件\n   \t<el-form-item label=\"标题\">\n   \t\t<el-input v-model=\"articleForm.title\" placeholder=\"请输入标题\"></el-input>\n   \t</el-form-item>\n   </el-form>\n   export default {\n   \tdata() {\n   \t\treturn {\n   \t\t\timg_file: [],\n   \t\t};\n   \t},\n   \tprops: [\n   \t\t'articleForm',//或者使用computed赋值(改名)\n   \t\t'type',\n   \t\t'reload'\n   \t],\n\t}\n   ```","slug":"vue父子传参场景集锦","published":1,"updated":"2020-07-17T12:13:16.066Z","title":"vue父子传参场景集锦","_id":"ckcpzrs4p000hkgvohct1abzf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"vue父子传参场景集锦-一\"><a href=\"#vue父子传参场景集锦-一\" class=\"headerlink\" title=\"vue父子传参场景集锦(一)\"></a>vue父子传参场景集锦(一)</h1><blockquote>\n<h3 id=\"父传子数据-子修改数据-父不改\"><a href=\"#父传子数据-子修改数据-父不改\" class=\"headerlink\" title=\"父传子数据,子修改数据,父不改\"></a>父传子数据,子修改数据,父不改</h3></blockquote>\n<p>场景: 列表(父组件)点击,弹出表单并传递当前行数据到表单(子组件),表单使用双向绑定(elementUI el-form),需求是实现表单可编辑(v-model),且不修改列表数据(取消时列表数据未变).</p>\n<ol>\n<li><p>直接使用props属性内数据,可以实现表单和列表数据修改同步(不符子不改父的原则),切换点击行时可以同步当前行数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :articleForm=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">\t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'articleForm',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">\t],</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>在data里将父组件传递的数据进行一次赋值(别名),实现父子组件取消双向绑定(Object.assign).(无法在切换行时将父组件传递的props同步到articleForm数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :rowData=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件,copy行数据</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">\t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t/</span><span class=\"regexp\">/articleForm:this.rowData,/</span><span class=\"regexp\">/别名</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tarticleForm:Object.assign(&#123;&#125;,this.rowData)/</span><span class=\"regexp\">/别名,并避免绑定</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'rowData',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">\t],</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>props接受数据,使用computed赋值,实现切换行更改articleForm.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :rowData=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">  \t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">  \t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">       data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">       &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">       props: [</span></span><br><span class=\"line\"><span class=\"regexp\">           'rowData',</span></span><br><span class=\"line\"><span class=\"regexp\">           'type',</span></span><br><span class=\"line\"><span class=\"regexp\">           'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">       ],</span></span><br><span class=\"line\"><span class=\"regexp\">       computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           articleForm: function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            \t/</span><span class=\"regexp\">/return this.rowData/</span><span class=\"regexp\">/切换行可以同步父组件传递的新数据,且子组件会更改父组件数据,等同于方案1</span></span><br><span class=\"line\"><span class=\"regexp\">               return Object.assign(&#123;&#125;,this.rowData)/</span><span class=\"regexp\">/切换行可以同步父组件传递的新数据,但子组件无法编辑数据</span></span><br><span class=\"line\"><span class=\"regexp\">           &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">       &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在data里将父组件传递的数据进行copy,实现父子组件取消双向绑定.使用watch监听实现切换行时将父组件数据同步到articleForm数据,符合需求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :rowData=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\"> \t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> \tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t\timg_file: [],</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t\tarticleForm:&#123;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t\t/</span><span class=\"regexp\">/articleForm:Object.assign(&#123;&#125;,this.rowData)/</span><span class=\"regexp\">/别名,并copy</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\"> \tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t'rowData',</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\"> \t],</span></span><br><span class=\"line\"><span class=\"regexp\"> \twatch:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">       rowData: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           deep: true,</span></span><br><span class=\"line\"><span class=\"regexp\">           immediate: true,/</span><span class=\"regexp\">/立刻监听,不用在data里进行第一次赋值</span></span><br><span class=\"line\"><span class=\"regexp\">           handler: function (val, oldVal) &#123; </span></span><br><span class=\"line\"><span class=\"regexp\">               this.articleForm = Object.assign(&#123;&#125;,val);</span></span><br><span class=\"line\"><span class=\"regexp\">           &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">       &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在父组件进行数据源深copy,子组件就可以随意了,符合需求(最佳)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :articleForm=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">  \t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件,copy行数据</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,row);</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">  \t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">  \t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  \tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t\timg_file: [],</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  \tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t'articleForm',//或者使用computed赋值(改名)</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">  \t],</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue父子传参场景集锦-一\"><a href=\"#vue父子传参场景集锦-一\" class=\"headerlink\" title=\"vue父子传参场景集锦(一)\"></a>vue父子传参场景集锦(一)</h1><blockquote>\n<h3 id=\"父传子数据-子修改数据-父不改\"><a href=\"#父传子数据-子修改数据-父不改\" class=\"headerlink\" title=\"父传子数据,子修改数据,父不改\"></a>父传子数据,子修改数据,父不改</h3></blockquote>\n<p>场景: 列表(父组件)点击,弹出表单并传递当前行数据到表单(子组件),表单使用双向绑定(elementUI el-form),需求是实现表单可编辑(v-model),且不修改列表数据(取消时列表数据未变).</p>\n<ol>\n<li><p>直接使用props属性内数据,可以实现表单和列表数据修改同步(不符子不改父的原则),切换点击行时可以同步当前行数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :articleForm=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">\t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'articleForm',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">\t],</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>在data里将父组件传递的数据进行一次赋值(别名),实现父子组件取消双向绑定(Object.assign).(无法在切换行时将父组件传递的props同步到articleForm数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :rowData=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件,copy行数据</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">\t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t/</span><span class=\"regexp\">/articleForm:this.rowData,/</span><span class=\"regexp\">/别名</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tarticleForm:Object.assign(&#123;&#125;,this.rowData)/</span><span class=\"regexp\">/别名,并避免绑定</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'rowData',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">\t],</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>props接受数据,使用computed赋值,实现切换行更改articleForm.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :rowData=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">  \t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">  \t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">       data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">       &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">       props: [</span></span><br><span class=\"line\"><span class=\"regexp\">           'rowData',</span></span><br><span class=\"line\"><span class=\"regexp\">           'type',</span></span><br><span class=\"line\"><span class=\"regexp\">           'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">       ],</span></span><br><span class=\"line\"><span class=\"regexp\">       computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           articleForm: function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            \t/</span><span class=\"regexp\">/return this.rowData/</span><span class=\"regexp\">/切换行可以同步父组件传递的新数据,且子组件会更改父组件数据,等同于方案1</span></span><br><span class=\"line\"><span class=\"regexp\">               return Object.assign(&#123;&#125;,this.rowData)/</span><span class=\"regexp\">/切换行可以同步父组件传递的新数据,但子组件无法编辑数据</span></span><br><span class=\"line\"><span class=\"regexp\">           &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">       &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在data里将父组件传递的数据进行copy,实现父子组件取消双向绑定.使用watch监听实现切换行时将父组件数据同步到articleForm数据,符合需求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :rowData=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = row;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\"> \t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> \tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t\timg_file: [],</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t\tarticleForm:&#123;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t\t/</span><span class=\"regexp\">/articleForm:Object.assign(&#123;&#125;,this.rowData)/</span><span class=\"regexp\">/别名,并copy</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"> \t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\"> \tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t'rowData',</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\"> \t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\"> \t],</span></span><br><span class=\"line\"><span class=\"regexp\"> \twatch:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">       rowData: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">           deep: true,</span></span><br><span class=\"line\"><span class=\"regexp\">           immediate: true,/</span><span class=\"regexp\">/立刻监听,不用在data里进行第一次赋值</span></span><br><span class=\"line\"><span class=\"regexp\">           handler: function (val, oldVal) &#123; </span></span><br><span class=\"line\"><span class=\"regexp\">               this.articleForm = Object.assign(&#123;&#125;,val);</span></span><br><span class=\"line\"><span class=\"regexp\">           &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">       &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在父组件进行数据源深copy,子组件就可以随意了,符合需求(最佳)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;Edit :articleForm=<span class=\"string\">'rowData'</span> /&gt;<span class=\"comment\">//父调用子组件 rowData:&#123;title:\"xx\",content:\"xx\"&#125;</span></span><br><span class=\"line\">  \t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  \t\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\trowData:&#123;&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods()&#123;</span><br><span class=\"line\">\t   \tedit(row) &#123;<span class=\"comment\">//行点击事件,copy行数据</span></span><br><span class=\"line\">               <span class=\"keyword\">this</span>.rowData = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,row);</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;el-form :model=<span class=\"string\">\"articleForm\"</span> ref=<span class=\"string\">'articleForm'</span>&gt;<span class=\"comment\">//子组件</span></span><br><span class=\"line\">  \t&lt;el-form-item label=<span class=\"string\">\"标题\"</span>&gt;</span><br><span class=\"line\">  \t\t&lt;el-input v-model=<span class=\"string\">\"articleForm.title\"</span> placeholder=<span class=\"string\">\"请输入标题\"</span>&gt;&lt;<span class=\"regexp\">/el-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t&lt;/</span>el-form-item&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  \tdata() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t\timg_file: [],</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">  \t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  \tprops: [</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t'articleForm',//或者使用computed赋值(改名)</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t'type',</span></span><br><span class=\"line\"><span class=\"regexp\">  \t\t'reload'</span></span><br><span class=\"line\"><span class=\"regexp\">  \t],</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"_content":"```javascript\n\t//批量执行\n\tstate = {count: 1}\n\t// 只会执行一次 count=2（除非传入第二个参数回调函数）\n\tthis.setState({\n\t\tcount: this.state.count+1\n\t})\n\tthis.setState({\n\t\tcount: this.state.count+1\n\t})\n\tthis.setState({\n\t\tcount: this.state.count+1\n\t}) //执行此动作\n\t\n\t// 多次执行 count=4\n\tthis.setState(prevState => {\n\t\treturn {\n\t\t\tcount: prevState.count+1\n\t\t}\n\t})\n\tthis.setState(prevState => {\n\t\treturn {\n\t\t\tcount: prevState.count+1\n\t\t}\n\t})\n\tthis.setState(prevState => {\n\t\treturn {\n\t\t\tcount: prevState.count+1\n\t\t}\n\t})\n```","source":"_posts/react之setState.md","raw":"---\ncategories: \n- 前端\n- React\ntags:\n- React\n---\n```javascript\n\t//批量执行\n\tstate = {count: 1}\n\t// 只会执行一次 count=2（除非传入第二个参数回调函数）\n\tthis.setState({\n\t\tcount: this.state.count+1\n\t})\n\tthis.setState({\n\t\tcount: this.state.count+1\n\t})\n\tthis.setState({\n\t\tcount: this.state.count+1\n\t}) //执行此动作\n\t\n\t// 多次执行 count=4\n\tthis.setState(prevState => {\n\t\treturn {\n\t\t\tcount: prevState.count+1\n\t\t}\n\t})\n\tthis.setState(prevState => {\n\t\treturn {\n\t\t\tcount: prevState.count+1\n\t\t}\n\t})\n\tthis.setState(prevState => {\n\t\treturn {\n\t\t\tcount: prevState.count+1\n\t\t}\n\t})\n```","slug":"react之setState","published":1,"date":"2020-07-16T13:28:48.317Z","updated":"2020-07-17T12:09:38.462Z","title":"react之setState","_id":"ckcq5t243004f90vo8fih3h15","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//批量执行</span></span><br><span class=\"line\">state = &#123;<span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只会执行一次 count=2（除非传入第二个参数回调函数）</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">//执行此动作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多次执行 count=4</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tcount: prevState.count+<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tcount: prevState.count+<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tcount: prevState.count+<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//批量执行</span></span><br><span class=\"line\">state = &#123;<span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只会执行一次 count=2（除非传入第二个参数回调函数）</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">//执行此动作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多次执行 count=4</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tcount: prevState.count+<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tcount: prevState.count+<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tcount: prevState.count+<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"_content":"\n>### state\n\n场景: \n\n1. state其实就是一个对象,state的各种属性是用来共享的数据\n\n   ```js\n\tconst state = {\n   \t\tnum: 0\n\t}\n   ```\n\n>### action\n\n2.是把数据从应用传递到数据的唯一来源(我理解的就是事件描述:事件名type和其他可能包括新状态属性的参数),通过store.dispatch()调用该函数\n\n   ```js\n    const add = () => {\n      return {\n        type: 'ADD'\n      }\n    }\n   ```\n>### reducer\n\n3. 更新state的多个事件或者说是方法的集合,接收更新前的state和action(根据action返回的type类型,执行对应动作,返回新的state),以更新state\n\n   ```js\n   function counter (state={默认值}, action) {\n    switch (action.type) {\n    case 'ADD':\n      return {\n        ...state,\n        num: state.num + 1\n      }\n    case 'MINUS':\n      return {\n        ...state,\n        num: state.num - 1\n      }\n    default:\n      return state\n    }\n   }\n   ```\n>### store\n\n4. 将多个reducer进行合并,保存到store\n\n   ```js\n    import { createStore, applyMiddleware,combineReducers } from 'redux'\n    import thunkMiddleware from 'redux-thunk'\n    import { createLogger } from 'redux-logger'\n\n    import counter from './counter/reducers' //reducer1\n    import login from './login/reducers'  //reducer2\n\n    const rootReducer = combineReducers({\n      counter,\n      login\n    })\n\n    const middlewares = [\n      thunkMiddleware,\n      createLogger()\n    ]\n\n    export default function configStore () {\n      const store = createStore(rootReducer, applyMiddleware(...middlewares))\n      return store\n    }\n   ```\n5. 在项目入口使用store\n   ```js\n   \t\timport { Provider } from '@tarojs/redux'\n   \t\t\n   \t\t\t<Provider store={store}>\n            \t<Index />\n\t\t\t</Provider>\n   ```\n6. 项目内dispatch\n   ```js\n   import { counter } from '../../store/counter/actions'\n    @connect(({ login }) => ({\n      login\n    }), (dispatch) => ({\n    //传递事件onSubmit到当前组件\n      onSubmit1(data, fn) {\n        dispatch(counter(data))\n      },\n/*   onSubmit2(data, fn) {\n       //submit可以为一个promise的请求等异步操作   \n       dispatch(submit(data)).then(res => {\n         if (fn)\n           fn(res)\n       })\n      },\n   */\n    }))\n   ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/react-redux.md","raw":"﻿---\ncategories: \n- 前端\n- React\ntags:\n- react-redux\n---\n\n>### state\n\n场景: \n\n1. state其实就是一个对象,state的各种属性是用来共享的数据\n\n   ```js\n\tconst state = {\n   \t\tnum: 0\n\t}\n   ```\n\n>### action\n\n2.是把数据从应用传递到数据的唯一来源(我理解的就是事件描述:事件名type和其他可能包括新状态属性的参数),通过store.dispatch()调用该函数\n\n   ```js\n    const add = () => {\n      return {\n        type: 'ADD'\n      }\n    }\n   ```\n>### reducer\n\n3. 更新state的多个事件或者说是方法的集合,接收更新前的state和action(根据action返回的type类型,执行对应动作,返回新的state),以更新state\n\n   ```js\n   function counter (state={默认值}, action) {\n    switch (action.type) {\n    case 'ADD':\n      return {\n        ...state,\n        num: state.num + 1\n      }\n    case 'MINUS':\n      return {\n        ...state,\n        num: state.num - 1\n      }\n    default:\n      return state\n    }\n   }\n   ```\n>### store\n\n4. 将多个reducer进行合并,保存到store\n\n   ```js\n    import { createStore, applyMiddleware,combineReducers } from 'redux'\n    import thunkMiddleware from 'redux-thunk'\n    import { createLogger } from 'redux-logger'\n\n    import counter from './counter/reducers' //reducer1\n    import login from './login/reducers'  //reducer2\n\n    const rootReducer = combineReducers({\n      counter,\n      login\n    })\n\n    const middlewares = [\n      thunkMiddleware,\n      createLogger()\n    ]\n\n    export default function configStore () {\n      const store = createStore(rootReducer, applyMiddleware(...middlewares))\n      return store\n    }\n   ```\n5. 在项目入口使用store\n   ```js\n   \t\timport { Provider } from '@tarojs/redux'\n   \t\t\n   \t\t\t<Provider store={store}>\n            \t<Index />\n\t\t\t</Provider>\n   ```\n6. 项目内dispatch\n   ```js\n   import { counter } from '../../store/counter/actions'\n    @connect(({ login }) => ({\n      login\n    }), (dispatch) => ({\n    //传递事件onSubmit到当前组件\n      onSubmit1(data, fn) {\n        dispatch(counter(data))\n      },\n/*   onSubmit2(data, fn) {\n       //submit可以为一个promise的请求等异步操作   \n       dispatch(submit(data)).then(res => {\n         if (fn)\n           fn(res)\n       })\n      },\n   */\n    }))\n   ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"react-redux","published":1,"date":"2020-07-16T13:28:48.077Z","updated":"2020-07-17T12:10:43.133Z","title":"react-redux","_id":"ckcq5tam8004i90vo41tw7bv3","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3></blockquote>\n<p>场景: </p>\n<ol>\n<li><p>state其实就是一个对象,state的各种属性是用来共享的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  \t\tnum: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<blockquote>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3></blockquote>\n<p>2.是把数据从应用传递到数据的唯一来源(我理解的就是事件描述:事件名type和其他可能包括新状态属性的参数),通过store.dispatch()调用该函数</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'ADD'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h3></blockquote>\n<ol start=\"3\">\n<li><p>更新state的多个事件或者说是方法的集合,接收更新前的state和action(根据action返回的type类型,执行对应动作,返回新的state),以更新state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span> (<span class=\"params\">state=&#123;默认值&#125;, action</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'ADD'</span>:</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     ...state,</span><br><span class=\"line\">     num: state.num + <span class=\"number\">1</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'MINUS'</span>:</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     ...state,</span><br><span class=\"line\">     num: state.num - <span class=\"number\">1</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\">   <span class=\"keyword\">return</span> state</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3></blockquote>\n</li>\n<li><p>将多个reducer进行合并,保存到store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware,combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> thunkMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createLogger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-logger'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> counter <span class=\"keyword\">from</span> <span class=\"string\">'./counter/reducers'</span> <span class=\"comment\">//reducer1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> login <span class=\"keyword\">from</span> <span class=\"string\">'./login/reducers'</span>  <span class=\"comment\">//reducer2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootReducer = combineReducers(&#123;</span><br><span class=\"line\">  counter,</span><br><span class=\"line\">  login</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewares = [</span><br><span class=\"line\">  thunkMiddleware,</span><br><span class=\"line\">  createLogger()</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configStore</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = createStore(rootReducer, applyMiddleware(...middlewares))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在项目入口使用store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@tarojs/redux'</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t&lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">         \t&lt;Index /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Provider&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>项目内dispatch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">import</span> &#123; counter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../store/counter/actions'</span></span><br><span class=\"line\">    @connect(<span class=\"function\">(<span class=\"params\">&#123; login &#125;</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      login</span><br><span class=\"line\">    &#125;), (dispatch) =&gt; (&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传递事件onSubmit到当前组件</span></span><br><span class=\"line\">      onSubmit1(data, fn) &#123;</span><br><span class=\"line\">        dispatch(counter(data))</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"comment\">/*   onSubmit2(data, fn) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">       //submit可以为一个promise的请求等异步操作   </span></span><br><span class=\"line\"><span class=\"comment\">       dispatch(submit(data)).then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         if (fn)</span></span><br><span class=\"line\"><span class=\"comment\">           fn(res)</span></span><br><span class=\"line\"><span class=\"comment\">       &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">    &#125;))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3></blockquote>\n<p>场景: </p>\n<ol>\n<li><p>state其实就是一个对象,state的各种属性是用来共享的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  \t\tnum: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<blockquote>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3></blockquote>\n<p>2.是把数据从应用传递到数据的唯一来源(我理解的就是事件描述:事件名type和其他可能包括新状态属性的参数),通过store.dispatch()调用该函数</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'ADD'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h3></blockquote>\n<ol start=\"3\">\n<li><p>更新state的多个事件或者说是方法的集合,接收更新前的state和action(根据action返回的type类型,执行对应动作,返回新的state),以更新state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span> (<span class=\"params\">state=&#123;默认值&#125;, action</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'ADD'</span>:</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     ...state,</span><br><span class=\"line\">     num: state.num + <span class=\"number\">1</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'MINUS'</span>:</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     ...state,</span><br><span class=\"line\">     num: state.num - <span class=\"number\">1</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\">   <span class=\"keyword\">return</span> state</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3></blockquote>\n</li>\n<li><p>将多个reducer进行合并,保存到store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware,combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> thunkMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createLogger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-logger'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> counter <span class=\"keyword\">from</span> <span class=\"string\">'./counter/reducers'</span> <span class=\"comment\">//reducer1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> login <span class=\"keyword\">from</span> <span class=\"string\">'./login/reducers'</span>  <span class=\"comment\">//reducer2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootReducer = combineReducers(&#123;</span><br><span class=\"line\">  counter,</span><br><span class=\"line\">  login</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewares = [</span><br><span class=\"line\">  thunkMiddleware,</span><br><span class=\"line\">  createLogger()</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configStore</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = createStore(rootReducer, applyMiddleware(...middlewares))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在项目入口使用store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@tarojs/redux'</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t&lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">         \t&lt;Index /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Provider&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>项目内dispatch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">import</span> &#123; counter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../store/counter/actions'</span></span><br><span class=\"line\">    @connect(<span class=\"function\">(<span class=\"params\">&#123; login &#125;</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      login</span><br><span class=\"line\">    &#125;), (dispatch) =&gt; (&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传递事件onSubmit到当前组件</span></span><br><span class=\"line\">      onSubmit1(data, fn) &#123;</span><br><span class=\"line\">        dispatch(counter(data))</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"comment\">/*   onSubmit2(data, fn) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">       //submit可以为一个promise的请求等异步操作   </span></span><br><span class=\"line\"><span class=\"comment\">       dispatch(submit(data)).then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         if (fn)</span></span><br><span class=\"line\"><span class=\"comment\">           fn(res)</span></span><br><span class=\"line\"><span class=\"comment\">       &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">    &#125;))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ol>\n"},{"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hexo.md","raw":"---\ncategories: \n- 前端\n- 其他\ntags:\n- Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hexo","published":1,"date":"2020-07-16T13:06:41.832Z","updated":"2020-07-17T11:52:09.314Z","title":"hexo","_id":"ckcq5x0tt0000lwvog45i8qpu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"## JavaScript设计模式\n\n[前端大学](javascript:void(0);) *4月9日*\n\n\n\n（给前端大学加星标，提升前端技能.）\n\n> 作者:考拉海购前端团队\n>\n> https://juejin.im/post/59df4f74f265da430f311909\n\n设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案\n\n当然我们可以用一个通俗的说法：设计模式是解决某个特定场景下对某种问题的解决方案。因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式。\n\n比如，当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。\n\n下面介绍几种在JavaScript中常见的几种设计模式：\n\n## **1、单例模式**\n\n**单例模式的定义：**保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。\n\n适用场景：一个单一对象。比如：弹窗，无论点击多少次，弹窗只应该被创建一次。\n\n```javascript\nclass CreateUser {    \n    constructor(name) {        \n    this.name = name;        \n    this.getName();    \n\t}    \n\tgetName() {         return this.name;    }\n}\n// 代理实现单例模式\nvar ProxyMode = (function() {    \n\tvar instance = null;    \n    return function(name) {        \n        if(!instance) {            \n        instance = new CreateUser(name);        \n        }       \n        return instance;    \n    }\n})();\n// 测试单体模式的实例\nvar a = new ProxyMode(\"aaa\");\nvar b = new ProxyMode(\"bbb\");\n// 因为单体模式是只实例化一次，所以下面的实例是相等的\nconsole.log(a === b);    //true\n```\n\n## **2、策略模式**\n\n策略模式的定义：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。\n\n策略模式的目的就是将算法的使用算法的实现分离开来。\n\n一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类（可变），策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context（不变），Context接受客户的请求，随后将请求委托给某一个策略类。要做到这一点，说明Context中要维持对某个策略对象的引用。\n\n```javascript\n/*策略类*/\nvar levelOBJ = {    \n\"A\": function(money) {        return money * 4;    },    \n\"B\" : function(money) {        return money * 3;    },    \n\"C\" : function(money) {        return money * 2;    } \n};\n/*环境类*/\nvar calculateBouns =function(level,money) {    \nreturn levelOBJ[level](money);\n};\nconsole.log(calculateBouns('A',10000)); // 40000\n```\n\n## **3、代理模式**\n\n**代理模式的定义：**为一个对象提供一个代用品或占位符，以便控制对它的访问。\n\n常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）\n\n图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。\n\n```javascript\nvar imgFunc = (function() {    \n    var imgNode = document.createElement('img');   \t\n    document.body.appendChild(imgNode);    \n    return {        \n    setSrc: function(src) {            imgNode.src = src;        }    \n    }\n})();\nvar proxyImage = (function() {    \n    var img = new Image();    \n    img.onload = function() {        imgFunc.setSrc(this.src);    }   \n    return {        \n        setSrc: function(src) {           \n            imgFunc.setSrc('./loading,gif');       \n            img.src = src;        \n        }    \n    }\n})();\nproxyImage.setSrc('./pic.png');\n```\n\n使用代理模式实现图片懒加载的优点还有符合单一职责原则。减少一个类或方法的粒度和耦合度。\n\n## **4、中介者模式**\n\n**中介者模式的定义：**通过一个中介者对象，其他所有的相关对象都通过该中介者对象来通信，而不是相互引用，当其中的一个对象发生改变时，只需要通知中介者对象即可。通过中介者模式可以解除对象与对象之间的紧耦合关系。\n\n例如：现实生活中，航线上的飞机只需要和机场的塔台通信就能确定航线和飞行状态，而不需要和所有飞机通信。同时塔台作为中介者，知道每架飞机的飞行状态，所以可以安排所有飞机的起降和航线安排。\n\n中介者模式适用的场景：例如购物车需求，存在商品选择表单、颜色选择表单、购买数量表单等等，都会触发change事件，那么可以通过中介者来转发处理这些事件，实现各个事件间的解耦，仅仅维护中介者对象即可。\n\n```javascript\nvar goods = {   //手机库存    \n'red|32G': 3,    \n'red|64G': 1,    \n'blue|32G': 7,    \n'blue|32G': 6,\n};\n//中介者var \nmediator = (function() {    \n    var colorSelect = document.getElementById('colorSelect');    \n    var memorySelect = document.getElementById('memorySelect');    \n    var numSelect = document.getElementById('numSelect');    \n    return {        \n        changed: function(obj) {            \n            switch(obj){                \n            case colorSelect:                    //TODO\n            break;                \n            case memorySelect:                    //TODO  \n            break;                \n            case numSelect:                    //TODO                    \n            break;            \n            }        \n        }    \n    }\n})();\ncolorSelect.onchange = function() {    mediator.changed(this);};\nmemorySelect.onchange = function() {    mediator.changed(this);};\nnumSelect.onchange = function() {    mediator.changed(this);};\n```\n\n## **5、装饰者模式**\n\n**装饰者模式的定义：**在不改变对象自身的基础上，在程序运行期间给对象动态地添加方法。\n\n例如：现有4种型号的自行车分别被定义成一个单独的类，如果给每辆自行车都加上前灯、尾灯、铃铛这3个配件，如果用类继承的方式，需要创建4*3=12个子类。但如果通过装饰者模式，只需要创建3个类。\n\n装饰者模式适用的场景：原有方法维持不变，在原有方法上再挂载其他方法来满足现有需求；函数的解耦，将函数拆分成多个可复用的函数，再将拆分出来的函数挂载到某个函数上，实现相同的效果但增强了复用性。\n\n例：用AOP装饰函数实现装饰者模式\n\n```javascript\nFunction.prototype.before = function(beforefn) {\n    var self = this;    //保存原函数引用    \n    return function(){  //返回包含了原函数和新函数的 '代理函数'\n\tbeforefn.apply(this, arguments);    //执行新函数，修正this        \n    return self.apply(this,arguments);  //执行原函数    \n    }\n}\nFunction.prototype.after = function(afterfn) {    \n    var self = this;    \n    return function(){        \n        var ret = self.apply(this,arguments);        \n        afterfn.apply(this, arguments);        \n        return ret;    \n    }\n}\nvar func = function() {    \nconsole.log('2');}//func1和func3为挂载函数\nvar func1 = function() {    console.log('1');}\nvar func3 = function() {    console.log('3');}\nfunc = func.before(func1).after(func3);\nfunc();\n```","source":"_posts/javaScript设计模式.md","raw":"---\ncategories: \n- 前端\n- 面向对象\ntags:\n- 设计模式\n---\n## JavaScript设计模式\n\n[前端大学](javascript:void(0);) *4月9日*\n\n\n\n（给前端大学加星标，提升前端技能.）\n\n> 作者:考拉海购前端团队\n>\n> https://juejin.im/post/59df4f74f265da430f311909\n\n设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案\n\n当然我们可以用一个通俗的说法：设计模式是解决某个特定场景下对某种问题的解决方案。因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式。\n\n比如，当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。\n\n下面介绍几种在JavaScript中常见的几种设计模式：\n\n## **1、单例模式**\n\n**单例模式的定义：**保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。\n\n适用场景：一个单一对象。比如：弹窗，无论点击多少次，弹窗只应该被创建一次。\n\n```javascript\nclass CreateUser {    \n    constructor(name) {        \n    this.name = name;        \n    this.getName();    \n\t}    \n\tgetName() {         return this.name;    }\n}\n// 代理实现单例模式\nvar ProxyMode = (function() {    \n\tvar instance = null;    \n    return function(name) {        \n        if(!instance) {            \n        instance = new CreateUser(name);        \n        }       \n        return instance;    \n    }\n})();\n// 测试单体模式的实例\nvar a = new ProxyMode(\"aaa\");\nvar b = new ProxyMode(\"bbb\");\n// 因为单体模式是只实例化一次，所以下面的实例是相等的\nconsole.log(a === b);    //true\n```\n\n## **2、策略模式**\n\n策略模式的定义：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。\n\n策略模式的目的就是将算法的使用算法的实现分离开来。\n\n一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类（可变），策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context（不变），Context接受客户的请求，随后将请求委托给某一个策略类。要做到这一点，说明Context中要维持对某个策略对象的引用。\n\n```javascript\n/*策略类*/\nvar levelOBJ = {    \n\"A\": function(money) {        return money * 4;    },    \n\"B\" : function(money) {        return money * 3;    },    \n\"C\" : function(money) {        return money * 2;    } \n};\n/*环境类*/\nvar calculateBouns =function(level,money) {    \nreturn levelOBJ[level](money);\n};\nconsole.log(calculateBouns('A',10000)); // 40000\n```\n\n## **3、代理模式**\n\n**代理模式的定义：**为一个对象提供一个代用品或占位符，以便控制对它的访问。\n\n常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）\n\n图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。\n\n```javascript\nvar imgFunc = (function() {    \n    var imgNode = document.createElement('img');   \t\n    document.body.appendChild(imgNode);    \n    return {        \n    setSrc: function(src) {            imgNode.src = src;        }    \n    }\n})();\nvar proxyImage = (function() {    \n    var img = new Image();    \n    img.onload = function() {        imgFunc.setSrc(this.src);    }   \n    return {        \n        setSrc: function(src) {           \n            imgFunc.setSrc('./loading,gif');       \n            img.src = src;        \n        }    \n    }\n})();\nproxyImage.setSrc('./pic.png');\n```\n\n使用代理模式实现图片懒加载的优点还有符合单一职责原则。减少一个类或方法的粒度和耦合度。\n\n## **4、中介者模式**\n\n**中介者模式的定义：**通过一个中介者对象，其他所有的相关对象都通过该中介者对象来通信，而不是相互引用，当其中的一个对象发生改变时，只需要通知中介者对象即可。通过中介者模式可以解除对象与对象之间的紧耦合关系。\n\n例如：现实生活中，航线上的飞机只需要和机场的塔台通信就能确定航线和飞行状态，而不需要和所有飞机通信。同时塔台作为中介者，知道每架飞机的飞行状态，所以可以安排所有飞机的起降和航线安排。\n\n中介者模式适用的场景：例如购物车需求，存在商品选择表单、颜色选择表单、购买数量表单等等，都会触发change事件，那么可以通过中介者来转发处理这些事件，实现各个事件间的解耦，仅仅维护中介者对象即可。\n\n```javascript\nvar goods = {   //手机库存    \n'red|32G': 3,    \n'red|64G': 1,    \n'blue|32G': 7,    \n'blue|32G': 6,\n};\n//中介者var \nmediator = (function() {    \n    var colorSelect = document.getElementById('colorSelect');    \n    var memorySelect = document.getElementById('memorySelect');    \n    var numSelect = document.getElementById('numSelect');    \n    return {        \n        changed: function(obj) {            \n            switch(obj){                \n            case colorSelect:                    //TODO\n            break;                \n            case memorySelect:                    //TODO  \n            break;                \n            case numSelect:                    //TODO                    \n            break;            \n            }        \n        }    \n    }\n})();\ncolorSelect.onchange = function() {    mediator.changed(this);};\nmemorySelect.onchange = function() {    mediator.changed(this);};\nnumSelect.onchange = function() {    mediator.changed(this);};\n```\n\n## **5、装饰者模式**\n\n**装饰者模式的定义：**在不改变对象自身的基础上，在程序运行期间给对象动态地添加方法。\n\n例如：现有4种型号的自行车分别被定义成一个单独的类，如果给每辆自行车都加上前灯、尾灯、铃铛这3个配件，如果用类继承的方式，需要创建4*3=12个子类。但如果通过装饰者模式，只需要创建3个类。\n\n装饰者模式适用的场景：原有方法维持不变，在原有方法上再挂载其他方法来满足现有需求；函数的解耦，将函数拆分成多个可复用的函数，再将拆分出来的函数挂载到某个函数上，实现相同的效果但增强了复用性。\n\n例：用AOP装饰函数实现装饰者模式\n\n```javascript\nFunction.prototype.before = function(beforefn) {\n    var self = this;    //保存原函数引用    \n    return function(){  //返回包含了原函数和新函数的 '代理函数'\n\tbeforefn.apply(this, arguments);    //执行新函数，修正this        \n    return self.apply(this,arguments);  //执行原函数    \n    }\n}\nFunction.prototype.after = function(afterfn) {    \n    var self = this;    \n    return function(){        \n        var ret = self.apply(this,arguments);        \n        afterfn.apply(this, arguments);        \n        return ret;    \n    }\n}\nvar func = function() {    \nconsole.log('2');}//func1和func3为挂载函数\nvar func1 = function() {    console.log('1');}\nvar func3 = function() {    console.log('3');}\nfunc = func.before(func1).after(func3);\nfunc();\n```","slug":"javaScript设计模式","published":1,"date":"2020-07-16T13:28:48.186Z","updated":"2020-07-17T11:52:20.203Z","title":"javaScript设计模式","_id":"ckcq5x9870004lwvoetm0f7kk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h2><p><a href=\"javascript:void(0);\">前端大学</a> <em>4月9日</em></p>\n<p>（给前端大学加星标，提升前端技能.）</p>\n<blockquote>\n<p>作者:考拉海购前端团队</p>\n<p><a href=\"https://juejin.im/post/59df4f74f265da430f311909\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59df4f74f265da430f311909</a></p>\n</blockquote>\n<p>设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案</p>\n<p>当然我们可以用一个通俗的说法：设计模式是解决某个特定场景下对某种问题的解决方案。因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式。</p>\n<p>比如，当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。</p>\n<p>下面介绍几种在JavaScript中常见的几种设计模式：</p>\n<h2 id=\"1、单例模式\"><a href=\"#1、单例模式\" class=\"headerlink\" title=\"1、单例模式\"></a><strong>1、单例模式</strong></h2><p><strong>单例模式的定义：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</p>\n<p>适用场景：一个单一对象。比如：弹窗，无论点击多少次，弹窗只应该被创建一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateUser</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;        </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;        </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName();    </span><br><span class=\"line\">\t&#125;    </span><br><span class=\"line\">\tgetName() &#123;         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 代理实现单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ProxyMode = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">\t<span class=\"keyword\">var</span> instance = <span class=\"literal\">null</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!instance) &#123;            </span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> CreateUser(name);        </span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 测试单体模式的实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ProxyMode(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> ProxyMode(<span class=\"string\">\"bbb\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 因为单体模式是只实例化一次，所以下面的实例是相等的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b);    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、策略模式\"><a href=\"#2、策略模式\" class=\"headerlink\" title=\"2、策略模式\"></a><strong>2、策略模式</strong></h2><p>策略模式的定义：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。</p>\n<p>策略模式的目的就是将算法的使用算法的实现分离开来。</p>\n<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类（可变），策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context（不变），Context接受客户的请求，随后将请求委托给某一个策略类。要做到这一点，说明Context中要维持对某个策略对象的引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*策略类*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelOBJ = &#123;    </span><br><span class=\"line\"><span class=\"string\">\"A\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;        <span class=\"keyword\">return</span> money * <span class=\"number\">4</span>;    &#125;,    </span><br><span class=\"line\"><span class=\"string\">\"B\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;        <span class=\"keyword\">return</span> money * <span class=\"number\">3</span>;    &#125;,    </span><br><span class=\"line\"><span class=\"string\">\"C\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;        <span class=\"keyword\">return</span> money * <span class=\"number\">2</span>;    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*环境类*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> calculateBouns =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,money</span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"keyword\">return</span> levelOBJ[level](money);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(calculateBouns(<span class=\"string\">'A'</span>,<span class=\"number\">10000</span>)); <span class=\"comment\">// 40000</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、代理模式\"><a href=\"#3、代理模式\" class=\"headerlink\" title=\"3、代理模式\"></a><strong>3、代理模式</strong></h2><p><strong>代理模式的定义：</strong>为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n<p>常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）</p>\n<p>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imgFunc = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);   \t</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(imgNode);    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">    setSrc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;            imgNode.src = src;        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxyImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();    </span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;        imgFunc.setSrc(<span class=\"keyword\">this</span>.src);    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        setSrc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;           </span><br><span class=\"line\">            imgFunc.setSrc(<span class=\"string\">'./loading,gif'</span>);       </span><br><span class=\"line\">            img.src = src;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">proxyImage.setSrc(<span class=\"string\">'./pic.png'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用代理模式实现图片懒加载的优点还有符合单一职责原则。减少一个类或方法的粒度和耦合度。</p>\n<h2 id=\"4、中介者模式\"><a href=\"#4、中介者模式\" class=\"headerlink\" title=\"4、中介者模式\"></a><strong>4、中介者模式</strong></h2><p><strong>中介者模式的定义：</strong>通过一个中介者对象，其他所有的相关对象都通过该中介者对象来通信，而不是相互引用，当其中的一个对象发生改变时，只需要通知中介者对象即可。通过中介者模式可以解除对象与对象之间的紧耦合关系。</p>\n<p>例如：现实生活中，航线上的飞机只需要和机场的塔台通信就能确定航线和飞行状态，而不需要和所有飞机通信。同时塔台作为中介者，知道每架飞机的飞行状态，所以可以安排所有飞机的起降和航线安排。</p>\n<p>中介者模式适用的场景：例如购物车需求，存在商品选择表单、颜色选择表单、购买数量表单等等，都会触发change事件，那么可以通过中介者来转发处理这些事件，实现各个事件间的解耦，仅仅维护中介者对象即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> goods = &#123;   <span class=\"comment\">//手机库存    </span></span><br><span class=\"line\"><span class=\"string\">'red|32G'</span>: <span class=\"number\">3</span>,    </span><br><span class=\"line\"><span class=\"string\">'red|64G'</span>: <span class=\"number\">1</span>,    </span><br><span class=\"line\"><span class=\"string\">'blue|32G'</span>: <span class=\"number\">7</span>,    </span><br><span class=\"line\"><span class=\"string\">'blue|32G'</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//中介者var </span></span><br><span class=\"line\">mediator = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> colorSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'colorSelect'</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> memorySelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'memorySelect'</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> numSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'numSelect'</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        changed: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(obj)&#123;                </span><br><span class=\"line\">            <span class=\"keyword\">case</span> colorSelect:                    <span class=\"comment\">//TODO</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;                </span><br><span class=\"line\">            <span class=\"keyword\">case</span> memorySelect:                    <span class=\"comment\">//TODO  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;                </span><br><span class=\"line\">            <span class=\"keyword\">case</span> numSelect:                    <span class=\"comment\">//TODO                    </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;            </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">colorSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    mediator.changed(<span class=\"keyword\">this</span>);&#125;;</span><br><span class=\"line\">memorySelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    mediator.changed(<span class=\"keyword\">this</span>);&#125;;</span><br><span class=\"line\">numSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    mediator.changed(<span class=\"keyword\">this</span>);&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、装饰者模式\"><a href=\"#5、装饰者模式\" class=\"headerlink\" title=\"5、装饰者模式\"></a><strong>5、装饰者模式</strong></h2><p><strong>装饰者模式的定义：</strong>在不改变对象自身的基础上，在程序运行期间给对象动态地添加方法。</p>\n<p>例如：现有4种型号的自行车分别被定义成一个单独的类，如果给每辆自行车都加上前灯、尾灯、铃铛这3个配件，如果用类继承的方式，需要创建4*3=12个子类。但如果通过装饰者模式，只需要创建3个类。</p>\n<p>装饰者模式适用的场景：原有方法维持不变，在原有方法上再挂载其他方法来满足现有需求；函数的解耦，将函数拆分成多个可复用的函数，再将拆分出来的函数挂载到某个函数上，实现相同的效果但增强了复用性。</p>\n<p>例：用AOP装饰函数实现装饰者模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforefn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;    <span class=\"comment\">//保存原函数引用    </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//返回包含了原函数和新函数的 '代理函数'</span></span><br><span class=\"line\">\tbeforefn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);    <span class=\"comment\">//执行新函数，修正this        </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);  <span class=\"comment\">//执行原函数    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterfn</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);        </span><br><span class=\"line\">        afterfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>);&#125;<span class=\"comment\">//func1和func3为挂载函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);&#125;</span><br><span class=\"line\">func = func.before(func1).after(func3);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h2><p><a href=\"javascript:void(0);\">前端大学</a> <em>4月9日</em></p>\n<p>（给前端大学加星标，提升前端技能.）</p>\n<blockquote>\n<p>作者:考拉海购前端团队</p>\n<p><a href=\"https://juejin.im/post/59df4f74f265da430f311909\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59df4f74f265da430f311909</a></p>\n</blockquote>\n<p>设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案</p>\n<p>当然我们可以用一个通俗的说法：设计模式是解决某个特定场景下对某种问题的解决方案。因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式。</p>\n<p>比如，当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。</p>\n<p>下面介绍几种在JavaScript中常见的几种设计模式：</p>\n<h2 id=\"1、单例模式\"><a href=\"#1、单例模式\" class=\"headerlink\" title=\"1、单例模式\"></a><strong>1、单例模式</strong></h2><p><strong>单例模式的定义：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</p>\n<p>适用场景：一个单一对象。比如：弹窗，无论点击多少次，弹窗只应该被创建一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateUser</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;        </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;        </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName();    </span><br><span class=\"line\">\t&#125;    </span><br><span class=\"line\">\tgetName() &#123;         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 代理实现单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ProxyMode = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">\t<span class=\"keyword\">var</span> instance = <span class=\"literal\">null</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!instance) &#123;            </span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> CreateUser(name);        </span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 测试单体模式的实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ProxyMode(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> ProxyMode(<span class=\"string\">\"bbb\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 因为单体模式是只实例化一次，所以下面的实例是相等的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b);    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、策略模式\"><a href=\"#2、策略模式\" class=\"headerlink\" title=\"2、策略模式\"></a><strong>2、策略模式</strong></h2><p>策略模式的定义：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。</p>\n<p>策略模式的目的就是将算法的使用算法的实现分离开来。</p>\n<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类（可变），策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context（不变），Context接受客户的请求，随后将请求委托给某一个策略类。要做到这一点，说明Context中要维持对某个策略对象的引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*策略类*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelOBJ = &#123;    </span><br><span class=\"line\"><span class=\"string\">\"A\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;        <span class=\"keyword\">return</span> money * <span class=\"number\">4</span>;    &#125;,    </span><br><span class=\"line\"><span class=\"string\">\"B\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;        <span class=\"keyword\">return</span> money * <span class=\"number\">3</span>;    &#125;,    </span><br><span class=\"line\"><span class=\"string\">\"C\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;        <span class=\"keyword\">return</span> money * <span class=\"number\">2</span>;    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*环境类*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> calculateBouns =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,money</span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"keyword\">return</span> levelOBJ[level](money);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(calculateBouns(<span class=\"string\">'A'</span>,<span class=\"number\">10000</span>)); <span class=\"comment\">// 40000</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、代理模式\"><a href=\"#3、代理模式\" class=\"headerlink\" title=\"3、代理模式\"></a><strong>3、代理模式</strong></h2><p><strong>代理模式的定义：</strong>为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n<p>常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）</p>\n<p>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imgFunc = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);   \t</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(imgNode);    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">    setSrc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;            imgNode.src = src;        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxyImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();    </span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;        imgFunc.setSrc(<span class=\"keyword\">this</span>.src);    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        setSrc: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;           </span><br><span class=\"line\">            imgFunc.setSrc(<span class=\"string\">'./loading,gif'</span>);       </span><br><span class=\"line\">            img.src = src;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">proxyImage.setSrc(<span class=\"string\">'./pic.png'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用代理模式实现图片懒加载的优点还有符合单一职责原则。减少一个类或方法的粒度和耦合度。</p>\n<h2 id=\"4、中介者模式\"><a href=\"#4、中介者模式\" class=\"headerlink\" title=\"4、中介者模式\"></a><strong>4、中介者模式</strong></h2><p><strong>中介者模式的定义：</strong>通过一个中介者对象，其他所有的相关对象都通过该中介者对象来通信，而不是相互引用，当其中的一个对象发生改变时，只需要通知中介者对象即可。通过中介者模式可以解除对象与对象之间的紧耦合关系。</p>\n<p>例如：现实生活中，航线上的飞机只需要和机场的塔台通信就能确定航线和飞行状态，而不需要和所有飞机通信。同时塔台作为中介者，知道每架飞机的飞行状态，所以可以安排所有飞机的起降和航线安排。</p>\n<p>中介者模式适用的场景：例如购物车需求，存在商品选择表单、颜色选择表单、购买数量表单等等，都会触发change事件，那么可以通过中介者来转发处理这些事件，实现各个事件间的解耦，仅仅维护中介者对象即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> goods = &#123;   <span class=\"comment\">//手机库存    </span></span><br><span class=\"line\"><span class=\"string\">'red|32G'</span>: <span class=\"number\">3</span>,    </span><br><span class=\"line\"><span class=\"string\">'red|64G'</span>: <span class=\"number\">1</span>,    </span><br><span class=\"line\"><span class=\"string\">'blue|32G'</span>: <span class=\"number\">7</span>,    </span><br><span class=\"line\"><span class=\"string\">'blue|32G'</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//中介者var </span></span><br><span class=\"line\">mediator = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> colorSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'colorSelect'</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> memorySelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'memorySelect'</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> numSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'numSelect'</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        changed: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(obj)&#123;                </span><br><span class=\"line\">            <span class=\"keyword\">case</span> colorSelect:                    <span class=\"comment\">//TODO</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;                </span><br><span class=\"line\">            <span class=\"keyword\">case</span> memorySelect:                    <span class=\"comment\">//TODO  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;                </span><br><span class=\"line\">            <span class=\"keyword\">case</span> numSelect:                    <span class=\"comment\">//TODO                    </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;            </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">colorSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    mediator.changed(<span class=\"keyword\">this</span>);&#125;;</span><br><span class=\"line\">memorySelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    mediator.changed(<span class=\"keyword\">this</span>);&#125;;</span><br><span class=\"line\">numSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    mediator.changed(<span class=\"keyword\">this</span>);&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、装饰者模式\"><a href=\"#5、装饰者模式\" class=\"headerlink\" title=\"5、装饰者模式\"></a><strong>5、装饰者模式</strong></h2><p><strong>装饰者模式的定义：</strong>在不改变对象自身的基础上，在程序运行期间给对象动态地添加方法。</p>\n<p>例如：现有4种型号的自行车分别被定义成一个单独的类，如果给每辆自行车都加上前灯、尾灯、铃铛这3个配件，如果用类继承的方式，需要创建4*3=12个子类。但如果通过装饰者模式，只需要创建3个类。</p>\n<p>装饰者模式适用的场景：原有方法维持不变，在原有方法上再挂载其他方法来满足现有需求；函数的解耦，将函数拆分成多个可复用的函数，再将拆分出来的函数挂载到某个函数上，实现相同的效果但增强了复用性。</p>\n<p>例：用AOP装饰函数实现装饰者模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforefn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;    <span class=\"comment\">//保存原函数引用    </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//返回包含了原函数和新函数的 '代理函数'</span></span><br><span class=\"line\">\tbeforefn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);    <span class=\"comment\">//执行新函数，修正this        </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);  <span class=\"comment\">//执行原函数    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterfn</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);        </span><br><span class=\"line\">        afterfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>);&#125;<span class=\"comment\">//func1和func3为挂载函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);&#125;</span><br><span class=\"line\">func = func.before(func1).after(func3);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>"},{"_content":"## JavaScript深入之继承的多种方式和优缺点\n\n[前端大学](javascript:void(0);) \n（给前端大学加星标，提升前端技能.）\n\n> 作者：mqyqingfeng\n>\n> https://github.com/mqyqingfeng/Blog/issues/16\n\n## **写在前面** \n\n本文讲解JavaScript各种继承方式和优缺点。\n\n但是注意：\n\n这篇文章更像是笔记，哎，再让我感叹一句：《JavaScript高级程序设计》写得真是太好了！\n\n## **1、原型链继承**\n\n\n\n```javascript\nfunction Parent () {    \n    this.name = 'kevin';\n}\nParent.prototype.getName = function () {    console.log(this.name);}\nfunction Child () {}\nChild.prototype = new Parent();\nvar child1 = new Child();\nconsole.log(child1.getName()) // kevin\n```\n\n**问题：**\n\n1、引用类型的属性被所有实例共享，举个例子：\n\n```javascript\nfunction Parent () {    this.names = ['kevin', 'daisy'];}function Child () {}Child.prototype = new Parent();var child1 = new Child();child1.names.push('yayu');console.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\", \"yayu\"]\n```\n\n2、在创建 Child 的实例时，不能向Parent传参\n\n## **2、借用构造函数(经典继承)**\n\n\n```javascript\nfunction Parent () {    this.names = ['kevin', 'daisy'];}function Child () {    Parent.call(this);}var child1 = new Child();child1.names.push('yayu');console.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\"]\n```\n\n**优点：**\n\n1、避免了引用类型的属性被所有实例共享\n\n2、可以在 Child 中向 Parent 传参\n\n**举个例子：**\n\n\n```javascript\nfunction Parent (name) {    \n\tthis.name = name;\n}\nfunction Child (name) {\n\tParent.call(this, name);\n}\nvar child1 = new Child('kevin');\nconsole.log(child1.name); // kevin\nvar child2 = new Child('daisy');\nconsole.log(child2.name); // daisy\n```\n\n**缺点：**\n\n方法都在构造函数中定义，每次创建实例都会创建一遍方法。\n\n## **3、组合继承**\n\n原型链继承和经典继承双剑合璧。\n\n\n```javascript\nfunction Parent (name) {    \nthis.name = name;    \nthis.colors = ['red', 'blue', 'green'];}\nParent.prototype.getName = function () {    \nconsole.log(this.name)}\nfunction Child (name, age) {\n    Parent.call(this, name);        \n    this.age = age;\n}\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\nvar child1 = new Child('kevin', '18');\nchild1.colors.push('black');\nconsole.log(child1.name); // kevin\nconsole.log(child1.age); // 18\nconsole.log(child1.colors); // [\"red\", \"blue\", \"green\", \"black\"]\nvar child2 = new Child('daisy', '20');\nconsole.log(child2.name); // daisy\nconsole.log(child2.age); // 20\nconsole.log(child2.colors); // [\"red\", \"blue\", \"green\"]\n```\n\n优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。\n\n## **4、原型式继承**\n\n```javascript\nfunction createObj(o) {    \n    function F(){}    \n    F.prototype = o;    \n    return new F();\n}\n```\n\n就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。\n\n**缺点：**\n\n包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。\n\n\n```javascript\nvar person = {    \n    name: 'kevin',    \n    friends: ['daisy', 'kelly']\n}\nvar person1 = createObj(person);\nvar person2 = createObj(person);\nperson1.name = 'person1';\nconsole.log(person2.name); // kevin\nperson1.firends.push('taylor');\nconsole.log(person2.friends); // [\"daisy\", \"kelly\", \"taylor\"]\n```\n\n注意：修改`person1.name`的值，`person2.name`的值并未发生改变，并不是因为`person1`和`person2`有独立的 name 值，而是因为`person1.name = 'person1'`，给`person1`添加了 name 值，并非修改了原型上的 name 值。\n\n## **5、寄生式继承**\n\n创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。\n\n```javascript\nfunction createObj (o) {    \n    var clone = Object.create(o);    \n    clone.sayName = function () { console.log('hi'); }    \n    return clone;\n}\n```\n\n缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。\n\n## **6、寄生组合式继承**\n\n为了方便大家阅读，在这里重复一下组合继承的代码：\n\n```javascript\nfunction Parent (name) {    \n    this.name = name;    \n    this.colors = ['red', 'blue', 'green'];\n}\nParent.prototype.getName = function () {    console.log(this.name)}\nfunction Child (name, age) {    \n    Parent.call(this, name);    \n    this.age = age;\n}\nChild.prototype = new Parent();\nvar child1 = new Child('kevin', '18');\nconsole.log(child1)\n```\n\n组合继承最大的缺点是会调用两次父构造函数。\n\n一次是设置子类型实例的原型的时候：\n\n```javascript\nChild.prototype = new Parent();\n```\n\n一次在创建子类型实例的时候：\n\n```javascript\nvar child1 = new Child('kevin', '18');\n```\n\n回想下 new 的模拟实现，其实在这句中，我们会执行：\n\n```javascript\nParent.call(this, name);\n```\n\n在这里，我们又会调用了一次 Parent 构造函数。\n\n所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为`colors`，属性值为`['red', 'blue', 'green']`。\n\n那么我们该如何精益求精，避免这一次重复调用呢？\n\n如果我们不使用 Child.prototype = new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？\n\n**看看如何实现：**\n\n```javascript\nfunction Parent (name) {    \n    this.name = name;    \n    this.colors = ['red', 'blue', 'green'];\n}\nParent.prototype.getName = function () {    console.log(this.name)}\nfunction Child (name, age) {    \n    Parent.call(this, name);    \n    this.age = age;\n}// 关键的三步\nvar F = function () {};\nF.prototype = Parent.prototype;\nChild.prototype = new F();\nvar child1 = new Child('kevin', '18');\nconsole.log(child1);\n```\n\n最后我们封装一下这个继承方法：\n\n```javascript\nfunction object(o) {    \n    function F() {};\n    F.prototype = o;    \n    return new F();\n}\nfunction prototype(child, parent) {    \n    var prototype = object(parent.prototype);    \n    prototype.constructor = child;    \n    child.prototype = prototype;\n}// 当我们使用的时候：prototype(Child, Parent);\n```\n\n引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：\n\n这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。","source":"_posts/javaScript深入之继承的多种方式和优缺点.md","raw":"---\ncategories: \n- 前端\n- 面向对象\ntags:\n- 继承\n---\n## JavaScript深入之继承的多种方式和优缺点\n\n[前端大学](javascript:void(0);) \n（给前端大学加星标，提升前端技能.）\n\n> 作者：mqyqingfeng\n>\n> https://github.com/mqyqingfeng/Blog/issues/16\n\n## **写在前面** \n\n本文讲解JavaScript各种继承方式和优缺点。\n\n但是注意：\n\n这篇文章更像是笔记，哎，再让我感叹一句：《JavaScript高级程序设计》写得真是太好了！\n\n## **1、原型链继承**\n\n\n\n```javascript\nfunction Parent () {    \n    this.name = 'kevin';\n}\nParent.prototype.getName = function () {    console.log(this.name);}\nfunction Child () {}\nChild.prototype = new Parent();\nvar child1 = new Child();\nconsole.log(child1.getName()) // kevin\n```\n\n**问题：**\n\n1、引用类型的属性被所有实例共享，举个例子：\n\n```javascript\nfunction Parent () {    this.names = ['kevin', 'daisy'];}function Child () {}Child.prototype = new Parent();var child1 = new Child();child1.names.push('yayu');console.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\", \"yayu\"]\n```\n\n2、在创建 Child 的实例时，不能向Parent传参\n\n## **2、借用构造函数(经典继承)**\n\n\n```javascript\nfunction Parent () {    this.names = ['kevin', 'daisy'];}function Child () {    Parent.call(this);}var child1 = new Child();child1.names.push('yayu');console.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\"]\n```\n\n**优点：**\n\n1、避免了引用类型的属性被所有实例共享\n\n2、可以在 Child 中向 Parent 传参\n\n**举个例子：**\n\n\n```javascript\nfunction Parent (name) {    \n\tthis.name = name;\n}\nfunction Child (name) {\n\tParent.call(this, name);\n}\nvar child1 = new Child('kevin');\nconsole.log(child1.name); // kevin\nvar child2 = new Child('daisy');\nconsole.log(child2.name); // daisy\n```\n\n**缺点：**\n\n方法都在构造函数中定义，每次创建实例都会创建一遍方法。\n\n## **3、组合继承**\n\n原型链继承和经典继承双剑合璧。\n\n\n```javascript\nfunction Parent (name) {    \nthis.name = name;    \nthis.colors = ['red', 'blue', 'green'];}\nParent.prototype.getName = function () {    \nconsole.log(this.name)}\nfunction Child (name, age) {\n    Parent.call(this, name);        \n    this.age = age;\n}\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\nvar child1 = new Child('kevin', '18');\nchild1.colors.push('black');\nconsole.log(child1.name); // kevin\nconsole.log(child1.age); // 18\nconsole.log(child1.colors); // [\"red\", \"blue\", \"green\", \"black\"]\nvar child2 = new Child('daisy', '20');\nconsole.log(child2.name); // daisy\nconsole.log(child2.age); // 20\nconsole.log(child2.colors); // [\"red\", \"blue\", \"green\"]\n```\n\n优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。\n\n## **4、原型式继承**\n\n```javascript\nfunction createObj(o) {    \n    function F(){}    \n    F.prototype = o;    \n    return new F();\n}\n```\n\n就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。\n\n**缺点：**\n\n包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。\n\n\n```javascript\nvar person = {    \n    name: 'kevin',    \n    friends: ['daisy', 'kelly']\n}\nvar person1 = createObj(person);\nvar person2 = createObj(person);\nperson1.name = 'person1';\nconsole.log(person2.name); // kevin\nperson1.firends.push('taylor');\nconsole.log(person2.friends); // [\"daisy\", \"kelly\", \"taylor\"]\n```\n\n注意：修改`person1.name`的值，`person2.name`的值并未发生改变，并不是因为`person1`和`person2`有独立的 name 值，而是因为`person1.name = 'person1'`，给`person1`添加了 name 值，并非修改了原型上的 name 值。\n\n## **5、寄生式继承**\n\n创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。\n\n```javascript\nfunction createObj (o) {    \n    var clone = Object.create(o);    \n    clone.sayName = function () { console.log('hi'); }    \n    return clone;\n}\n```\n\n缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。\n\n## **6、寄生组合式继承**\n\n为了方便大家阅读，在这里重复一下组合继承的代码：\n\n```javascript\nfunction Parent (name) {    \n    this.name = name;    \n    this.colors = ['red', 'blue', 'green'];\n}\nParent.prototype.getName = function () {    console.log(this.name)}\nfunction Child (name, age) {    \n    Parent.call(this, name);    \n    this.age = age;\n}\nChild.prototype = new Parent();\nvar child1 = new Child('kevin', '18');\nconsole.log(child1)\n```\n\n组合继承最大的缺点是会调用两次父构造函数。\n\n一次是设置子类型实例的原型的时候：\n\n```javascript\nChild.prototype = new Parent();\n```\n\n一次在创建子类型实例的时候：\n\n```javascript\nvar child1 = new Child('kevin', '18');\n```\n\n回想下 new 的模拟实现，其实在这句中，我们会执行：\n\n```javascript\nParent.call(this, name);\n```\n\n在这里，我们又会调用了一次 Parent 构造函数。\n\n所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为`colors`，属性值为`['red', 'blue', 'green']`。\n\n那么我们该如何精益求精，避免这一次重复调用呢？\n\n如果我们不使用 Child.prototype = new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？\n\n**看看如何实现：**\n\n```javascript\nfunction Parent (name) {    \n    this.name = name;    \n    this.colors = ['red', 'blue', 'green'];\n}\nParent.prototype.getName = function () {    console.log(this.name)}\nfunction Child (name, age) {    \n    Parent.call(this, name);    \n    this.age = age;\n}// 关键的三步\nvar F = function () {};\nF.prototype = Parent.prototype;\nChild.prototype = new F();\nvar child1 = new Child('kevin', '18');\nconsole.log(child1);\n```\n\n最后我们封装一下这个继承方法：\n\n```javascript\nfunction object(o) {    \n    function F() {};\n    F.prototype = o;    \n    return new F();\n}\nfunction prototype(child, parent) {    \n    var prototype = object(parent.prototype);    \n    prototype.constructor = child;    \n    child.prototype = prototype;\n}// 当我们使用的时候：prototype(Child, Parent);\n```\n\n引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：\n\n这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。","slug":"javaScript深入之继承的多种方式和优缺点","published":1,"date":"2020-07-16T13:28:48.298Z","updated":"2020-07-17T11:52:26.026Z","title":"javaScript深入之继承的多种方式和优缺点","_id":"ckcq5xcez0008lwvo5esj6o4z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JavaScript深入之继承的多种方式和优缺点\"><a href=\"#JavaScript深入之继承的多种方式和优缺点\" class=\"headerlink\" title=\"JavaScript深入之继承的多种方式和优缺点\"></a>JavaScript深入之继承的多种方式和优缺点</h2><p><a href=\"javascript:void(0);\">前端大学</a><br>（给前端大学加星标，提升前端技能.）</p>\n<blockquote>\n<p>作者：mqyqingfeng</p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/16\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/16</a></p>\n</blockquote>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a><strong>写在前面</strong></h2><p>本文讲解JavaScript各种继承方式和优缺点。</p>\n<p>但是注意：</p>\n<p>这篇文章更像是笔记，哎，再让我感叹一句：《JavaScript高级程序设计》写得真是太好了！</p>\n<h2 id=\"1、原型链继承\"><a href=\"#1、原型链继承\" class=\"headerlink\" title=\"1、原型链继承\"></a><strong>1、原型链继承</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'kevin'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.getName()) <span class=\"comment\">// kevin</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题：</strong></p>\n<p>1、引用类型的属性被所有实例共享，举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"keyword\">this</span>.names = [<span class=\"string\">'kevin'</span>, <span class=\"string\">'daisy'</span>];&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\"></span>) </span>&#123;&#125;Child.prototype = <span class=\"keyword\">new</span> Parent();<span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child();child1.names.push(<span class=\"string\">'yayu'</span>);<span class=\"built_in\">console</span>.log(child1.names); <span class=\"comment\">// [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\", \"yayu\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在创建 Child 的实例时，不能向Parent传参</p>\n<h2 id=\"2、借用构造函数-经典继承\"><a href=\"#2、借用构造函数-经典继承\" class=\"headerlink\" title=\"2、借用构造函数(经典继承)\"></a><strong>2、借用构造函数(经典继承)</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"keyword\">this</span>.names = [<span class=\"string\">'kevin'</span>, <span class=\"string\">'daisy'</span>];&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\"></span>) </span>&#123;    Parent.call(<span class=\"keyword\">this</span>);&#125;<span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child();child1.names.push(<span class=\"string\">'yayu'</span>);<span class=\"built_in\">console</span>.log(child1.names); <span class=\"comment\">// [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\"]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、避免了引用类型的属性被所有实例共享</p>\n<p>2、可以在 Child 中向 Parent 传参</p>\n<p><strong>举个例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\tParent.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.name); <span class=\"comment\">// kevin</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'daisy'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.name); <span class=\"comment\">// daisy</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>缺点：</strong></p>\n<p>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p>\n<h2 id=\"3、组合继承\"><a href=\"#3、组合继承\" class=\"headerlink\" title=\"3、组合继承\"></a><strong>3、组合继承</strong></h2><p>原型链继承和经典继承双剑合璧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"keyword\">this</span>.name = name;    </span><br><span class=\"line\"><span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>];&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>, name);        </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br><span class=\"line\">child1.colors.push(<span class=\"string\">'black'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.name); <span class=\"comment\">// kevin</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.age); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.colors); <span class=\"comment\">// [\"red\", \"blue\", \"green\", \"black\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'daisy'</span>, <span class=\"string\">'20'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.name); <span class=\"comment\">// daisy</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.age); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.colors); <span class=\"comment\">// [\"red\", \"blue\", \"green\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p>\n<h2 id=\"4、原型式继承\"><a href=\"#4、原型式继承\" class=\"headerlink\" title=\"4、原型式继承\"></a><strong>4、原型式继承</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObj</span>(<span class=\"params\">o</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;    </span><br><span class=\"line\">    F.prototype = o;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。</p>\n<p><strong>缺点：</strong></p>\n<p>包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;    </span><br><span class=\"line\">    name: <span class=\"string\">'kevin'</span>,    </span><br><span class=\"line\">    friends: [<span class=\"string\">'daisy'</span>, <span class=\"string\">'kelly'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createObj(person);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createObj(person);</span><br><span class=\"line\">person1.name = <span class=\"string\">'person1'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person2.name); <span class=\"comment\">// kevin</span></span><br><span class=\"line\">person1.firends.push(<span class=\"string\">'taylor'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person2.friends); <span class=\"comment\">// [\"daisy\", \"kelly\", \"taylor\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：修改<code>person1.name</code>的值，<code>person2.name</code>的值并未发生改变，并不是因为<code>person1</code>和<code>person2</code>有独立的 name 值，而是因为<code>person1.name = &#39;person1&#39;</code>，给<code>person1</code>添加了 name 值，并非修改了原型上的 name 值。</p>\n<h2 id=\"5、寄生式继承\"><a href=\"#5、寄生式继承\" class=\"headerlink\" title=\"5、寄生式继承\"></a><strong>5、寄生式继承</strong></h2><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObj</span> (<span class=\"params\">o</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> clone = <span class=\"built_in\">Object</span>.create(o);    </span><br><span class=\"line\">    clone.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>); &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p>\n<h2 id=\"6、寄生组合式继承\"><a href=\"#6、寄生组合式继承\" class=\"headerlink\" title=\"6、寄生组合式继承\"></a><strong>6、寄生组合式继承</strong></h2><p>为了方便大家阅读，在这里重复一下组合继承的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name, age</span>) </span>&#123;    </span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>, name);    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1)</span><br></pre></td></tr></table></figure>\n\n<p>组合继承最大的缺点是会调用两次父构造函数。</p>\n<p>一次是设置子类型实例的原型的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br></pre></td></tr></table></figure>\n\n<p>一次在创建子类型实例的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>回想下 new 的模拟实现，其实在这句中，我们会执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parent.call(<span class=\"keyword\">this</span>, name);</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们又会调用了一次 Parent 构造函数。</p>\n<p>所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为<code>colors</code>，属性值为<code>[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]</code>。</p>\n<p>那么我们该如何精益求精，避免这一次重复调用呢？</p>\n<p>如果我们不使用 Child.prototype = new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？</p>\n<p><strong>看看如何实现：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name, age</span>) </span>&#123;    </span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>, name);    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 关键的三步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">F.prototype = Parent.prototype;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1);</span><br></pre></td></tr></table></figure>\n\n<p>最后我们封装一下这个继承方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prototype</span>(<span class=\"params\">child, parent</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> prototype = object(parent.prototype);    </span><br><span class=\"line\">    prototype.constructor = child;    </span><br><span class=\"line\">    child.prototype = prototype;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 当我们使用的时候：prototype(Child, Parent);</span></span><br></pre></td></tr></table></figure>\n\n<p>引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：</p>\n<p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JavaScript深入之继承的多种方式和优缺点\"><a href=\"#JavaScript深入之继承的多种方式和优缺点\" class=\"headerlink\" title=\"JavaScript深入之继承的多种方式和优缺点\"></a>JavaScript深入之继承的多种方式和优缺点</h2><p><a href=\"javascript:void(0);\">前端大学</a><br>（给前端大学加星标，提升前端技能.）</p>\n<blockquote>\n<p>作者：mqyqingfeng</p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/16\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/16</a></p>\n</blockquote>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a><strong>写在前面</strong></h2><p>本文讲解JavaScript各种继承方式和优缺点。</p>\n<p>但是注意：</p>\n<p>这篇文章更像是笔记，哎，再让我感叹一句：《JavaScript高级程序设计》写得真是太好了！</p>\n<h2 id=\"1、原型链继承\"><a href=\"#1、原型链继承\" class=\"headerlink\" title=\"1、原型链继承\"></a><strong>1、原型链继承</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'kevin'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.getName()) <span class=\"comment\">// kevin</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题：</strong></p>\n<p>1、引用类型的属性被所有实例共享，举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"keyword\">this</span>.names = [<span class=\"string\">'kevin'</span>, <span class=\"string\">'daisy'</span>];&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\"></span>) </span>&#123;&#125;Child.prototype = <span class=\"keyword\">new</span> Parent();<span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child();child1.names.push(<span class=\"string\">'yayu'</span>);<span class=\"built_in\">console</span>.log(child1.names); <span class=\"comment\">// [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\", \"yayu\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在创建 Child 的实例时，不能向Parent传参</p>\n<h2 id=\"2、借用构造函数-经典继承\"><a href=\"#2、借用构造函数-经典继承\" class=\"headerlink\" title=\"2、借用构造函数(经典继承)\"></a><strong>2、借用构造函数(经典继承)</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"keyword\">this</span>.names = [<span class=\"string\">'kevin'</span>, <span class=\"string\">'daisy'</span>];&#125;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\"></span>) </span>&#123;    Parent.call(<span class=\"keyword\">this</span>);&#125;<span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child();child1.names.push(<span class=\"string\">'yayu'</span>);<span class=\"built_in\">console</span>.log(child1.names); <span class=\"comment\">// [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\"]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、避免了引用类型的属性被所有实例共享</p>\n<p>2、可以在 Child 中向 Parent 传参</p>\n<p><strong>举个例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\tParent.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.name); <span class=\"comment\">// kevin</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'daisy'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.name); <span class=\"comment\">// daisy</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>缺点：</strong></p>\n<p>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p>\n<h2 id=\"3、组合继承\"><a href=\"#3、组合继承\" class=\"headerlink\" title=\"3、组合继承\"></a><strong>3、组合继承</strong></h2><p>原型链继承和经典继承双剑合璧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"keyword\">this</span>.name = name;    </span><br><span class=\"line\"><span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>];&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>, name);        </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br><span class=\"line\">child1.colors.push(<span class=\"string\">'black'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.name); <span class=\"comment\">// kevin</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.age); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.colors); <span class=\"comment\">// [\"red\", \"blue\", \"green\", \"black\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'daisy'</span>, <span class=\"string\">'20'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.name); <span class=\"comment\">// daisy</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.age); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.colors); <span class=\"comment\">// [\"red\", \"blue\", \"green\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p>\n<h2 id=\"4、原型式继承\"><a href=\"#4、原型式继承\" class=\"headerlink\" title=\"4、原型式继承\"></a><strong>4、原型式继承</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObj</span>(<span class=\"params\">o</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;    </span><br><span class=\"line\">    F.prototype = o;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。</p>\n<p><strong>缺点：</strong></p>\n<p>包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;    </span><br><span class=\"line\">    name: <span class=\"string\">'kevin'</span>,    </span><br><span class=\"line\">    friends: [<span class=\"string\">'daisy'</span>, <span class=\"string\">'kelly'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createObj(person);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createObj(person);</span><br><span class=\"line\">person1.name = <span class=\"string\">'person1'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person2.name); <span class=\"comment\">// kevin</span></span><br><span class=\"line\">person1.firends.push(<span class=\"string\">'taylor'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person2.friends); <span class=\"comment\">// [\"daisy\", \"kelly\", \"taylor\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：修改<code>person1.name</code>的值，<code>person2.name</code>的值并未发生改变，并不是因为<code>person1</code>和<code>person2</code>有独立的 name 值，而是因为<code>person1.name = &#39;person1&#39;</code>，给<code>person1</code>添加了 name 值，并非修改了原型上的 name 值。</p>\n<h2 id=\"5、寄生式继承\"><a href=\"#5、寄生式继承\" class=\"headerlink\" title=\"5、寄生式继承\"></a><strong>5、寄生式继承</strong></h2><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObj</span> (<span class=\"params\">o</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> clone = <span class=\"built_in\">Object</span>.create(o);    </span><br><span class=\"line\">    clone.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>); &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p>\n<h2 id=\"6、寄生组合式继承\"><a href=\"#6、寄生组合式继承\" class=\"headerlink\" title=\"6、寄生组合式继承\"></a><strong>6、寄生组合式继承</strong></h2><p>为了方便大家阅读，在这里重复一下组合继承的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name, age</span>) </span>&#123;    </span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>, name);    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1)</span><br></pre></td></tr></table></figure>\n\n<p>组合继承最大的缺点是会调用两次父构造函数。</p>\n<p>一次是设置子类型实例的原型的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br></pre></td></tr></table></figure>\n\n<p>一次在创建子类型实例的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>回想下 new 的模拟实现，其实在这句中，我们会执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parent.call(<span class=\"keyword\">this</span>, name);</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们又会调用了一次 Parent 构造函数。</p>\n<p>所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为<code>colors</code>，属性值为<code>[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]</code>。</p>\n<p>那么我们该如何精益求精，避免这一次重复调用呢？</p>\n<p>如果我们不使用 Child.prototype = new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？</p>\n<p><strong>看看如何实现：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span> (<span class=\"params\">name</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span> (<span class=\"params\">name, age</span>) </span>&#123;    </span><br><span class=\"line\">    Parent.call(<span class=\"keyword\">this</span>, name);    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 关键的三步</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">F.prototype = Parent.prototype;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child(<span class=\"string\">'kevin'</span>, <span class=\"string\">'18'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1);</span><br></pre></td></tr></table></figure>\n\n<p>最后我们封装一下这个继承方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prototype</span>(<span class=\"params\">child, parent</span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> prototype = object(parent.prototype);    </span><br><span class=\"line\">    prototype.constructor = child;    </span><br><span class=\"line\">    child.prototype = prototype;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 当我们使用的时候：prototype(Child, Parent);</span></span><br></pre></td></tr></table></figure>\n\n<p>引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：</p>\n<p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcpzrs4p000hkgvohct1abzf","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4euy5000390voc5u2ej6e"},{"post_id":"ckcotxgpn000bp8vocsnn78kn","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4fhyw000490vo92ey0trz"},{"post_id":"ckcotxgpl000ap8vof8eqavcr","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4fpon000590vodzfa3b9z"},{"post_id":"ckcotxgpi0008p8vofv1p4bhq","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4h0jj000g90vofa3k8zxe"},{"post_id":"ckcotxgoh0006p8vohca04wy8","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4s4xy000v90vo4rvd4eod"},{"post_id":"ckcotxgo50005p8voamf3btnk","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4tzwc001690vo6iq92t6u"},{"post_id":"ckcotxgo40004p8vo5reghu48","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4un8h001890vobcfp1u1u"},{"post_id":"ckcotxgsc000cp8voetlygb9a","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4vjmc001c90vo7nv9a6u7"},{"post_id":"ckcotxgt6000fp8vo7sxpevxh","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4xjci001s90vo4zqr61dl"},{"post_id":"ckcotxgsq000ep8vo2tc84vnp","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq4yptq001v90voerpgbiuy"},{"post_id":"ckcotxgsn000dp8vodxwn5du7","category_id":"ckcq54499002p90vocrued76t","_id":"ckcq54499002r90vof9ogekqr"},{"post_id":"ckcotxgt6000fp8vo7sxpevxh","category_id":"ckcq54xmk002t90vo1bim9kfl","_id":"ckcq54xml002u90vo2nm8ebpm"},{"post_id":"ckcotxgu1000gp8vofgyg4ats","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq55wbm002x90vo5wt2c1uq"},{"post_id":"ckcotxgue000hp8vo8ps9f7sd","category_id":"ckcq57jqd003490vo998q3dgy","_id":"ckcq57jqe003790vo0r8qe35h"},{"post_id":"ckcotxguq000ip8vobtjrh0yd","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq58sdx003d90vo17z73nyf"},{"post_id":"ckcotxguq000ip8vobtjrh0yd","category_id":"ckcq58sdw003c90voexxy42kk","_id":"ckcq58sdx003e90vo2g696u3g"},{"post_id":"ckcotxguv000jp8vohafig6rd","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5fcew003m90voe4fx4nhq"},{"post_id":"ckcotxgo40004p8vo5reghu48","category_id":"ckcq511p7002890vohonxc5n8","_id":"ckcq5g0h1003o90vohodmcxcw"},{"post_id":"ckcotxgoh0006p8vohca04wy8","category_id":"ckcq5hgp1003s90vo83524ma5","_id":"ckcq5hgp1003u90vohj5latw7"},{"post_id":"ckcotxgsc000cp8voetlygb9a","category_id":"ckcq55wbm002w90vo4eyj2p7b","_id":"ckcq5n1nj003y90vo1a59bpw2"},{"post_id":"ckcotxgsq000ep8vo2tc84vnp","category_id":"ckcq55wbm002w90vo4eyj2p7b","_id":"ckcq5nbq3003z90vocs2ifvm1"},{"post_id":"ckcotxgu1000gp8vofgyg4ats","category_id":"ckcq55wbm002w90vo4eyj2p7b","_id":"ckcq5nxl4004290vob88ud6sg"},{"post_id":"ckcotxguv000jp8vohafig6rd","category_id":"ckcq53le5002m90vo14bk4ozd","_id":"ckcq5oj5f004390vo1phmefse"},{"post_id":"ckcotxgo50005p8voamf3btnk","category_id":"ckcq511p7002890vohonxc5n8","_id":"ckcq5qn8f004590vo9aaf4h89"},{"post_id":"ckcq5t243004f90vo8fih3h15","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5t243004h90vo4ia08um7"},{"post_id":"ckcq5tam8004i90vo41tw7bv3","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5tam9004k90vo8ssp6kq8"},{"post_id":"ckcotxgpi0008p8vofv1p4bhq","category_id":"ckcq5ts60004m90vo06cb3d7x","_id":"ckcq5ts61004n90vo79qnc5uy"},{"post_id":"ckcq5x0tt0000lwvog45i8qpu","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5x0tu0002lwvo00oo6cnu"},{"post_id":"ckcq5x0tt0000lwvog45i8qpu","category_id":"ckcq53le5002m90vo14bk4ozd","_id":"ckcq5x0tu0003lwvo2wr42x84"},{"post_id":"ckcq5x9870004lwvoetm0f7kk","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5x9890006lwvo52248znj"},{"post_id":"ckcq5x9870004lwvoetm0f7kk","category_id":"ckcq54xmk002t90vo1bim9kfl","_id":"ckcq5x9890007lwvo5wpc0l22"},{"post_id":"ckcq5xcez0008lwvo5esj6o4z","category_id":"ckcq4euy5000290vo9a0vhpfr","_id":"ckcq5xcf0000alwvoevyw496o"},{"post_id":"ckcq5xcez0008lwvo5esj6o4z","category_id":"ckcq54xmk002t90vo1bim9kfl","_id":"ckcq5xcf0000blwvoazkj5ttl"},{"post_id":"ckcpzrs4p000hkgvohct1abzf","category_id":"ckcq60ir6000clwvo2yb0c1ah","_id":"ckcq60ir7000dlwvo6yfi59qp"},{"post_id":"ckcq5t243004f90vo8fih3h15","category_id":"ckcq5gqvd003p90vodrzd02rb","_id":"ckcq6jgmz000jlwvoaxv0f527"},{"post_id":"ckcotxgpn000bp8vocsnn78kn","category_id":"ckcq5gqvd003p90vodrzd02rb","_id":"ckcq6jucu000klwvoe9822gf1"},{"post_id":"ckcq5tam8004i90vo41tw7bv3","category_id":"ckcq5gqvd003p90vodrzd02rb","_id":"ckcq6kf0u000llwvoemn9bq0q"},{"post_id":"ckcotxgpl000ap8vof8eqavcr","category_id":"ckcq53le5002m90vo14bk4ozd","_id":"ckcq6oia8000slwvo6fbzau23"}],"PostTag":[{"post_id":"ckcotxgpn000bp8vocsnn78kn","tag_id":"ckcq4gh2q000990vo6v8v7ecx","_id":"ckcq4gh2r000a90vo0a6o2rk1"},{"post_id":"ckcotxgo40004p8vo5reghu48","tag_id":"ckcq4v89k001990vo3t95fmm5","_id":"ckcq4v89k001a90vo3nwt3olj"},{"post_id":"ckcotxgsc000cp8voetlygb9a","tag_id":"ckcq4w3sz001f90vofcuxh8td","_id":"ckcq4w3sz001g90voggdr3446"},{"post_id":"ckcotxgt6000fp8vo7sxpevxh","tag_id":"ckcq4hrxz000l90vobeby6iam","_id":"ckcq4xt9h001t90voerig1v70"},{"post_id":"ckcotxgsq000ep8vo2tc84vnp","tag_id":"ckcq4w3sz001f90vofcuxh8td","_id":"ckcq52u9h002h90vo3crmg3j2"},{"post_id":"ckcotxgsq000ep8vo2tc84vnp","tag_id":"ckcq52yh8002i90vogs4l58sd","_id":"ckcq52yh8002j90vofcd929uh"},{"post_id":"ckcotxgsn000dp8vodxwn5du7","tag_id":"ckcq4wrdk001n90voabyvaz1w","_id":"ckcq53oli002o90vocq6ud69l"},{"post_id":"ckcotxgu1000gp8vofgyg4ats","tag_id":"ckcq4w3sz001f90vofcuxh8td","_id":"ckcq56lqj003390vo3jyuf7ls"},{"post_id":"ckcotxgue000hp8vo8ps9f7sd","tag_id":"ckcq5865i003990vofjsyhxpp","_id":"ckcq5865i003a90vogtkr7t7g"},{"post_id":"ckcotxguq000ip8vobtjrh0yd","tag_id":"ckcq5965p003f90vobndyd3dl","_id":"ckcq5965p003h90vo81om3d8s"},{"post_id":"ckcotxguq000ip8vobtjrh0yd","tag_id":"ckcq5965p003g90vod88c5dos","_id":"ckcq5965p003i90vofej5b04v"},{"post_id":"ckcotxguv000jp8vohafig6rd","tag_id":"ckcq5fcev003j90vo29y01trk","_id":"ckcq5fcev003l90voa0msg85m"},{"post_id":"ckcotxgoh0006p8vohca04wy8","tag_id":"ckcq5hgp0003r90vo92dq1ce0","_id":"ckcq5hgp1003t90vo53sseclr"},{"post_id":"ckcotxgsq000ep8vo2tc84vnp","tag_id":"ckcq5ni05004090vo47m1h1eq","_id":"ckcq5ni06004190vo4peefzqa"},{"post_id":"ckcotxgo50005p8voamf3btnk","tag_id":"ckcq5qn8f004490vo2t9k5uyl","_id":"ckcq5qn8f004690voe4i1bl8p"},{"post_id":"ckcotxgo50005p8voamf3btnk","tag_id":"ckcq5qpff004790vo5sx3319p","_id":"ckcq5qpff004890vo2v0q9xaf"},{"post_id":"ckcq5t243004f90vo8fih3h15","tag_id":"ckcq4gh2q000990vo6v8v7ecx","_id":"ckcq5t243004g90vogyf41bgs"},{"post_id":"ckcotxgpi0008p8vofv1p4bhq","tag_id":"ckcq4w3sz001f90vofcuxh8td","_id":"ckcq5tnow004l90vo6cc95041"},{"post_id":"ckcq5x0tt0000lwvog45i8qpu","tag_id":"ckcq4tuw2001390vo0k9tbuuf","_id":"ckcq5x0tu0001lwvob3x6elsb"},{"post_id":"ckcq5x9870004lwvoetm0f7kk","tag_id":"ckcq4rzgx000s90vo4awwa3aj","_id":"ckcq5x9880005lwvoeuel3tyg"},{"post_id":"ckcq5xcez0008lwvo5esj6o4z","tag_id":"ckcq4hrxz000l90vobeby6iam","_id":"ckcq5xcf00009lwvo0bpyhx9a"},{"post_id":"ckcpzrs4p000hkgvohct1abzf","tag_id":"ckcq4g7rx000690vohm4s1foo","_id":"ckcq613tx000ilwvoas331pcg"},{"post_id":"ckcq5tam8004i90vo41tw7bv3","tag_id":"ckcq6kw8z000olwvo1vnnbry6","_id":"ckcq6kw8z000plwvo9rrl47v0"},{"post_id":"ckcotxgpi0008p8vofv1p4bhq","tag_id":"ckcq6ne1f000qlwvoheqrbtrd","_id":"ckcq6ne1g000rlwvohf4x604u"}],"Tag":[{"name":"jQuery","_id":"ckcpoquez0000kgvo5kh3hukg"},{"name":"表格","_id":"ckcpoquf00002kgvo8fkfagle"},{"name":"表单验证","_id":"ckcpoquf10003kgvo65cw4kau"},{"name":"Vue","_id":"ckcq4g7rx000690vohm4s1foo"},{"name":"React","_id":"ckcq4gh2q000990vo6v8v7ecx"},{"name":"Npm","_id":"ckcq4h5rd000h90vof4jbar5n"},{"name":"继承","_id":"ckcq4hrxz000l90vobeby6iam"},{"name":"面向对象","_id":"ckcq4hyyj000n90vo31479lfi"},{"name":"设计模式","_id":"ckcq4rzgx000s90vo4awwa3aj"},{"name":"ht.js","_id":"ckcq4sa07000w90vo27mm41ul"},{"name":"Hexo","_id":"ckcq4tuw2001390vo0k9tbuuf"},{"name":"事件对象","_id":"ckcq4v89k001990vo3t95fmm5"},{"name":"npm","_id":"ckcq4w3sz001f90vofcuxh8td"},{"name":"端口","_id":"ckcq4wrdk001n90voabyvaz1w"},{"name":"命令行","_id":"ckcq4ww5o001p90vo5tz11bhv"},{"name":"脚手架","_id":"ckcq4yptp001u90vo8dh18deq"},{"name":"前端自动化","_id":"ckcq4yptq001w90vohyz7htdy"},{"name":"组件化","_id":"ckcq4yykj001z90vodd6h0s50"},{"name":"cmd","_id":"ckcq50glv002390vo96kl3ocb"},{"name":"node","_id":"ckcq52yh8002i90vogs4l58sd"},{"name":"linux","_id":"ckcq5865i003990vofjsyhxpp"},{"name":"小程序","_id":"ckcq5965p003f90vobndyd3dl"},{"name":"webview","_id":"ckcq5965p003g90vod88c5dos"},{"name":"event","_id":"ckcq5fcev003j90vo29y01trk"},{"name":"HT","_id":"ckcq5hgp0003r90vo92dq1ce0"},{"name":"自动化","_id":"ckcq5ni05004090vo47m1h1eq"},{"name":"Node","_id":"ckcq5qn8f004490vo2t9k5uyl"},{"name":"fs","_id":"ckcq5qpff004790vo5sx3319p"},{"name":"组件传参","_id":"ckcq60vmr000elwvo7wqpag8v"},{"name":"组件","_id":"ckcq60zxc000glwvo3gv2fu5y"},{"name":"redux","_id":"ckcq6kog7000mlwvogml41eui"},{"name":"react-redux","_id":"ckcq6kw8z000olwvo1vnnbry6"},{"name":"nrm","_id":"ckcq6ne1f000qlwvoheqrbtrd"}]}}